{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\nimport { Popper } from '../../helpers';\nconst SearchInputBase = _a => {\n  var {\n      className,\n      value = '',\n      attributes = [],\n      formAdditionalItems,\n      hasWordsAttrLabel = 'Has words',\n      advancedSearchDelimiter,\n      placeholder,\n      hint,\n      onChange,\n      onSearch,\n      onClear,\n      onToggleAdvancedSearch,\n      isAdvancedSearchOpen,\n      resultsCount,\n      onNextClick,\n      onPreviousClick,\n      innerRef,\n      expandableInput,\n      'aria-label': ariaLabel = 'Search input',\n      resetButtonLabel = 'Reset',\n      openMenuButtonAriaLabel = 'Open advanced search',\n      previousNavigationButtonAriaLabel = 'Previous',\n      isPreviousNavigationButtonDisabled = false,\n      isNextNavigationButtonDisabled = false,\n      nextNavigationButtonAriaLabel = 'Next',\n      submitSearchButtonLabel = 'Search',\n      isDisabled = false,\n      appendTo,\n      removeFindDomNode = false,\n      zIndex = 9999,\n      type = 'text',\n      name\n    } = _a,\n    props = __rest(_a, [\"className\", \"value\", \"attributes\", \"formAdditionalItems\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"hint\", \"onChange\", \"onSearch\", \"onClear\", \"onToggleAdvancedSearch\", \"isAdvancedSearchOpen\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", \"expandableInput\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"previousNavigationButtonAriaLabel\", \"isPreviousNavigationButtonDisabled\", \"isNextNavigationButtonDisabled\", \"nextNavigationButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\", \"appendTo\", \"removeFindDomNode\", \"zIndex\", \"type\", \"name\"]);\n  const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const searchInputRef = React.useRef(null);\n  const ref = React.useRef(null);\n  const searchInputInputRef = innerRef || ref;\n  const searchInputExpandableToggleRef = React.useRef(null);\n  const [focusAfterExpandChange, setFocusAfterExpandChange] = React.useState(false);\n  const {\n    isExpanded,\n    onToggleExpand,\n    toggleAriaLabel\n  } = expandableInput || {};\n  React.useEffect(() => {\n    var _a, _b;\n    // this effect and the focusAfterExpandChange variable are needed to focus the input/toggle as needed when the\n    // expansion toggle is fired without focusing on mount\n    if (!focusAfterExpandChange) {\n      return;\n    } else if (isExpanded) {\n      (_a = searchInputInputRef === null || searchInputInputRef === void 0 ? void 0 : searchInputInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    } else {\n      (_b = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n    setFocusAfterExpandChange(false);\n  }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(() => {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n  const onChangeHandler = (event, value) => {\n    if (onChange) {\n      onChange(event, value);\n    }\n    setSearchValue(value);\n  };\n  const onToggle = e => {\n    const isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n  const onSearchHandler = event => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    setIsSearchMenuOpen(false);\n  };\n  const splitStringExceptInQuotes = str => {\n    let quoteType;\n    return str.match(/\\\\?.|^$/g).reduce((p, c) => {\n      if (c === \"'\" || c === '\"') {\n        if (!quoteType) {\n          quoteType = c;\n        }\n        if (c === quoteType) {\n          p.quote = !p.quote;\n        }\n      } else if (!p.quote && c === ' ') {\n        p.a.push('');\n      } else {\n        p.a[p.a.length - 1] += c.replace(/\\\\(.)/, '$1');\n      }\n      return p;\n    }, {\n      a: ['']\n    }).a;\n  };\n  const getAttrValueMap = () => {\n    const attrValue = {};\n    const pairs = splitStringExceptInQuotes(searchValue);\n    pairs.map(pair => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, '');\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords') ? `${attrValue.haswords} ${splitPair[0]}` : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n  const onEnter = event => {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n  const onClearInput = e => {\n    if (onClear) {\n      onClear(e);\n    }\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n  const onExpandHandler = event => {\n    setSearchValue('');\n    onToggleExpand(event, isExpanded);\n    setFocusAfterExpandChange(true);\n  };\n  const renderUtilities = value && (resultsCount || !!onNextClick && !!onPreviousClick || !!onClear && !expandableInput);\n  const buildTextInputGroup = (_a = {}) => {\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(TextInputGroup, Object.assign({\n      isDisabled: isDisabled\n    }, searchInputProps), React.createElement(TextInputGroupMain, {\n      hint: hint,\n      icon: React.createElement(SearchIcon, null),\n      innerRef: searchInputInputRef,\n      value: searchValue,\n      placeholder: placeholder,\n      \"aria-label\": ariaLabel,\n      onKeyDown: onEnter,\n      onChange: onChangeHandler,\n      type: type,\n      name: name\n    }), renderUtilities && React.createElement(TextInputGroupUtilities, null, resultsCount && React.createElement(Badge, {\n      isRead: true\n    }, resultsCount), !!onNextClick && !!onPreviousClick && React.createElement(\"div\", {\n      className: \"pf-c-text-input-group__group\"\n    }, React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": previousNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isPreviousNavigationButtonDisabled,\n      onClick: onPreviousClick\n    }, React.createElement(AngleUpIcon, null)), React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": nextNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isNextNavigationButtonDisabled,\n      onClick: onNextClick\n    }, React.createElement(AngleDownIcon, null))), !!onClear && !expandableInput && React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      isDisabled: isDisabled,\n      \"aria-label\": resetButtonLabel,\n      onClick: onClearInput\n    }, React.createElement(TimesIcon, null))));\n  };\n  const expandableToggle = React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded,\n    icon: isExpanded ? React.createElement(TimesIcon, null) : React.createElement(SearchIcon, null),\n    onClick: onExpandHandler,\n    ref: searchInputExpandableToggleRef\n  });\n  const buildExpandableSearchInput = (_a = {}) => {\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildTextInputGroup(), expandableToggle);\n  };\n  const buildSearchTextInputGroup = (_a = {}) => {\n    var searchInputProps = __rest(_a, []);\n    if (expandableInput) {\n      return buildExpandableSearchInput(Object.assign({}, searchInputProps));\n    }\n    return buildTextInputGroup(Object.assign({}, searchInputProps));\n  };\n  const buildSearchTextInputGroupWithExtraButtons = (_a = {}) => {\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildTextInputGroup(), (attributes.length > 0 || onToggleAdvancedSearch) && React.createElement(Button, {\n      className: isSearchMenuOpen && 'pf-m-expanded',\n      variant: ButtonVariant.control,\n      \"aria-label\": openMenuButtonAriaLabel,\n      onClick: onToggle,\n      isDisabled: isDisabled,\n      \"aria-expanded\": isSearchMenuOpen\n    }, React.createElement(CaretDownIcon, null)), !!onSearch && React.createElement(Button, {\n      type: \"submit\",\n      variant: ButtonVariant.control,\n      \"aria-label\": submitSearchButtonLabel,\n      onClick: onSearchHandler,\n      isDisabled: isDisabled || !searchValue\n    }, React.createElement(ArrowRightIcon, null)), expandableInput && expandableToggle);\n  };\n  const searchInputProps = Object.assign(Object.assign({}, props), {\n    className: className && css(className),\n    innerRef: searchInputRef\n  });\n  if (!!expandableInput && !isExpanded) {\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), expandableToggle);\n  }\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      const AdvancedSearch = React.createElement(\"div\", null, React.createElement(AdvancedSearchMenu, {\n        value: value,\n        parentRef: searchInputRef,\n        parentInputRef: searchInputInputRef,\n        onSearch: onSearch,\n        onClear: onClear,\n        onChange: onChange,\n        onToggleAdvancedMenu: onToggle,\n        resetButtonLabel: resetButtonLabel,\n        submitSearchButtonLabel: submitSearchButtonLabel,\n        attributes: attributes,\n        formAdditionalItems: formAdditionalItems,\n        hasWordsAttrLabel: hasWordsAttrLabel,\n        advancedSearchDelimiter: advancedSearchDelimiter,\n        getAttrValueMap: getAttrValueMap,\n        isSearchMenuOpen: isSearchMenuOpen\n      }));\n      const AdvancedSearchWithPopper = React.createElement(\"div\", Object.assign({\n        className: css(className),\n        ref: searchInputRef\n      }, props), React.createElement(Popper, {\n        trigger: buildSearchTextInputGroupWithExtraButtons(),\n        popper: AdvancedSearch,\n        isVisible: isSearchMenuOpen,\n        enableFlip: true,\n        appendTo: () => appendTo || searchInputRef.current,\n        removeFindDomNode: removeFindDomNode,\n        zIndex: zIndex\n      }));\n      const AdvancedSearchInline = React.createElement(\"div\", Object.assign({\n        className: css(className),\n        ref: searchInputRef\n      }, props), buildSearchTextInputGroupWithExtraButtons(), AdvancedSearch);\n      return appendTo !== 'inline' ? AdvancedSearchWithPopper : AdvancedSearchInline;\n    }\n    return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));\n  }\n  return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\nexport const SearchInput = React.forwardRef((props, ref) => React.createElement(SearchInputBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nSearchInput.displayName = 'SearchInput';","map":{"version":3,"sources":["../../../../src/components/SearchInput/SearchInput.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\nimport { Popper } from '../../helpers';\nconst SearchInputBase = (_a) => {\n    var { className, value = '', attributes = [], formAdditionalItems, hasWordsAttrLabel = 'Has words', advancedSearchDelimiter, placeholder, hint, onChange, onSearch, onClear, onToggleAdvancedSearch, isAdvancedSearchOpen, resultsCount, onNextClick, onPreviousClick, innerRef, expandableInput, 'aria-label': ariaLabel = 'Search input', resetButtonLabel = 'Reset', openMenuButtonAriaLabel = 'Open advanced search', previousNavigationButtonAriaLabel = 'Previous', isPreviousNavigationButtonDisabled = false, isNextNavigationButtonDisabled = false, nextNavigationButtonAriaLabel = 'Next', submitSearchButtonLabel = 'Search', isDisabled = false, appendTo, removeFindDomNode = false, zIndex = 9999, type = 'text', name } = _a, props = __rest(_a, [\"className\", \"value\", \"attributes\", \"formAdditionalItems\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"hint\", \"onChange\", \"onSearch\", \"onClear\", \"onToggleAdvancedSearch\", \"isAdvancedSearchOpen\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", \"expandableInput\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"previousNavigationButtonAriaLabel\", \"isPreviousNavigationButtonDisabled\", \"isNextNavigationButtonDisabled\", \"nextNavigationButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\", \"appendTo\", \"removeFindDomNode\", \"zIndex\", \"type\", \"name\"]);\n    const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n    const [searchValue, setSearchValue] = React.useState(value);\n    const searchInputRef = React.useRef(null);\n    const ref = React.useRef(null);\n    const searchInputInputRef = innerRef || ref;\n    const searchInputExpandableToggleRef = React.useRef(null);\n    const [focusAfterExpandChange, setFocusAfterExpandChange] = React.useState(false);\n    const { isExpanded, onToggleExpand, toggleAriaLabel } = expandableInput || {};\n    React.useEffect(() => {\n        var _a, _b;\n        // this effect and the focusAfterExpandChange variable are needed to focus the input/toggle as needed when the\n        // expansion toggle is fired without focusing on mount\n        if (!focusAfterExpandChange) {\n            return;\n        }\n        else if (isExpanded) {\n            (_a = searchInputInputRef === null || searchInputInputRef === void 0 ? void 0 : searchInputInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        else {\n            (_b = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n        }\n        setFocusAfterExpandChange(false);\n    }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);\n    React.useEffect(() => {\n        setSearchValue(value);\n    }, [value]);\n    React.useEffect(() => {\n        if (attributes.length > 0 && !advancedSearchDelimiter) {\n            // eslint-disable-next-line no-console\n            console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n        }\n    });\n    React.useEffect(() => {\n        setIsSearchMenuOpen(isAdvancedSearchOpen);\n    }, [isAdvancedSearchOpen]);\n    const onChangeHandler = (event, value) => {\n        if (onChange) {\n            onChange(event, value);\n        }\n        setSearchValue(value);\n    };\n    const onToggle = (e) => {\n        const isOpen = !isSearchMenuOpen;\n        setIsSearchMenuOpen(isOpen);\n        if (onToggleAdvancedSearch) {\n            onToggleAdvancedSearch(e, isOpen);\n        }\n    };\n    const onSearchHandler = (event) => {\n        event.preventDefault();\n        if (onSearch) {\n            onSearch(event, value, getAttrValueMap());\n        }\n        setIsSearchMenuOpen(false);\n    };\n    const splitStringExceptInQuotes = (str) => {\n        let quoteType;\n        return str.match(/\\\\?.|^$/g).reduce((p, c) => {\n            if (c === \"'\" || c === '\"') {\n                if (!quoteType) {\n                    quoteType = c;\n                }\n                if (c === quoteType) {\n                    p.quote = !p.quote;\n                }\n            }\n            else if (!p.quote && c === ' ') {\n                p.a.push('');\n            }\n            else {\n                p.a[p.a.length - 1] += c.replace(/\\\\(.)/, '$1');\n            }\n            return p;\n        }, { a: [''] }).a;\n    };\n    const getAttrValueMap = () => {\n        const attrValue = {};\n        const pairs = splitStringExceptInQuotes(searchValue);\n        pairs.map((pair) => {\n            const splitPair = pair.split(advancedSearchDelimiter);\n            if (splitPair.length === 2) {\n                attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, '');\n            }\n            else if (splitPair.length === 1) {\n                attrValue.haswords = attrValue.hasOwnProperty('haswords')\n                    ? `${attrValue.haswords} ${splitPair[0]}`\n                    : splitPair[0];\n            }\n        });\n        return attrValue;\n    };\n    const onEnter = (event) => {\n        if (event.key === 'Enter') {\n            onSearchHandler(event);\n        }\n    };\n    const onClearInput = (e) => {\n        if (onClear) {\n            onClear(e);\n        }\n        if (searchInputInputRef && searchInputInputRef.current) {\n            searchInputInputRef.current.focus();\n        }\n    };\n    const onExpandHandler = (event) => {\n        setSearchValue('');\n        onToggleExpand(event, isExpanded);\n        setFocusAfterExpandChange(true);\n    };\n    const renderUtilities = value && (resultsCount || (!!onNextClick && !!onPreviousClick) || (!!onClear && !expandableInput));\n    const buildTextInputGroup = (_a = {}) => {\n        var searchInputProps = __rest(_a, []);\n        return (React.createElement(TextInputGroup, Object.assign({ isDisabled: isDisabled }, searchInputProps),\n            React.createElement(TextInputGroupMain, { hint: hint, icon: React.createElement(SearchIcon, null), innerRef: searchInputInputRef, value: searchValue, placeholder: placeholder, \"aria-label\": ariaLabel, onKeyDown: onEnter, onChange: onChangeHandler, type: type, name: name }),\n            renderUtilities && (React.createElement(TextInputGroupUtilities, null,\n                resultsCount && React.createElement(Badge, { isRead: true }, resultsCount),\n                !!onNextClick && !!onPreviousClick && (React.createElement(\"div\", { className: \"pf-c-text-input-group__group\" },\n                    React.createElement(Button, { variant: ButtonVariant.plain, \"aria-label\": previousNavigationButtonAriaLabel, isDisabled: isDisabled || isPreviousNavigationButtonDisabled, onClick: onPreviousClick },\n                        React.createElement(AngleUpIcon, null)),\n                    React.createElement(Button, { variant: ButtonVariant.plain, \"aria-label\": nextNavigationButtonAriaLabel, isDisabled: isDisabled || isNextNavigationButtonDisabled, onClick: onNextClick },\n                        React.createElement(AngleDownIcon, null)))),\n                !!onClear && !expandableInput && (React.createElement(Button, { variant: ButtonVariant.plain, isDisabled: isDisabled, \"aria-label\": resetButtonLabel, onClick: onClearInput },\n                    React.createElement(TimesIcon, null)))))));\n    };\n    const expandableToggle = (React.createElement(Button, { variant: ButtonVariant.plain, \"aria-label\": toggleAriaLabel, \"aria-expanded\": isExpanded, icon: isExpanded ? React.createElement(TimesIcon, null) : React.createElement(SearchIcon, null), onClick: onExpandHandler, ref: searchInputExpandableToggleRef }));\n    const buildExpandableSearchInput = (_a = {}) => {\n        var searchInputProps = __rest(_a, []);\n        return (React.createElement(InputGroup, Object.assign({}, searchInputProps),\n            buildTextInputGroup(),\n            expandableToggle));\n    };\n    const buildSearchTextInputGroup = (_a = {}) => {\n        var searchInputProps = __rest(_a, []);\n        if (expandableInput) {\n            return buildExpandableSearchInput(Object.assign({}, searchInputProps));\n        }\n        return buildTextInputGroup(Object.assign({}, searchInputProps));\n    };\n    const buildSearchTextInputGroupWithExtraButtons = (_a = {}) => {\n        var searchInputProps = __rest(_a, []);\n        return (React.createElement(InputGroup, Object.assign({}, searchInputProps),\n            buildTextInputGroup(),\n            (attributes.length > 0 || onToggleAdvancedSearch) && (React.createElement(Button, { className: isSearchMenuOpen && 'pf-m-expanded', variant: ButtonVariant.control, \"aria-label\": openMenuButtonAriaLabel, onClick: onToggle, isDisabled: isDisabled, \"aria-expanded\": isSearchMenuOpen },\n                React.createElement(CaretDownIcon, null))),\n            !!onSearch && (React.createElement(Button, { type: \"submit\", variant: ButtonVariant.control, \"aria-label\": submitSearchButtonLabel, onClick: onSearchHandler, isDisabled: isDisabled || !searchValue },\n                React.createElement(ArrowRightIcon, null))),\n            expandableInput && expandableToggle));\n    };\n    const searchInputProps = Object.assign(Object.assign({}, props), { className: className && css(className), innerRef: searchInputRef });\n    if (!!expandableInput && !isExpanded) {\n        return React.createElement(InputGroup, Object.assign({}, searchInputProps), expandableToggle);\n    }\n    if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n        if (attributes.length > 0) {\n            const AdvancedSearch = (React.createElement(\"div\", null,\n                React.createElement(AdvancedSearchMenu, { value: value, parentRef: searchInputRef, parentInputRef: searchInputInputRef, onSearch: onSearch, onClear: onClear, onChange: onChange, onToggleAdvancedMenu: onToggle, resetButtonLabel: resetButtonLabel, submitSearchButtonLabel: submitSearchButtonLabel, attributes: attributes, formAdditionalItems: formAdditionalItems, hasWordsAttrLabel: hasWordsAttrLabel, advancedSearchDelimiter: advancedSearchDelimiter, getAttrValueMap: getAttrValueMap, isSearchMenuOpen: isSearchMenuOpen })));\n            const AdvancedSearchWithPopper = (React.createElement(\"div\", Object.assign({ className: css(className), ref: searchInputRef }, props),\n                React.createElement(Popper, { trigger: buildSearchTextInputGroupWithExtraButtons(), popper: AdvancedSearch, isVisible: isSearchMenuOpen, enableFlip: true, appendTo: () => appendTo || searchInputRef.current, removeFindDomNode: removeFindDomNode, zIndex: zIndex })));\n            const AdvancedSearchInline = (React.createElement(\"div\", Object.assign({ className: css(className), ref: searchInputRef }, props),\n                buildSearchTextInputGroupWithExtraButtons(),\n                AdvancedSearch));\n            return appendTo !== 'inline' ? AdvancedSearchWithPopper : AdvancedSearchInline;\n        }\n        return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));\n    }\n    return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\nexport const SearchInput = React.forwardRef((props, ref) => (React.createElement(SearchInputBase, Object.assign({}, props, { innerRef: ref }))));\nSearchInput.displayName = 'SearchInput';\n//# sourceMappingURL=SearchInput.js.map"]},"metadata":{},"sourceType":"module"}