{"ast":null,"code":"export function flattenTree(tree) {\n  let result = [];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(flattenTree(item.children));\n    } else {\n      result.push(item.id);\n    }\n  });\n  return result;\n}\nexport function flattenTreeWithFolders(tree) {\n  let result = [];\n  tree.forEach(item => {\n    result.push(item.id);\n    if (item.children) {\n      result = result.concat(flattenTreeWithFolders(item.children));\n    }\n  });\n  return result;\n}\nexport function filterFolders(tree, inputList) {\n  let result = [];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(filterFolders(item.children, inputList));\n    } else {\n      if (inputList.includes(item.id)) {\n        result.push(item.id);\n      }\n    }\n  });\n  return result;\n}\nexport function filterTreeItems(item, inputList) {\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n  if (item.children) {\n    return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterTreeItems(child, inputList))).length > 0;\n  }\n}\nexport function filterTreeItemsWithoutFolders(item, inputList) {\n  if (item.children) {\n    return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => child.children ? filterTreeItemsWithoutFolders(child, inputList) : filterTreeItems(child, inputList))).length > 0;\n  }\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n}\nexport function filterRestTreeItems(item, inputList) {\n  if (item.children) {\n    const child = (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterRestTreeItems(child, inputList))).length > 0;\n    return child;\n  }\n  if (!inputList.includes(item.id)) {\n    return true;\n  }\n}","map":{"version":3,"sources":["../../../../src/components/DualListSelector/treeUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export function flattenTree(tree) {\n    let result = [];\n    tree.forEach(item => {\n        if (item.children) {\n            result = result.concat(flattenTree(item.children));\n        }\n        else {\n            result.push(item.id);\n        }\n    });\n    return result;\n}\nexport function flattenTreeWithFolders(tree) {\n    let result = [];\n    tree.forEach(item => {\n        result.push(item.id);\n        if (item.children) {\n            result = result.concat(flattenTreeWithFolders(item.children));\n        }\n    });\n    return result;\n}\nexport function filterFolders(tree, inputList) {\n    let result = [];\n    tree.forEach(item => {\n        if (item.children) {\n            result = result.concat(filterFolders(item.children, inputList));\n        }\n        else {\n            if (inputList.includes(item.id)) {\n                result.push(item.id);\n            }\n        }\n    });\n    return result;\n}\nexport function filterTreeItems(item, inputList) {\n    if (inputList.includes(item.id)) {\n        return true;\n    }\n    if (item.children) {\n        return ((item.children = item.children\n            .map(opt => Object.assign({}, opt))\n            .filter(child => filterTreeItems(child, inputList))).length > 0);\n    }\n}\nexport function filterTreeItemsWithoutFolders(item, inputList) {\n    if (item.children) {\n        return ((item.children = item.children\n            .map(opt => Object.assign({}, opt))\n            .filter(child => child.children ? filterTreeItemsWithoutFolders(child, inputList) : filterTreeItems(child, inputList))).length > 0);\n    }\n    if (inputList.includes(item.id)) {\n        return true;\n    }\n}\nexport function filterRestTreeItems(item, inputList) {\n    if (item.children) {\n        const child = (item.children = item.children\n            .map(opt => Object.assign({}, opt))\n            .filter(child => filterRestTreeItems(child, inputList))).length > 0;\n        return child;\n    }\n    if (!inputList.includes(item.id)) {\n        return true;\n    }\n}\n//# sourceMappingURL=treeUtils.js.map"]},"metadata":{},"sourceType":"module"}