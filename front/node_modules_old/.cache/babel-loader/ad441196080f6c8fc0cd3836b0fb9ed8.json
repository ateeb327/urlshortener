{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport class ToolbarExpandableContent extends React.Component {\n  render() {\n    const _a = this.props,\n      {\n        className,\n        expandableContentRef,\n        chipContainerRef,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isExpanded,\n        clearAllFilters,\n        clearFiltersButtonText,\n        showClearFiltersButton\n      } = _a,\n      props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n    const {\n      numberOfFilters,\n      customChipGroupContent\n    } = this.context;\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarExpandableContent, className),\n      ref: expandableContentRef\n    }, props), React.createElement(ToolbarGroup, null), numberOfFilters > 0 && React.createElement(ToolbarGroup, {\n      className: styles.modifiers.chipContainer\n    }, React.createElement(ToolbarGroup, {\n      ref: chipContainerRef\n    }), showClearFiltersButton && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n      variant: \"link\",\n      onClick: clearChipGroups,\n      isInline: true\n    }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent));\n  }\n}\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n  isExpanded: false,\n  clearFiltersButtonText: 'Clear all filters'\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarExpandableContent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,yDAAyD;AAC5E,SAAS,GAAG,QAAQ,0BAA0B;AAG9C,SAAS,YAAY,QAAQ,gBAAgB;AAC7C,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,MAAM,QAAQ,WAAW;AAClC,SAAS,cAAc,QAAQ,gBAAgB;AAoB/C,OAAM,MAAO,wBAAyB,SAAQ,KAAK,CAAC,SAAwC,CAAA;EAS1F,MAAM,CAAA,EAAA;IACJ,MAAM,EAAA,GAUF,IAAI,CAAC,KAAK;MAVR;QACJ,SAAS;QACT,oBAAoB;QACpB,gBAAgB;QAChB;QACA,UAAU;QACV,eAAe;QACf,sBAAsB;QACtB;MAAsB,CAAA,GAAA,EAEV;MADT,KAAK,GAAA,MAAA,CAAA,EAAA,EATJ,CAAA,WAAA,EAAA,sBAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,wBAAA,EAAA,wBAAA,CAUL,CAAa;IACd,MAAM;MAAE,eAAe;MAAE;IAAsB,CAAE,GAAG,IAAI,CAAC,OAAO;IAEhE,MAAM,eAAe,GAAG,CAAA,KAAK;MAC3B,eAAe,CAAA,CAAE;IACnB,CAAC;IAED,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,wBAAwB,EAAE,SAAS,CAAC;MAAE,GAAG,EAAE;IAAoB,CAAA,EAAM,KAAK,CAAA,EACnG,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA,IAAA,CAAG,EACf,eAAe,GAAG,CAAC,IAClB,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA;MAAC,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC;IAAa,CAAA,EACrD,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA;MAAC,GAAG,EAAE;IAAgB,CAAA,CAAI,EACtC,sBAAsB,IAAI,CAAC,sBAAsB,IAChD,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA,IAAA,EACV,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;MAAC,OAAO,EAAC,MAAM;MAAC,OAAO,EAAE,eAAe;MAAE,QAAQ,EAAA;IAAA,CAAA,EACtD,sBAAsB,CAChB,CAEZ,EACA,sBAAsB,IAAI,sBAAsB,CAEpD,CACG;EAEV;;AA5CO,wBAAA,CAAA,WAAW,GAAG,0BAA0B;AACxC,wBAAA,CAAA,WAAW,GAAG,cAAc;AAE5B,wBAAA,CAAA,YAAY,GAAgD;EACjE,UAAU,EAAE,KAAK;EACjB,sBAAsB,EAAE;CACzB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport class ToolbarExpandableContent extends React.Component {\n    render() {\n        const _a = this.props, { className, expandableContentRef, chipContainerRef, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n        const { numberOfFilters, customChipGroupContent } = this.context;\n        const clearChipGroups = () => {\n            clearAllFilters();\n        };\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarExpandableContent, className), ref: expandableContentRef }, props),\n            React.createElement(ToolbarGroup, null),\n            numberOfFilters > 0 && (React.createElement(ToolbarGroup, { className: styles.modifiers.chipContainer },\n                React.createElement(ToolbarGroup, { ref: chipContainerRef }),\n                showClearFiltersButton && !customChipGroupContent && (React.createElement(ToolbarItem, null,\n                    React.createElement(Button, { variant: \"link\", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText))),\n                customChipGroupContent && customChipGroupContent))));\n    }\n}\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n    isExpanded: false,\n    clearFiltersButtonText: 'Clear all filters'\n};\n//# sourceMappingURL=ToolbarExpandableContent.js.map"]},"metadata":{},"sourceType":"module"}