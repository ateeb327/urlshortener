{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/esm/components/Checkbox';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\nexport const treeRow = (onCollapse, onCheckChange, onToggleRowDetails) => (value, {\n  rowIndex,\n  rowData\n}) => {\n  const {\n    isExpanded,\n    isDetailsExpanded,\n    'aria-level': level,\n    'aria-setsize': setsize,\n    toggleAriaLabel,\n    checkAriaLabel,\n    showDetailsAriaLabel,\n    isChecked,\n    checkboxId,\n    icon\n  } = rowData.props;\n  const content = value.title || value;\n  const text = React.createElement(\"div\", {\n    className: css(stylesTreeView.tableTreeViewText),\n    key: \"tree-view-text\"\n  }, icon && React.createElement(\"span\", {\n    className: css(stylesTreeView.tableTreeViewIcon),\n    key: \"tree-view-text-icon\"\n  }, icon), React.createElement(\"span\", {\n    className: \"pf-c-table__text\",\n    key: \"table-text\"\n  }, content));\n  const onChange = (isChecked, event) => {\n    onCheckChange(event, isChecked, rowIndex, content, rowData);\n  };\n  return {\n    component: 'th',\n    className: 'pf-c-table__tree-view-title-cell',\n    children: level !== undefined ? React.createElement(\"div\", {\n      className: css(stylesTreeView.tableTreeViewMain)\n    }, setsize > 0 && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableToggle),\n      key: \"table-toggle\"\n    }, React.createElement(Button, {\n      variant: \"plain\",\n      onClick: event => onCollapse && onCollapse(event, rowIndex, content, rowData),\n      className: css(isExpanded && styles.modifiers.expanded),\n      \"aria-expanded\": isExpanded,\n      \"aria-label\": toggleAriaLabel || `${isExpanded ? 'Collapse' : 'Expand'} row ${rowIndex}`\n    }, React.createElement(\"div\", {\n      className: css(stylesTreeView.tableToggleIcon)\n    }, React.createElement(AngleDownIcon, {\n      \"aria-hidden\": \"true\"\n    })))), !!onCheckChange && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableCheck),\n      key: \"table-check\"\n    }, React.createElement(\"label\", {\n      htmlFor: checkboxId || `checkbox_${rowIndex}`\n    }, React.createElement(Checkbox, {\n      id: checkboxId || `checkbox_${rowIndex}`,\n      \"aria-label\": checkAriaLabel || `Row ${rowIndex} checkbox`,\n      isChecked: isChecked,\n      onChange: onChange\n    }))), text, !!onToggleRowDetails && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableTreeViewDetailsToggle),\n      key: \"view-details-toggle\"\n    }, React.createElement(Button, {\n      variant: \"plain\",\n      \"aria-expanded\": isDetailsExpanded,\n      \"aria-label\": showDetailsAriaLabel || 'Show row details',\n      onClick: event => onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData)\n    }, React.createElement(\"span\", {\n      className: \"pf-c-table__details-toggle-icon\"\n    }, React.createElement(EllipsisHIcon, {\n      \"aria-hidden\": true\n    }))))) : text\n  };\n};","map":{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/treeRow.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/esm/components/Checkbox';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\nexport const treeRow = (onCollapse, onCheckChange, onToggleRowDetails) => (value, { rowIndex, rowData }) => {\n    const { isExpanded, isDetailsExpanded, 'aria-level': level, 'aria-setsize': setsize, toggleAriaLabel, checkAriaLabel, showDetailsAriaLabel, isChecked, checkboxId, icon } = rowData.props;\n    const content = value.title || value;\n    const text = (React.createElement(\"div\", { className: css(stylesTreeView.tableTreeViewText), key: \"tree-view-text\" },\n        icon && (React.createElement(\"span\", { className: css(stylesTreeView.tableTreeViewIcon), key: \"tree-view-text-icon\" }, icon)),\n        React.createElement(\"span\", { className: \"pf-c-table__text\", key: \"table-text\" }, content)));\n    const onChange = (isChecked, event) => {\n        onCheckChange(event, isChecked, rowIndex, content, rowData);\n    };\n    return {\n        component: 'th',\n        className: 'pf-c-table__tree-view-title-cell',\n        children: level !== undefined ? (React.createElement(\"div\", { className: css(stylesTreeView.tableTreeViewMain) },\n            setsize > 0 && (React.createElement(\"span\", { className: css(stylesTreeView.tableToggle), key: \"table-toggle\" },\n                React.createElement(Button, { variant: \"plain\", onClick: event => onCollapse && onCollapse(event, rowIndex, content, rowData), className: css(isExpanded && styles.modifiers.expanded), \"aria-expanded\": isExpanded, \"aria-label\": toggleAriaLabel || `${isExpanded ? 'Collapse' : 'Expand'} row ${rowIndex}` },\n                    React.createElement(\"div\", { className: css(stylesTreeView.tableToggleIcon) },\n                        React.createElement(AngleDownIcon, { \"aria-hidden\": \"true\" }))))),\n            !!onCheckChange && (React.createElement(\"span\", { className: css(stylesTreeView.tableCheck), key: \"table-check\" },\n                React.createElement(\"label\", { htmlFor: checkboxId || `checkbox_${rowIndex}` },\n                    React.createElement(Checkbox, { id: checkboxId || `checkbox_${rowIndex}`, \"aria-label\": checkAriaLabel || `Row ${rowIndex} checkbox`, isChecked: isChecked, onChange: onChange })))),\n            text,\n            !!onToggleRowDetails && (React.createElement(\"span\", { className: css(stylesTreeView.tableTreeViewDetailsToggle), key: \"view-details-toggle\" },\n                React.createElement(Button, { variant: \"plain\", \"aria-expanded\": isDetailsExpanded, \"aria-label\": showDetailsAriaLabel || 'Show row details', onClick: event => onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData) },\n                    React.createElement(\"span\", { className: \"pf-c-table__details-toggle-icon\" },\n                        React.createElement(EllipsisHIcon, { \"aria-hidden\": true }))))))) : (text)\n    };\n};\n//# sourceMappingURL=treeRow.js.map"]},"metadata":{},"sourceType":"module"}