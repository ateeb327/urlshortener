{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport const InternalFormFieldGroup = _a => {\n  var {\n      children,\n      className,\n      header,\n      isExpandable,\n      isExpanded,\n      onToggle,\n      toggleAriaLabel\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n  const headerTitleText = header ? header.props.titleText : null;\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n  }\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className),\n    role: \"group\"\n  }, headerTitleText && {\n    'aria-labelledby': `${header.props.titleText.id}`\n  }, props), isExpandable && React.createElement(GenerateId, {\n    prefix: \"form-field-group-toggle\"\n  }, id => React.createElement(FormFieldGroupToggle, Object.assign({\n    onToggle: onToggle,\n    isExpanded: isExpanded,\n    \"aria-label\": toggleAriaLabel,\n    toggleId: id\n  }, headerTitleText && {\n    'aria-labelledby': `${header.props.titleText.id} ${id}`\n  }))), header && header, (!isExpandable || isExpandable && isExpanded) && React.createElement(\"div\", {\n    className: css(styles.formFieldGroupBody)\n  }, children));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';","map":{"version":3,"sources":["../../../../src/components/Form/InternalFormFieldGroup.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,mDAAmD;AACtE,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,SAAS,oBAAoB,QAAQ,wBAAwB;AAC7D,SAAS,UAAU,QAAQ,eAAe;AAmB1C,OAAO,MAAM,sBAAsB,GAA0D,EAS/D,IAAI;MAT2D;MAC3F,QAAQ;MACR,SAAS;MACT,MAAM;MACN,YAAY;MACZ,UAAU;MACV,QAAQ;MACR;IAAe,CAAA,GAAA,EAEa;IADzB,KAAK,GAAA,MAAA,CAAA,EAAA,EARmF,CAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,cAAA,EAAA,YAAA,EAAA,UAAA,EAAA,iBAAA,CAS5F,CADS;EAER,MAAM,eAAe,GAAG,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI;EAC9D,IAAI,YAAY,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,EAAE;IACxD;IACA,OAAO,CAAC,KAAK,CACX,2BAA2B,EAC3B,gHAAgH,CACjH;EACF;EACD,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IACE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,UAAU,IAAI,YAAY,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC;IACzG,IAAI,EAAC;EAAO,CAAA,EACP,eAAe,IAAI;IAAE,iBAAiB,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;EAAE,CAAE,EACzE,KAAK,CAAA,EAER,YAAY,IACX,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA;IAAC,MAAM,EAAC;EAAyB,CAAA,EACzC,EAAE,IACD,KAAA,CAAA,aAAA,CAAC,oBAAoB,EAAA,MAAA,CAAA,MAAA,CAAA;IACnB,QAAQ,EAAE,QAAQ;IAClB,UAAU,EAAE,UAAU;IAAA,YAAA,EACV,eAAe;IAC3B,QAAQ,EAAE;EAAE,CAAA,EACP,eAAe,IAAI;IAAE,iBAAiB,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE;EAAE,CAAG,CAAA,CAEvF,CAEJ,EACA,MAAM,IAAI,MAAM,EAChB,CAAC,CAAC,YAAY,IAAK,YAAY,IAAI,UAAW,KAC7C,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAkB;EAAC,CAAA,EAAG,QAAQ,CAC1D,CACG;AAEV,CAAC;AACD,sBAAsB,CAAC,WAAW,GAAG,wBAAwB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport const InternalFormFieldGroup = (_a) => {\n    var { children, className, header, isExpandable, isExpanded, onToggle, toggleAriaLabel } = _a, props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n    const headerTitleText = header ? header.props.titleText : null;\n    if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n        // eslint-disable-next-line no-console\n        console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n    }\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className), role: \"group\" }, (headerTitleText && { 'aria-labelledby': `${header.props.titleText.id}` }), props),\n        isExpandable && (React.createElement(GenerateId, { prefix: \"form-field-group-toggle\" }, id => (React.createElement(FormFieldGroupToggle, Object.assign({ onToggle: onToggle, isExpanded: isExpanded, \"aria-label\": toggleAriaLabel, toggleId: id }, (headerTitleText && { 'aria-labelledby': `${header.props.titleText.id} ${id}` })))))),\n        header && header,\n        (!isExpandable || (isExpandable && isExpanded)) && (React.createElement(\"div\", { className: css(styles.formFieldGroupBody) }, children))));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';\n//# sourceMappingURL=InternalFormFieldGroup.js.map"]},"metadata":{},"sourceType":"module"}