{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KeyTypes } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport class Wizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyClicks = event => {\n      if (event.key === KeyTypes.Escape) {\n        if (this.state.isNavOpen) {\n          this.setState({\n            isNavOpen: !this.state.isNavOpen\n          });\n        } else if (this.props.isOpen) {\n          this.props.onClose();\n        }\n      }\n    };\n    this.onNext = () => {\n      const {\n        onNext,\n        onClose,\n        onSave\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      const maxSteps = flattenedSteps.length;\n      if (currentStep >= maxSteps) {\n        // Hit the save button at the end of the wizard\n        if (onSave) {\n          return onSave();\n        }\n        return onClose();\n      } else {\n        let newStep = currentStep;\n        for (let nextStep = currentStep; nextStep <= maxSteps; nextStep++) {\n          if (!flattenedSteps[nextStep]) {\n            return;\n          }\n          if (!flattenedSteps[nextStep].isDisabled) {\n            newStep = nextStep + 1;\n            break;\n          }\n        }\n        this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[currentStep - 1];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onNext && onNext({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n    this.onBack = () => {\n      const {\n        onBack\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      if (flattenedSteps.length < currentStep) {\n        // Previous step was removed, just update the currentStep state\n        const adjustedStep = flattenedSteps.length;\n        this.setCurrentStep(adjustedStep, flattenedSteps[adjustedStep - 1]);\n      } else {\n        let newStep = currentStep;\n        for (let prevStep = currentStep; prevStep >= 0; prevStep--) {\n          if (!flattenedSteps[prevStep - 2]) {\n            return;\n          }\n          if (!flattenedSteps[prevStep - 2].isDisabled) {\n            newStep = prevStep - 1 <= 1 ? 1 : prevStep - 1;\n            break;\n          }\n        }\n        this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[newStep];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onBack && onBack({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n    this.goToStep = step => {\n      const flattenedSteps = this.getFlattenedSteps();\n      if (flattenedSteps[step - 1].isDisabled) {\n        return;\n      }\n      const {\n        onGoToStep\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const maxSteps = flattenedSteps.length;\n      if (step < 1) {\n        step = 1;\n      } else if (step > maxSteps) {\n        step = maxSteps;\n      }\n      this.setCurrentStep(step, flattenedSteps[step - 1]);\n      this.setState({\n        isNavOpen: false\n      });\n      const {\n        id: prevId,\n        name: prevName\n      } = flattenedSteps[currentStep - 1];\n      const {\n        id,\n        name\n      } = flattenedSteps[step - 1];\n      return onGoToStep && onGoToStep({\n        id,\n        name\n      }, {\n        prevId,\n        prevName\n      });\n    };\n    this.goToStepById = stepId => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].id === stepId) {\n          step = i + 1;\n          break;\n        }\n      }\n      if (step) {\n        this.setCurrentStep(step, flattenedSteps[step - 1]);\n      }\n    };\n    this.goToStepByName = stepName => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          step = i + 1;\n          break;\n        }\n      }\n      if (step) {\n        this.setCurrentStep(step, flattenedSteps[step - 1]);\n      }\n    };\n    this.getFlattenedSteps = () => {\n      const {\n        steps\n      } = this.props;\n      const flattenedSteps = [];\n      for (const step of steps) {\n        if (step.steps) {\n          for (const childStep of step.steps) {\n            flattenedSteps.push(childStep);\n          }\n        } else {\n          flattenedSteps.push(step);\n        }\n      }\n      return flattenedSteps;\n    };\n    this.getFlattenedStepsIndex = (flattenedSteps, stepName) => {\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          return i + 1;\n        }\n      }\n      return 0;\n    };\n    this.initSteps = steps => {\n      // Set default Step values\n      for (let i = 0; i < steps.length; i++) {\n        if (steps[i].steps) {\n          for (let j = 0; j < steps[i].steps.length; j++) {\n            steps[i].steps[j] = Object.assign({\n              canJumpTo: true\n            }, steps[i].steps[j]);\n          }\n        }\n        steps[i] = Object.assign({\n          canJumpTo: true\n        }, steps[i]);\n      }\n      return steps;\n    };\n    this.getElement = appendTo => {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n      return appendTo || document.body;\n    };\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n    if (props.onCurrentStepChanged) {\n      const flattenedSteps = this.getFlattenedSteps();\n      if (flattenedSteps.length >= this.state.currentStep) {\n        const currentStep = flattenedSteps[this.state.currentStep - 1];\n        props.onCurrentStepChanged(currentStep);\n      }\n    }\n    this.drawerRef = React.createRef();\n  }\n  setCurrentStep(currentStep, currentStepObject) {\n    this.setState({\n      currentStep\n    });\n    if (this.props.onCurrentStepChanged) {\n      this.props.onCurrentStepChanged(currentStepObject);\n    }\n  }\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n  componentWillUnmount() {\n    const target = typeof document !== 'undefined' && document.body || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.startAtStep !== this.props.startAtStep) {\n      this.setState({\n        currentStep: this.props.startAtStep\n      });\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        width,\n        height,\n        title,\n        description,\n        descriptionComponent,\n        onClose,\n        onSave,\n        onBack,\n        onNext,\n        onGoToStep,\n        className,\n        steps,\n        startAtStep,\n        nextButtonText = 'Next',\n        backButtonText = 'Back',\n        cancelButtonText = 'Cancel',\n        hideClose,\n        closeButtonAriaLabel = 'Close',\n        navAriaLabel,\n        navAriaLabelledBy,\n        mainAriaLabel,\n        mainAriaLabelledBy,\n        hasNoBodyPadding,\n        footer,\n        appendTo,\n        isOpen,\n        titleId,\n        descriptionId,\n        isNavExpandable,\n        onCurrentStepChanged,\n        hasDrawer,\n        isDrawerExpanded,\n        onExpandDrawer\n      } = _a,\n      rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"descriptionComponent\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\", \"isNavExpandable\", \"onCurrentStepChanged\", \"hasDrawer\", \"isDrawerExpanded\", \"onExpandDrawer\"])\n      /* eslint-enable @typescript-eslint/no-unused-vars */;\n    const {\n      currentStep\n    } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n    const nav = isWizardNavOpen => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n      return React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map((step, index) => {\n        if (step.isFinishedStep) {\n          // Don't show finished step in the side nav\n          return;\n        }\n        let enabled;\n        let navItemStep;\n        if (step.steps) {\n          let hasActiveChild = false;\n          let canJumpToParent = false;\n          for (const subStep of step.steps) {\n            if (activeStep.name === subStep.name) {\n              // one of the children matches\n              hasActiveChild = true;\n            }\n            if (subStep.canJumpTo) {\n              canJumpToParent = true;\n            }\n          }\n          navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n          return React.createElement(WizardNavItem, {\n            key: index,\n            id: step.id,\n            content: step.name,\n            isExpandable: isNavExpandable,\n            isCurrent: hasActiveChild,\n            isDisabled: !canJumpToParent,\n            step: navItemStep,\n            onNavItemClick: this.goToStep\n          }, React.createElement(WizardNav, Object.assign({}, wizNavAProps, {\n            returnList: true\n          }), step.steps.map((childStep, indexChild) => {\n            if (childStep.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n            enabled = childStep.canJumpTo && !childStep.isDisabled;\n            return React.createElement(WizardNavItem, {\n              key: `child_${indexChild}`,\n              id: childStep.id,\n              content: childStep.name,\n              isCurrent: activeStep.name === childStep.name,\n              isDisabled: !enabled,\n              step: navItemStep,\n              onNavItemClick: this.goToStep\n            });\n          })));\n        }\n        navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n        enabled = step.canJumpTo && !step.isDisabled;\n        return React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, {\n          key: index,\n          id: step.id,\n          content: step.name,\n          isCurrent: activeStep.name === step.name,\n          isDisabled: !enabled,\n          step: navItemStep,\n          onNavItemClick: this.goToStep\n        }));\n      }));\n    };\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n    const divStyles = Object.assign(Object.assign({}, height ? {\n      height\n    } : {}), width ? {\n      width\n    } : {});\n    const wizard = React.createElement(WizardContextProvider, {\n      value: context\n    }, React.createElement(\"div\", Object.assign({}, rest, {\n      className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className),\n      style: Object.keys(divStyles).length ? divStyles : undefined\n    }), title && React.createElement(WizardHeader, {\n      titleId: this.titleId,\n      descriptionId: this.descriptionId,\n      onClose: onClose,\n      title: title,\n      description: description,\n      descriptionComponent: descriptionComponent,\n      closeButtonAriaLabel: closeButtonAriaLabel,\n      hideClose: hideClose\n    }), React.createElement(WizardToggle, {\n      hasDrawer: hasDrawer,\n      isDrawerExpanded: isDrawerExpanded,\n      onExpandDrawer: onExpandDrawer,\n      mainAriaLabel: mainAriaLabel,\n      isInPage: isOpen === undefined,\n      mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId),\n      isNavOpen: this.state.isNavOpen,\n      onNavToggle: isNavOpen => this.setState({\n        isNavOpen\n      }),\n      nav: nav,\n      steps: steps,\n      activeStep: activeStep,\n      hasNoBodyPadding: hasNoBodyPadding\n    }, footer || React.createElement(WizardFooterInternal, {\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose: onClose,\n      isValid: isValid,\n      firstStep: firstStep,\n      activeStep: activeStep,\n      nextButtonText: activeStep && activeStep.nextButtonText || nextButtonText,\n      backButtonText: backButtonText,\n      cancelButtonText: cancelButtonText\n    }))));\n    if (isOpen !== undefined) {\n      return React.createElement(Modal, {\n        width: width !== null ? width : undefined,\n        isOpen: isOpen,\n        variant: ModalVariant.large,\n        \"aria-labelledby\": this.titleId,\n        \"aria-describedby\": this.descriptionId,\n        showClose: false,\n        hasNoBodyWrapper: true\n      }, wizard);\n    }\n    return wizard;\n  }\n}\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n  title: null,\n  description: '',\n  descriptionComponent: 'p',\n  className: '',\n  startAtStep: 1,\n  nextButtonText: 'Next',\n  backButtonText: 'Back',\n  cancelButtonText: 'Cancel',\n  hideClose: false,\n  closeButtonAriaLabel: 'Close',\n  navAriaLabel: null,\n  navAriaLabelledBy: null,\n  mainAriaLabel: null,\n  mainAriaLabelledBy: null,\n  hasNoBodyPadding: false,\n  onBack: null,\n  onNext: null,\n  onGoToStep: null,\n  width: null,\n  height: null,\n  footer: null,\n  onClose: () => undefined,\n  appendTo: null,\n  isOpen: undefined,\n  isNavExpandable: false,\n  hasDrawer: false,\n  isDrawerExpanded: false,\n  onExpandDrawer: () => undefined\n};","map":{"version":3,"sources":["../../../../src/components/Wizard/Wizard.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,QAAQ,QAAQ,yBAAyB;AAClD,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,uDAAuD;AAC1E,SAAS,KAAK,EAAE,YAAY,QAAQ,UAAU;AAC9C,SAAS,oBAAoB,QAAQ,wBAAwB;AAC7D,SAAS,YAAY,QAAQ,gBAAgB;AAC7C,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,aAAa,QAA4B,iBAAiB;AACnE,SAAS,qBAAqB,QAAQ,iBAAiB;AAEvD,SAAS,YAAY,QAAQ,gBAAgB;AAgH7C,OAAM,MAAO,MAAO,SAAQ,KAAK,CAAC,SAAmC,CAAA;EAqCnE,WAAA,CAAY,KAAkB,EAAA;IAC5B,KAAK,CAAC,KAAK,CAAC;IAqBN,IAAA,CAAA,eAAe,GAAI,KAAoB,IAAU;MACvD,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,CAAC,MAAM,EAAE;QACjC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;UACxB,IAAI,CAAC,QAAQ,CAAC;YAAE,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;UAAS,CAAE,CAAC;SACpD,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;UAC5B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAA,CAAE;QACrB;MACF;IACH,CAAC;IAEO,IAAA,CAAA,MAAM,GAAG,MAAW;MAC1B,MAAM;QAAE,MAAM;QAAE,OAAO;QAAE;MAAM,CAAE,GAAG,IAAI,CAAC,KAAK;MAC9C,MAAM;QAAE;MAAW,CAAE,GAAG,IAAI,CAAC,KAAK;MAClC,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;MAC/C,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM;MACtC,IAAI,WAAW,IAAI,QAAQ,EAAE;QAC3B;QACA,IAAI,MAAM,EAAE;UACV,OAAO,MAAM,CAAA,CAAE;QAChB;QACD,OAAO,OAAO,CAAA,CAAE;OACjB,MAAM;QACL,IAAI,OAAO,GAAG,WAAW;QAEzB,KAAK,IAAI,QAAQ,GAAG,WAAW,EAAE,QAAQ,IAAI,QAAQ,EAAE,QAAQ,EAAE,EAAE;UACjE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC7B;UACD;UAED,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE;YACxC,OAAO,GAAG,QAAQ,GAAG,CAAC;YACtB;UACD;QACF;QAED,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QACzD,MAAM;UAAE,EAAE,EAAE,MAAM;UAAE,IAAI,EAAE;QAAQ,CAAE,GAAG,cAAc,CAAC,WAAW,GAAG,CAAC,CAAC;QACtE,MAAM;UAAE,EAAE;UAAE;QAAI,CAAE,GAAG,cAAc,CAAC,OAAO,GAAG,CAAC,CAAC;QAChD,OAAO,MAAM,IAAI,MAAM,CAAC;UAAE,EAAE;UAAE;QAAI,CAAE,EAAE;UAAE,MAAM;UAAE;QAAQ,CAAE,CAAC;MAC5D;IACH,CAAC;IAEO,IAAA,CAAA,MAAM,GAAG,MAAW;MAC1B,MAAM;QAAE;MAAM,CAAE,GAAG,IAAI,CAAC,KAAK;MAC7B,MAAM;QAAE;MAAW,CAAE,GAAG,IAAI,CAAC,KAAK;MAClC,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;MAC/C,IAAI,cAAc,CAAC,MAAM,GAAG,WAAW,EAAE;QACvC;QACA,MAAM,YAAY,GAAG,cAAc,CAAC,MAAM;QAC1C,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,cAAc,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;OACpE,MAAM;QACL,IAAI,OAAO,GAAG,WAAW;QAEzB,KAAK,IAAI,QAAQ,GAAG,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE;UAC1D,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE;YACjC;UACD;UAED,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE;YAC5C,OAAO,GAAG,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC;YAC9C;UACD;QACF;QAED,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QACzD,MAAM;UAAE,EAAE,EAAE,MAAM;UAAE,IAAI,EAAE;QAAQ,CAAE,GAAG,cAAc,CAAC,OAAO,CAAC;QAC9D,MAAM;UAAE,EAAE;UAAE;QAAI,CAAE,GAAG,cAAc,CAAC,OAAO,GAAG,CAAC,CAAC;QAChD,OAAO,MAAM,IAAI,MAAM,CAAC;UAAE,EAAE;UAAE;QAAI,CAAE,EAAE;UAAE,MAAM;UAAE;QAAQ,CAAE,CAAC;MAC5D;IACH,CAAC;IAEO,IAAA,CAAA,QAAQ,GAAI,IAAY,IAAU;MACxC,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;MAE/C,IAAI,cAAc,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE;QACvC;MACD;MAED,MAAM;QAAE;MAAU,CAAE,GAAG,IAAI,CAAC,KAAK;MACjC,MAAM;QAAE;MAAW,CAAE,GAAG,IAAI,CAAC,KAAK;MAClC,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM;MACtC,IAAI,IAAI,GAAG,CAAC,EAAE;QACZ,IAAI,GAAG,CAAC;OACT,MAAM,IAAI,IAAI,GAAG,QAAQ,EAAE;QAC1B,IAAI,GAAG,QAAQ;MAChB;MACD,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;MACnD,IAAI,CAAC,QAAQ,CAAC;QAAE,SAAS,EAAE;MAAK,CAAE,CAAC;MACnC,MAAM;QAAE,EAAE,EAAE,MAAM;QAAE,IAAI,EAAE;MAAQ,CAAE,GAAG,cAAc,CAAC,WAAW,GAAG,CAAC,CAAC;MACtE,MAAM;QAAE,EAAE;QAAE;MAAI,CAAE,GAAG,cAAc,CAAC,IAAI,GAAG,CAAC,CAAC;MAC7C,OAAO,UAAU,IAAI,UAAU,CAAC;QAAE,EAAE;QAAE;MAAI,CAAE,EAAE;QAAE,MAAM;QAAE;MAAQ,CAAE,CAAC;IACrE,CAAC;IAEO,IAAA,CAAA,YAAY,GAAI,MAAuB,IAAU;MACvD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;MAC/C,IAAI,IAAI;MACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC9C,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,EAAE;UACnC,IAAI,GAAG,CAAC,GAAG,CAAC;UACZ;QACD;MACF;MACD,IAAI,IAAI,EAAE;QACR,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;MACpD;IACH,CAAC;IAEO,IAAA,CAAA,cAAc,GAAI,QAAgB,IAAU;MAClD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;MAC/C,IAAI,IAAI;MACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC9C,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;UACvC,IAAI,GAAG,CAAC,GAAG,CAAC;UACZ;QACD;MACF;MACD,IAAI,IAAI,EAAE;QACR,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;MACpD;IACH,CAAC;IAEO,IAAA,CAAA,iBAAiB,GAAG,MAAmB;MAC7C,MAAM;QAAE;MAAK,CAAE,GAAG,IAAI,CAAC,KAAK;MAC5B,MAAM,cAAc,GAAiB,EAAE;MACvC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,IAAI,IAAI,CAAC,KAAK,EAAE;UACd,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,KAAK,EAAE;YAClC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC;UAC/B;SACF,MAAM;UACL,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;QAC1B;MACF;MACD,OAAO,cAAc;IACvB,CAAC;IAEO,IAAA,CAAA,sBAAsB,GAAG,CAAC,cAA4B,EAAE,QAAyB,KAAY;MACnG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC9C,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;UACvC,OAAO,CAAC,GAAG,CAAC;QACb;MACF;MAED,OAAO,CAAC;IACV,CAAC;IAEO,IAAA,CAAA,SAAS,GAAI,KAAmB,IAAkB;MACxD;MACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;UAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;cAAE,SAAS,EAAE;YAAI,CAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;UAC1E;QACF;QACD,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;UAAE,SAAS,EAAE;QAAI,CAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;MACxD;MACD,OAAO,KAAK;IACd,CAAC;IAED,IAAA,CAAA,UAAU,GAAI,QAA2C,IAAI;MAC3D,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;QAClC,OAAO,QAAQ,CAAA,CAAE;MAClB;MACD,OAAO,QAAQ,IAAI,QAAQ,CAAC,IAAI;IAClC,CAAC;IAxLC,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,EAAE;IAChC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,IAAI,mBAAmB,KAAK,EAAE;IAC1D,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,IAAI,yBAAyB,KAAK,EAAE;IAE5E,IAAI,CAAC,KAAK,GAAG;MACX,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC;MAC5G,SAAS,EAAE;KACZ;IAED,IAAI,KAAK,CAAC,oBAAoB,EAAE;MAC9B,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;MAC/C,IAAI,cAAc,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;QACnD,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;QAC9D,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC;MACxC;IACF;IAED,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAA,CAAE;EACpC;EAwKQ,cAAc,CAAC,WAAmB,EAAE,iBAA6B,EAAA;IACvE,IAAI,CAAC,QAAQ,CAAC;MACZ;KACD,CAAC;IAEF,IAAI,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;MACnC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,iBAAiB,CAAC;IACnD;EACH;EAEA,iBAAiB,CAAA,EAAA;IACf,MAAM,MAAM,GAAG,OAAO,QAAQ,KAAK,WAAW,GAAG,QAAQ,CAAC,IAAI,GAAG,IAAI;IACrE,IAAI,MAAM,EAAE;MACV,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC;IAChE;EACH;EAEA,oBAAoB,CAAA,EAAA;IAClB,MAAM,MAAM,GAAI,OAAO,QAAQ,KAAK,WAAW,IAAI,QAAQ,CAAC,IAAI,IAAK,IAAI;IACzE,IAAI,MAAM,EAAE;MACV,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC;IACnE;EACH;EAEA,kBAAkB,CAAC,SAAgC,EAAA;IACjD,IAAI,SAAS,CAAC,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;MACpD,IAAI,CAAC,QAAQ,CAAC;QAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC;MAAW,CAAE,CAAC;IACvD;EACH;EAEA,MAAM,CAAA,EAAA;IACJ,MAAM,EAAA,GAqCF,IAAI,CAAC,KAAK;MArCR;QACJ;QACA,KAAK;QACL,MAAM;QACN,KAAK;QACL,WAAW;QACX,oBAAoB;QACpB,OAAO;QACP,MAAM;QACN,MAAM;QACN,MAAM;QACN,UAAU;QACV,SAAS;QACT,KAAK;QACL,WAAW;QACX,cAAc,GAAG,MAAM;QACvB,cAAc,GAAG,MAAM;QACvB,gBAAgB,GAAG,QAAQ;QAC3B,SAAS;QACT,oBAAoB,GAAG,OAAO;QAC9B,YAAY;QACZ,iBAAiB;QACjB,aAAa;QACb,kBAAkB;QAClB,gBAAgB;QAChB,MAAM;QACN,QAAQ;QACR,MAAM;QACN,OAAO;QACP,aAAa;QACb,eAAe;QACf,oBAAoB;QACpB,SAAS;QACT,gBAAgB;QAChB;MAAc,CAAA,GAAA,EAGF;MAFT,IAAI,GAAA,MAAA,CAAA,EAAA,EAnCH,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,aAAA,EAAA,sBAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA,EAAA,WAAA,EAAA,OAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,sBAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,eAAA,EAAA,oBAAA,EAAA,kBAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,sBAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,gBAAA,CAmCG;MACP;IAEF,MAAM;MAAE;IAAW,CAAE,GAAG,IAAI,CAAC,KAAK;IAClC,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAE;IAC/C,MAAM,YAAY,GAAG,cAAc,CAAC,MAAM,GAAG,WAAW,GAAG,cAAc,CAAC,MAAM,GAAG,WAAW;IAC9F,MAAM,UAAU,GAAG,cAAc,CAAC,YAAY,GAAG,CAAC,CAAC;IACnD,MAAM,aAAa,GAAiB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IACzD,MAAM,SAAS,GAAG,UAAU,KAAK,cAAc,CAAC,CAAC,CAAC;IAClD,MAAM,OAAO,GAAG,UAAU,IAAI,UAAU,CAAC,UAAU,KAAK,SAAS,GAAG,UAAU,CAAC,UAAU,GAAG,IAAI;IAEhG,MAAM,GAAG,GAAI,eAAwB,IAAI;MACvC,MAAM,YAAY,GAAG;QACnB,MAAM,EAAE,eAAe;QACvB,YAAY,EAAE,YAAY;QAC1B,iBAAiB,EAAE,CAAC,KAAK,IAAI,iBAAiB,MAAM,iBAAiB,IAAI,IAAI,CAAC,OAAO;OACtF;MAED,OACE,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAK,YAAY,CAAA,EACxB,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,KAAI;QACjC,IAAI,IAAI,CAAC,cAAc,EAAE;UACvB;UACA;QACD;QACD,IAAI,OAAO;QACX,IAAI,WAAW;QACf,IAAI,IAAI,CAAC,KAAK,EAAE;UACd,IAAI,cAAc,GAAG,KAAK;UAC1B,IAAI,eAAe,GAAG,KAAK;UAC3B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE;YAChC,IAAI,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,EAAE;cACpC;cACA,cAAc,GAAG,IAAI;YACtB;YACD,IAAI,OAAO,CAAC,SAAS,EAAE;cACrB,eAAe,GAAG,IAAI;YACvB;UACF;UACD,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;UAC7E,OACE,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA;YACZ,GAAG,EAAE,KAAK;YACV,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,OAAO,EAAE,IAAI,CAAC,IAAI;YAClB,YAAY,EAAE,eAAe;YAC7B,SAAS,EAAE,cAAc;YACzB,UAAU,EAAE,CAAC,eAAe;YAC5B,IAAI,EAAE,WAAW;YACjB,cAAc,EAAE,IAAI,CAAC;UAAQ,CAAA,EAE7B,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAK,YAAY,EAAA;YAAE,UAAU,EAAA;UAAA,CAAA,CAAA,EACpC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAqB,EAAE,UAAkB,KAAI;YAC5D,IAAI,SAAS,CAAC,cAAc,EAAE;cAC5B;cACA;YACD;YACD,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,SAAS,CAAC,IAAI,CAAC;YACzE,OAAO,GAAG,SAAS,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,UAAU;YACtD,OACE,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA;cACZ,GAAG,EAAE,SAAS,UAAU,EAAE;cAC1B,EAAE,EAAE,SAAS,CAAC,EAAE;cAChB,OAAO,EAAE,SAAS,CAAC,IAAI;cACvB,SAAS,EAAE,UAAU,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI;cAC7C,UAAU,EAAE,CAAC,OAAO;cACpB,IAAI,EAAE,WAAW;cACjB,cAAc,EAAE,IAAI,CAAC;YAAQ,CAAA,CAC7B;UAEN,CAAC,CAAC,CACQ,CACE;QAEnB;QACD,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC;QACpE,OAAO,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU;QAE5C,OACE,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACR,IAAI,CAAC,gBAAgB,EAAA;UACzB,GAAG,EAAE,KAAK;UACV,EAAE,EAAE,IAAI,CAAC,EAAE;UACX,OAAO,EAAE,IAAI,CAAC,IAAI;UAClB,SAAS,EAAE,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;UACxC,UAAU,EAAE,CAAC,OAAO;UACpB,IAAI,EAAE,WAAW;UACjB,cAAc,EAAE,IAAI,CAAC;QAAQ,CAAA,CAAA,CAC7B;MAEN,CAAC,CAAC,CACQ;IAEhB,CAAC;IAED,MAAM,OAAO,GAAG;MACd,YAAY,EAAE,IAAI,CAAC,YAAY;MAC/B,cAAc,EAAE,IAAI,CAAC,cAAc;MACnC,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,OAAO;MACP;KACD;IAED,MAAM,SAAS,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACT,MAAM,GAAG;MAAE;IAAM,CAAE,GAAG,CAAA,CAAG,CAAA,EACzB,KAAK,GAAG;MAAE;IAAK,CAAE,GAAG,CAAA,CAAG,CAC5B;IAED,MAAM,MAAM,GACV,KAAA,CAAA,aAAA,CAAC,qBAAqB,EAAA;MAAC,KAAK,EAAE;IAAO,CAAA,EACnC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACM,IAAI,EAAA;MACR,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,IAAI,UAAU,CAAC,cAAc,IAAI,eAAe,EAAE,SAAS,CAAC;MACpG,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,SAAS,GAAG;IAAS,CAAA,CAAA,EAE3D,KAAK,IACJ,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA;MACX,OAAO,EAAE,IAAI,CAAC,OAAO;MACrB,aAAa,EAAE,IAAI,CAAC,aAAa;MACjC,OAAO,EAAE,OAAO;MAChB,KAAK,EAAE,KAAK;MACZ,WAAW,EAAE,WAAW;MACxB,oBAAoB,EAAE,oBAAoB;MAC1C,oBAAoB,EAAE,oBAAoB;MAC1C,SAAS,EAAE;IAAS,CAAA,CAEvB,EACD,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA;MACX,SAAS,EAAE,SAAS;MACpB,gBAAgB,EAAE,gBAAgB;MAClC,cAAc,EAAE,cAAc;MAC9B,aAAa,EAAE,aAAa;MAC5B,QAAQ,EAAE,MAAM,KAAK,SAAS;MAC9B,kBAAkB,EAAE,CAAC,KAAK,IAAI,kBAAkB,MAAM,kBAAkB,IAAI,IAAI,CAAC,OAAO,CAAC;MACzF,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;MAC/B,WAAW,EAAE,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC;QAAE;MAAS,CAAE,CAAC;MACtD,GAAG,EAAE,GAAG;MACR,KAAK,EAAE,KAAK;MACZ,UAAU,EAAE,UAAU;MACtB,gBAAgB,EAAE;IAAgB,CAAA,EAEjC,MAAM,IACL,KAAA,CAAA,aAAA,CAAC,oBAAoB,EAAA;MACnB,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,OAAO,EAAE,OAAO;MAChB,OAAO,EAAE,OAAO;MAChB,SAAS,EAAE,SAAS;MACpB,UAAU,EAAE,UAAU;MACtB,cAAc,EAAG,UAAU,IAAI,UAAU,CAAC,cAAc,IAAK,cAAc;MAC3E,cAAc,EAAE,cAAc;MAC9B,gBAAgB,EAAE;IAAgB,CAAA,CAErC,CACY,CACX,CAET;IAED,IAAI,MAAM,KAAK,SAAS,EAAE;MACxB,OACE,KAAA,CAAA,aAAA,CAAC,KAAK,EAAA;QACJ,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,KAAK,GAAG,SAAS;QACzC,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,YAAY,CAAC,KAAK;QAAA,iBAAA,EACV,IAAI,CAAC,OAAO;QAAA,kBAAA,EACX,IAAI,CAAC,aAAa;QACpC,SAAS,EAAE,KAAK;QAChB,gBAAgB,EAAA;MAAA,CAAA,EAEf,MAAM,CACD;IAEX;IAED,OAAO,MAAM;EACf;;AAndO,MAAA,CAAA,WAAW,GAAG,QAAQ;AACd,MAAA,CAAA,SAAS,GAAG,CAAC;AACrB,MAAA,CAAA,YAAY,GAA8B;EAC/C,KAAK,EAAE,IAAI;EACX,WAAW,EAAE,EAAE;EACf,oBAAoB,EAAE,GAAG;EACzB,SAAS,EAAE,EAAE;EACb,WAAW,EAAE,CAAC;EACd,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,gBAAgB,EAAE,QAAQ;EAC1B,SAAS,EAAE,KAAK;EAChB,oBAAoB,EAAE,OAAO;EAC7B,YAAY,EAAE,IAAI;EAClB,iBAAiB,EAAE,IAAI;EACvB,aAAa,EAAE,IAAI;EACnB,kBAAkB,EAAE,IAAI;EACxB,gBAAgB,EAAE,KAAK;EACvB,MAAM,EAAE,IAA8B;EACtC,MAAM,EAAE,IAA8B;EACtC,UAAU,EAAE,IAA8B;EAC1C,KAAK,EAAE,IAAc;EACrB,MAAM,EAAE,IAAc;EACtB,MAAM,EAAE,IAAuB;EAC/B,OAAO,EAAE,CAAA,KAAM,SAAgB;EAC/B,QAAQ,EAAE,IAAmB;EAC7B,MAAM,EAAE,SAAS;EACjB,eAAe,EAAE,KAAK;EACtB,SAAS,EAAE,KAAK;EAChB,gBAAgB,EAAE,KAAK;EACvB,cAAc,EAAE,CAAA,KAAM;CACvB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KeyTypes } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport class Wizard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleKeyClicks = (event) => {\n            if (event.key === KeyTypes.Escape) {\n                if (this.state.isNavOpen) {\n                    this.setState({ isNavOpen: !this.state.isNavOpen });\n                }\n                else if (this.props.isOpen) {\n                    this.props.onClose();\n                }\n            }\n        };\n        this.onNext = () => {\n            const { onNext, onClose, onSave } = this.props;\n            const { currentStep } = this.state;\n            const flattenedSteps = this.getFlattenedSteps();\n            const maxSteps = flattenedSteps.length;\n            if (currentStep >= maxSteps) {\n                // Hit the save button at the end of the wizard\n                if (onSave) {\n                    return onSave();\n                }\n                return onClose();\n            }\n            else {\n                let newStep = currentStep;\n                for (let nextStep = currentStep; nextStep <= maxSteps; nextStep++) {\n                    if (!flattenedSteps[nextStep]) {\n                        return;\n                    }\n                    if (!flattenedSteps[nextStep].isDisabled) {\n                        newStep = nextStep + 1;\n                        break;\n                    }\n                }\n                this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n                const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n                const { id, name } = flattenedSteps[newStep - 1];\n                return onNext && onNext({ id, name }, { prevId, prevName });\n            }\n        };\n        this.onBack = () => {\n            const { onBack } = this.props;\n            const { currentStep } = this.state;\n            const flattenedSteps = this.getFlattenedSteps();\n            if (flattenedSteps.length < currentStep) {\n                // Previous step was removed, just update the currentStep state\n                const adjustedStep = flattenedSteps.length;\n                this.setCurrentStep(adjustedStep, flattenedSteps[adjustedStep - 1]);\n            }\n            else {\n                let newStep = currentStep;\n                for (let prevStep = currentStep; prevStep >= 0; prevStep--) {\n                    if (!flattenedSteps[prevStep - 2]) {\n                        return;\n                    }\n                    if (!flattenedSteps[prevStep - 2].isDisabled) {\n                        newStep = prevStep - 1 <= 1 ? 1 : prevStep - 1;\n                        break;\n                    }\n                }\n                this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n                const { id: prevId, name: prevName } = flattenedSteps[newStep];\n                const { id, name } = flattenedSteps[newStep - 1];\n                return onBack && onBack({ id, name }, { prevId, prevName });\n            }\n        };\n        this.goToStep = (step) => {\n            const flattenedSteps = this.getFlattenedSteps();\n            if (flattenedSteps[step - 1].isDisabled) {\n                return;\n            }\n            const { onGoToStep } = this.props;\n            const { currentStep } = this.state;\n            const maxSteps = flattenedSteps.length;\n            if (step < 1) {\n                step = 1;\n            }\n            else if (step > maxSteps) {\n                step = maxSteps;\n            }\n            this.setCurrentStep(step, flattenedSteps[step - 1]);\n            this.setState({ isNavOpen: false });\n            const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n            const { id, name } = flattenedSteps[step - 1];\n            return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n        };\n        this.goToStepById = (stepId) => {\n            const flattenedSteps = this.getFlattenedSteps();\n            let step;\n            for (let i = 0; i < flattenedSteps.length; i++) {\n                if (flattenedSteps[i].id === stepId) {\n                    step = i + 1;\n                    break;\n                }\n            }\n            if (step) {\n                this.setCurrentStep(step, flattenedSteps[step - 1]);\n            }\n        };\n        this.goToStepByName = (stepName) => {\n            const flattenedSteps = this.getFlattenedSteps();\n            let step;\n            for (let i = 0; i < flattenedSteps.length; i++) {\n                if (flattenedSteps[i].name === stepName) {\n                    step = i + 1;\n                    break;\n                }\n            }\n            if (step) {\n                this.setCurrentStep(step, flattenedSteps[step - 1]);\n            }\n        };\n        this.getFlattenedSteps = () => {\n            const { steps } = this.props;\n            const flattenedSteps = [];\n            for (const step of steps) {\n                if (step.steps) {\n                    for (const childStep of step.steps) {\n                        flattenedSteps.push(childStep);\n                    }\n                }\n                else {\n                    flattenedSteps.push(step);\n                }\n            }\n            return flattenedSteps;\n        };\n        this.getFlattenedStepsIndex = (flattenedSteps, stepName) => {\n            for (let i = 0; i < flattenedSteps.length; i++) {\n                if (flattenedSteps[i].name === stepName) {\n                    return i + 1;\n                }\n            }\n            return 0;\n        };\n        this.initSteps = (steps) => {\n            // Set default Step values\n            for (let i = 0; i < steps.length; i++) {\n                if (steps[i].steps) {\n                    for (let j = 0; j < steps[i].steps.length; j++) {\n                        steps[i].steps[j] = Object.assign({ canJumpTo: true }, steps[i].steps[j]);\n                    }\n                }\n                steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n            }\n            return steps;\n        };\n        this.getElement = (appendTo) => {\n            if (typeof appendTo === 'function') {\n                return appendTo();\n            }\n            return appendTo || document.body;\n        };\n        const newId = Wizard.currentId++;\n        this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n        this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n        this.state = {\n            currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n            isNavOpen: false\n        };\n        if (props.onCurrentStepChanged) {\n            const flattenedSteps = this.getFlattenedSteps();\n            if (flattenedSteps.length >= this.state.currentStep) {\n                const currentStep = flattenedSteps[this.state.currentStep - 1];\n                props.onCurrentStepChanged(currentStep);\n            }\n        }\n        this.drawerRef = React.createRef();\n    }\n    setCurrentStep(currentStep, currentStepObject) {\n        this.setState({\n            currentStep\n        });\n        if (this.props.onCurrentStepChanged) {\n            this.props.onCurrentStepChanged(currentStepObject);\n        }\n    }\n    componentDidMount() {\n        const target = typeof document !== 'undefined' ? document.body : null;\n        if (target) {\n            target.addEventListener('keydown', this.handleKeyClicks, false);\n        }\n    }\n    componentWillUnmount() {\n        const target = (typeof document !== 'undefined' && document.body) || null;\n        if (target) {\n            target.removeEventListener('keydown', this.handleKeyClicks, false);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.startAtStep !== this.props.startAtStep) {\n            this.setState({ currentStep: this.props.startAtStep });\n        }\n    }\n    render() {\n        const _a = this.props, { \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        width, height, title, description, descriptionComponent, onClose, onSave, onBack, onNext, onGoToStep, className, steps, startAtStep, nextButtonText = 'Next', backButtonText = 'Back', cancelButtonText = 'Cancel', hideClose, closeButtonAriaLabel = 'Close', navAriaLabel, navAriaLabelledBy, mainAriaLabel, mainAriaLabelledBy, hasNoBodyPadding, footer, appendTo, isOpen, titleId, descriptionId, isNavExpandable, onCurrentStepChanged, hasDrawer, isDrawerExpanded, onExpandDrawer } = _a, rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"descriptionComponent\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\", \"isNavExpandable\", \"onCurrentStepChanged\", \"hasDrawer\", \"isDrawerExpanded\", \"onExpandDrawer\"])\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        ;\n        const { currentStep } = this.state;\n        const flattenedSteps = this.getFlattenedSteps();\n        const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n        const activeStep = flattenedSteps[adjustedStep - 1];\n        const computedSteps = this.initSteps(steps);\n        const firstStep = activeStep === flattenedSteps[0];\n        const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n        const nav = (isWizardNavOpen) => {\n            const wizNavAProps = {\n                isOpen: isWizardNavOpen,\n                'aria-label': navAriaLabel,\n                'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n            };\n            return (React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map((step, index) => {\n                if (step.isFinishedStep) {\n                    // Don't show finished step in the side nav\n                    return;\n                }\n                let enabled;\n                let navItemStep;\n                if (step.steps) {\n                    let hasActiveChild = false;\n                    let canJumpToParent = false;\n                    for (const subStep of step.steps) {\n                        if (activeStep.name === subStep.name) {\n                            // one of the children matches\n                            hasActiveChild = true;\n                        }\n                        if (subStep.canJumpTo) {\n                            canJumpToParent = true;\n                        }\n                    }\n                    navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n                    return (React.createElement(WizardNavItem, { key: index, id: step.id, content: step.name, isExpandable: isNavExpandable, isCurrent: hasActiveChild, isDisabled: !canJumpToParent, step: navItemStep, onNavItemClick: this.goToStep },\n                        React.createElement(WizardNav, Object.assign({}, wizNavAProps, { returnList: true }), step.steps.map((childStep, indexChild) => {\n                            if (childStep.isFinishedStep) {\n                                // Don't show finished step in the side nav\n                                return;\n                            }\n                            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n                            enabled = childStep.canJumpTo && !childStep.isDisabled;\n                            return (React.createElement(WizardNavItem, { key: `child_${indexChild}`, id: childStep.id, content: childStep.name, isCurrent: activeStep.name === childStep.name, isDisabled: !enabled, step: navItemStep, onNavItemClick: this.goToStep }));\n                        }))));\n                }\n                navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n                enabled = step.canJumpTo && !step.isDisabled;\n                return (React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, { key: index, id: step.id, content: step.name, isCurrent: activeStep.name === step.name, isDisabled: !enabled, step: navItemStep, onNavItemClick: this.goToStep })));\n            })));\n        };\n        const context = {\n            goToStepById: this.goToStepById,\n            goToStepByName: this.goToStepByName,\n            onNext: this.onNext,\n            onBack: this.onBack,\n            onClose,\n            activeStep\n        };\n        const divStyles = Object.assign(Object.assign({}, (height ? { height } : {})), (width ? { width } : {}));\n        const wizard = (React.createElement(WizardContextProvider, { value: context },\n            React.createElement(\"div\", Object.assign({}, rest, { className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className), style: Object.keys(divStyles).length ? divStyles : undefined }),\n                title && (React.createElement(WizardHeader, { titleId: this.titleId, descriptionId: this.descriptionId, onClose: onClose, title: title, description: description, descriptionComponent: descriptionComponent, closeButtonAriaLabel: closeButtonAriaLabel, hideClose: hideClose })),\n                React.createElement(WizardToggle, { hasDrawer: hasDrawer, isDrawerExpanded: isDrawerExpanded, onExpandDrawer: onExpandDrawer, mainAriaLabel: mainAriaLabel, isInPage: isOpen === undefined, mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId), isNavOpen: this.state.isNavOpen, onNavToggle: isNavOpen => this.setState({ isNavOpen }), nav: nav, steps: steps, activeStep: activeStep, hasNoBodyPadding: hasNoBodyPadding }, footer || (React.createElement(WizardFooterInternal, { onNext: this.onNext, onBack: this.onBack, onClose: onClose, isValid: isValid, firstStep: firstStep, activeStep: activeStep, nextButtonText: (activeStep && activeStep.nextButtonText) || nextButtonText, backButtonText: backButtonText, cancelButtonText: cancelButtonText }))))));\n        if (isOpen !== undefined) {\n            return (React.createElement(Modal, { width: width !== null ? width : undefined, isOpen: isOpen, variant: ModalVariant.large, \"aria-labelledby\": this.titleId, \"aria-describedby\": this.descriptionId, showClose: false, hasNoBodyWrapper: true }, wizard));\n        }\n        return wizard;\n    }\n}\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n    title: null,\n    description: '',\n    descriptionComponent: 'p',\n    className: '',\n    startAtStep: 1,\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: null,\n    navAriaLabelledBy: null,\n    mainAriaLabel: null,\n    mainAriaLabelledBy: null,\n    hasNoBodyPadding: false,\n    onBack: null,\n    onNext: null,\n    onGoToStep: null,\n    width: null,\n    height: null,\n    footer: null,\n    onClose: () => undefined,\n    appendTo: null,\n    isOpen: undefined,\n    isNavExpandable: false,\n    hasDrawer: false,\n    isDrawerExpanded: false,\n    onExpandDrawer: () => undefined\n};\n//# sourceMappingURL=Wizard.js.map"]},"metadata":{},"sourceType":"module"}