{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\nexport const FileUploadField = _a => {\n  var {\n      id,\n      type,\n      value = '',\n      filename = '',\n      onChange = () => {},\n      onBrowseButtonClick = () => {},\n      onClearButtonClick = () => {},\n      onTextAreaClick,\n      onTextChange,\n      onTextAreaBlur,\n      textAreaPlaceholder = '',\n      className = '',\n      isDisabled = false,\n      isReadOnly = false,\n      isLoading = false,\n      spinnerAriaValueText,\n      isRequired = false,\n      isDragActive = false,\n      validated = 'default',\n      'aria-label': ariaLabel = 'File upload',\n      filenamePlaceholder = 'Drag a file here or browse to upload',\n      filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder,\n      browseButtonText = 'Browse...',\n      clearButtonText = 'Clear',\n      isClearButtonDisabled = !filename && !value,\n      containerRef = null,\n      allowEditingUploadedText = false,\n      hideDefaultPreview = false,\n      children = null\n    } = _a,\n    props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"onChange\", \"onBrowseButtonClick\", \"onClearButtonClick\", \"onTextAreaClick\", \"onTextChange\", \"onTextAreaBlur\", \"textAreaPlaceholder\", \"className\", \"isDisabled\", \"isReadOnly\", \"isLoading\", \"spinnerAriaValueText\", \"isRequired\", \"isDragActive\", \"validated\", 'aria-label', \"filenamePlaceholder\", \"filenameAriaLabel\", \"browseButtonText\", \"clearButtonText\", \"isClearButtonDisabled\", \"containerRef\", \"allowEditingUploadedText\", \"hideDefaultPreview\", \"children\"]);\n  const onTextAreaChange = (newValue, event) => {\n    onChange(newValue, filename, event);\n    onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(newValue);\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.fileUpload, isDragActive && styles.modifiers.dragHover, isLoading && styles.modifiers.loading, className),\n    ref: containerRef\n  }, props), React.createElement(\"div\", {\n    className: styles.fileUploadFileSelect\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n    isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n    : true,\n    isDisabled: isDisabled,\n    id: `${id}-filename`,\n    name: `${id}-filename`,\n    \"aria-label\": filenameAriaLabel,\n    placeholder: filenamePlaceholder,\n    \"aria-describedby\": `${id}-browse-button`,\n    value: filename\n  }), React.createElement(Button, {\n    id: `${id}-browse-button`,\n    variant: ButtonVariant.control,\n    onClick: onBrowseButtonClick,\n    isDisabled: isDisabled\n  }, browseButtonText), React.createElement(Button, {\n    variant: ButtonVariant.control,\n    isDisabled: isDisabled || isClearButtonDisabled,\n    onClick: onClearButtonClick\n  }, clearButtonText))), React.createElement(\"div\", {\n    className: styles.fileUploadFileDetails\n  }, !hideDefaultPreview && type === fileReaderType.text && React.createElement(TextArea, {\n    readOnly: isReadOnly || !!filename && !allowEditingUploadedText,\n    disabled: isDisabled,\n    isRequired: isRequired,\n    resizeOrientation: TextAreResizeOrientation.vertical,\n    validated: validated,\n    id: id,\n    name: id,\n    \"aria-label\": ariaLabel,\n    value: value,\n    onChange: onTextAreaChange,\n    onClick: onTextAreaClick,\n    onBlur: onTextAreaBlur,\n    placeholder: textAreaPlaceholder\n  }), isLoading && React.createElement(\"div\", {\n    className: styles.fileUploadFileDetailsSpinner\n  }, React.createElement(Spinner, {\n    size: spinnerSize.lg,\n    \"aria-valuetext\": spinnerAriaValueText\n  }))), children);\n};\nFileUploadField.displayName = 'FileUploadField';","map":{"version":3,"sources":["../../../../src/components/FileUpload/FileUploadField.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\nexport const FileUploadField = (_a) => {\n    var { id, type, value = '', filename = '', onChange = () => { }, onBrowseButtonClick = () => { }, onClearButtonClick = () => { }, onTextAreaClick, onTextChange, onTextAreaBlur, textAreaPlaceholder = '', className = '', isDisabled = false, isReadOnly = false, isLoading = false, spinnerAriaValueText, isRequired = false, isDragActive = false, validated = 'default', 'aria-label': ariaLabel = 'File upload', filenamePlaceholder = 'Drag a file here or browse to upload', filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder, browseButtonText = 'Browse...', clearButtonText = 'Clear', isClearButtonDisabled = !filename && !value, containerRef = null, allowEditingUploadedText = false, hideDefaultPreview = false, children = null } = _a, props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"onChange\", \"onBrowseButtonClick\", \"onClearButtonClick\", \"onTextAreaClick\", \"onTextChange\", \"onTextAreaBlur\", \"textAreaPlaceholder\", \"className\", \"isDisabled\", \"isReadOnly\", \"isLoading\", \"spinnerAriaValueText\", \"isRequired\", \"isDragActive\", \"validated\", 'aria-label', \"filenamePlaceholder\", \"filenameAriaLabel\", \"browseButtonText\", \"clearButtonText\", \"isClearButtonDisabled\", \"containerRef\", \"allowEditingUploadedText\", \"hideDefaultPreview\", \"children\"]);\n    const onTextAreaChange = (newValue, event) => {\n        onChange(newValue, filename, event);\n        onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(newValue);\n    };\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.fileUpload, isDragActive && styles.modifiers.dragHover, isLoading && styles.modifiers.loading, className), ref: containerRef }, props),\n        React.createElement(\"div\", { className: styles.fileUploadFileSelect },\n            React.createElement(InputGroup, null,\n                React.createElement(TextInput, { isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n                    : true, isDisabled: isDisabled, id: `${id}-filename`, name: `${id}-filename`, \"aria-label\": filenameAriaLabel, placeholder: filenamePlaceholder, \"aria-describedby\": `${id}-browse-button`, value: filename }),\n                React.createElement(Button, { id: `${id}-browse-button`, variant: ButtonVariant.control, onClick: onBrowseButtonClick, isDisabled: isDisabled }, browseButtonText),\n                React.createElement(Button, { variant: ButtonVariant.control, isDisabled: isDisabled || isClearButtonDisabled, onClick: onClearButtonClick }, clearButtonText))),\n        React.createElement(\"div\", { className: styles.fileUploadFileDetails },\n            !hideDefaultPreview && type === fileReaderType.text && (React.createElement(TextArea, { readOnly: isReadOnly || (!!filename && !allowEditingUploadedText), disabled: isDisabled, isRequired: isRequired, resizeOrientation: TextAreResizeOrientation.vertical, validated: validated, id: id, name: id, \"aria-label\": ariaLabel, value: value, onChange: onTextAreaChange, onClick: onTextAreaClick, onBlur: onTextAreaBlur, placeholder: textAreaPlaceholder })),\n            isLoading && (React.createElement(\"div\", { className: styles.fileUploadFileDetailsSpinner },\n                React.createElement(Spinner, { size: spinnerSize.lg, \"aria-valuetext\": spinnerAriaValueText })))),\n        children));\n};\nFileUploadField.displayName = 'FileUploadField';\n//# sourceMappingURL=FileUploadField.js.map"]},"metadata":{},"sourceType":"module"}