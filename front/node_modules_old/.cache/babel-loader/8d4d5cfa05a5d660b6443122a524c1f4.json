{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { Text, TextVariants } from '../Text';\nimport { Button, ButtonVariant } from '../Button';\nexport const NotificationDrawerHeader = _a => {\n  var {\n      children,\n      className = '',\n      count,\n      closeButtonAriaLabel = 'Close',\n      customText,\n      onClose,\n      title = 'Notifications',\n      unreadText = 'unread'\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"count\", \"closeButtonAriaLabel\", \"customText\", \"onClose\", \"title\", \"unreadText\"]);\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerHeader, className)\n  }), React.createElement(Text, {\n    component: TextVariants.h1,\n    className: css(styles.notificationDrawerHeaderTitle)\n  }, title), (customText !== undefined || count !== undefined) && React.createElement(\"span\", {\n    className: css(styles.notificationDrawerHeaderStatus)\n  }, customText || `${count} ${unreadText}`), (children || onClose) && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerHeaderAction)\n  }, children, onClose && React.createElement(\"div\", null, React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": closeButtonAriaLabel,\n    onClick: onClose\n  }, React.createElement(TimesIcon, {\n    \"aria-hidden\": \"true\"\n  })))));\n};\nNotificationDrawerHeader.displayName = 'NotificationDrawerHeader';","map":{"version":3,"sources":["../../../../src/components/NotificationDrawer/NotificationDrawerHeader.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,gFAAgF;AACnG,OAAO,SAAS,MAAM,mDAAmD;AAEzE,SAAS,IAAI,EAAE,YAAY,QAAQ,SAAS;AAC5C,SAAS,MAAM,EAAE,aAAa,QAAQ,WAAW;AAqBjD,OAAO,MAAM,wBAAwB,GAA4D,EAUjE,IAAI;MAV6D;MAC/F,QAAQ;MACR,SAAS,GAAG,EAAE;MACd,KAAK;MACL,oBAAoB,GAAG,OAAO;MAC9B,UAAU;MACV,OAAO;MACP,KAAK,GAAG,eAAe;MACvB,UAAU,GAAG;IAAQ,CAAA,GAAA,EAES;IAD3B,KAAK,GAAA,MAAA,CAAA,EAAA,EATuF,CAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA,sBAAA,EAAA,YAAA,EAAA,SAAA,EAAA,OAAA,EAAA,YAAA,CAUhG,CADS;EAC2B,OACnC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAS,KAAK,EAAA;IAAE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,wBAAwB,EAAE,SAAS;EAAC,CAAA,CAAA,EACxE,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IAAC,SAAS,EAAE,YAAY,CAAC,EAAE;IAAE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,6BAA6B;EAAC,CAAA,EACnF,KAAK,CACD,EACN,CAAC,UAAU,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,KAC/C,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,8BAA8B;EAAC,CAAA,EAAG,UAAU,IAAI,GAAG,KAAK,IAAI,UAAU,EAAE,CACrG,EACA,CAAC,QAAQ,IAAI,OAAO,KACnB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,8BAA8B;EAAC,CAAA,EACvD,QAAQ,EACR,OAAO,IACN,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;IAAC,OAAO,EAAE,aAAa,CAAC,KAAK;IAAA,YAAA,EAAc,oBAAoB;IAAE,OAAO,EAAE;EAAO,CAAA,EACtF,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IAAA,aAAA,EAAa;EAAM,CAAA,CAAG,CACzB,CAEZ,CAEJ,CACG;CACP;AACD,wBAAwB,CAAC,WAAW,GAAG,0BAA0B","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { Text, TextVariants } from '../Text';\nimport { Button, ButtonVariant } from '../Button';\nexport const NotificationDrawerHeader = (_a) => {\n    var { children, className = '', count, closeButtonAriaLabel = 'Close', customText, onClose, title = 'Notifications', unreadText = 'unread' } = _a, props = __rest(_a, [\"children\", \"className\", \"count\", \"closeButtonAriaLabel\", \"customText\", \"onClose\", \"title\", \"unreadText\"]);\n    return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.notificationDrawerHeader, className) }),\n        React.createElement(Text, { component: TextVariants.h1, className: css(styles.notificationDrawerHeaderTitle) }, title),\n        (customText !== undefined || count !== undefined) && (React.createElement(\"span\", { className: css(styles.notificationDrawerHeaderStatus) }, customText || `${count} ${unreadText}`)),\n        (children || onClose) && (React.createElement(\"div\", { className: css(styles.notificationDrawerHeaderAction) },\n            children,\n            onClose && (React.createElement(\"div\", null,\n                React.createElement(Button, { variant: ButtonVariant.plain, \"aria-label\": closeButtonAriaLabel, onClick: onClose },\n                    React.createElement(TimesIcon, { \"aria-hidden\": \"true\" }))))))));\n};\nNotificationDrawerHeader.displayName = 'NotificationDrawerHeader';\n//# sourceMappingURL=NotificationDrawerHeader.js.map"]},"metadata":{},"sourceType":"module"}