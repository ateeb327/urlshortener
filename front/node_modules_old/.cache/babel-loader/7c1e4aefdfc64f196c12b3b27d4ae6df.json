{"ast":null,"code":"const hasCompoundParentsExpanded = (parentId, compoundParent, rows) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].cells[compoundParent].props.isOpen;\n    }\n  }\n  return false;\n};\nconst hasParentsExpanded = (parentId, rows) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].isOpen;\n    }\n  }\n  return false;\n};\nexport const isRowExpanded = (row, rows) => {\n  if (row.parent !== undefined) {\n    if (row.hasOwnProperty('compoundParent')) {\n      return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n    }\n    return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n  }\n  return undefined;\n};\nexport const getErrorTextByValidator = (validatorName, validators) => {\n  const result = validators.filter(validator => validator.name === validatorName);\n  return result[0].errorText;\n};\nexport const cancelCellEdits = row => {\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    delete cell.props.editableValue;\n    cell.props.isValid = true;\n    // for editable selects, revert the selected property to its original value\n    if (cell.props.selected) {\n      cell.props.selected = cell.props.value;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\nexport const validateCellEdits = (row, type, validationErrors, missingPropErrorTxt = 'Validation requires unique name property for row cells') => {\n  row.isValid = Object.keys(validationErrors).length ? false : true;\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        const errorMsg = Object.keys(validationErrors).filter(validatorName => validationErrors[validatorName].includes(cell.props.name)).map(validatorName => getErrorTextByValidator(validatorName, row.rowEditValidationRules));\n        if (errorMsg.length) {\n          cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n          if (cell.props.name === undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n          }\n        } else {\n          delete cell.props.errorText;\n          cell.props.isValid = true;\n        }\n      }\n    }\n  });\n  return row;\n};\nexport const applyCellEdits = (row, type) => {\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n    // sync for validation\n    if (hasValue && !hasEditableValue) {\n      cell.props.editableValue = cell.props.value;\n    }\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        cell.props.value = cell.props.editableValue;\n        cell.props.isValid = true;\n        delete cell.props.errorText;\n      }\n      delete cell.props.editableValue;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\nconst camelize = s => s.toUpperCase().replace('-', '').replace('_', '');\nexport const toCamel = s => s.replace(/([-_][a-z])/gi, camelize);\n/**\n * @param {string} input - String to capitalize\n */\nexport function capitalize(input) {\n  return input[0].toUpperCase() + input.substring(1);\n}","map":{"version":3,"sources":["../../../../../src/components/Table/utils/utils.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["const hasCompoundParentsExpanded = (parentId, compoundParent, rows) => {\n    // max rows.length parents\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const i of rows) {\n        if (rows[parentId].hasOwnProperty('parent')) {\n            parentId = rows[parentId].parent;\n        }\n        else {\n            return rows[parentId].cells[compoundParent].props.isOpen;\n        }\n    }\n    return false;\n};\nconst hasParentsExpanded = (parentId, rows) => {\n    // max rows.length parents\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const i of rows) {\n        if (rows[parentId].hasOwnProperty('parent')) {\n            parentId = rows[parentId].parent;\n        }\n        else {\n            return rows[parentId].isOpen;\n        }\n    }\n    return false;\n};\nexport const isRowExpanded = (row, rows) => {\n    if (row.parent !== undefined) {\n        if (row.hasOwnProperty('compoundParent')) {\n            return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n        }\n        return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n    }\n    return undefined;\n};\nexport const getErrorTextByValidator = (validatorName, validators) => {\n    const result = validators.filter(validator => validator.name === validatorName);\n    return result[0].errorText;\n};\nexport const cancelCellEdits = (row) => {\n    row.cells.forEach(cell => {\n        delete cell.props.errorText;\n        delete cell.props.editableValue;\n        cell.props.isValid = true;\n        // for editable selects, revert the selected property to its original value\n        if (cell.props.selected) {\n            cell.props.selected = cell.props.value;\n        }\n    });\n    row.isEditable = !row.isEditable;\n    row.isValid = true;\n    return row;\n};\nexport const validateCellEdits = (row, type, validationErrors, missingPropErrorTxt = 'Validation requires unique name property for row cells') => {\n    row.isValid = Object.keys(validationErrors).length ? false : true;\n    row.cells.forEach(cell => {\n        delete cell.props.errorText;\n        const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n        const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n        if (cell.props && hasValue && hasEditableValue) {\n            if (type === 'save') {\n                const errorMsg = Object.keys(validationErrors)\n                    .filter(validatorName => validationErrors[validatorName].includes(cell.props.name))\n                    .map(validatorName => getErrorTextByValidator(validatorName, row.rowEditValidationRules));\n                if (errorMsg.length) {\n                    cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n                    if (cell.props.name === undefined) {\n                        // eslint-disable-next-line no-console\n                        console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n                    }\n                }\n                else {\n                    delete cell.props.errorText;\n                    cell.props.isValid = true;\n                }\n            }\n        }\n    });\n    return row;\n};\nexport const applyCellEdits = (row, type) => {\n    row.cells.forEach(cell => {\n        delete cell.props.errorText;\n        const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n        const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n        // sync for validation\n        if (hasValue && !hasEditableValue) {\n            cell.props.editableValue = cell.props.value;\n        }\n        if (cell.props && hasValue && hasEditableValue) {\n            if (type === 'save') {\n                cell.props.value = cell.props.editableValue;\n                cell.props.isValid = true;\n                delete cell.props.errorText;\n            }\n            delete cell.props.editableValue;\n        }\n    });\n    row.isEditable = !row.isEditable;\n    row.isValid = true;\n    return row;\n};\nconst camelize = (s) => s\n    .toUpperCase()\n    .replace('-', '')\n    .replace('_', '');\nexport const toCamel = (s) => s.replace(/([-_][a-z])/gi, camelize);\n/**\n * @param {string} input - String to capitalize\n */\nexport function capitalize(input) {\n    return input[0].toUpperCase() + input.substring(1);\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}