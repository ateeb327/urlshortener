{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\nconst getPercentage = (current, max) => 100 * current / max;\nexport const Slider = _a => {\n  var {\n      className,\n      value = 0,\n      customSteps,\n      areCustomStepsContinuous = false,\n      isDisabled = false,\n      isInputVisible = false,\n      inputValue = 0,\n      inputLabel,\n      inputAriaLabel = 'Slider value input',\n      thumbAriaLabel = 'Value',\n      hasTooltipOverThumb = false,\n      inputPosition = 'right',\n      onChange,\n      leftActions,\n      rightActions,\n      step = 1,\n      min = 0,\n      max = 100,\n      showTicks = false,\n      showBoundaries = true,\n      'aria-describedby': ariaDescribedby,\n      'aria-labelledby': ariaLabelledby\n    } = _a,\n    props = __rest(_a, [\"className\", \"value\", \"customSteps\", \"areCustomStepsContinuous\", \"isDisabled\", \"isInputVisible\", \"inputValue\", \"inputLabel\", \"inputAriaLabel\", \"thumbAriaLabel\", \"hasTooltipOverThumb\", \"inputPosition\", \"onChange\", \"leftActions\", \"rightActions\", \"step\", \"min\", \"max\", \"showTicks\", \"showBoundaries\", 'aria-describedby', 'aria-labelledby']);\n  const sliderRailRef = React.useRef();\n  const thumbRef = React.useRef();\n  const [localValue, setValue] = useState(value);\n  const [localInputValue, setLocalInputValue] = useState(inputValue);\n  React.useEffect(() => {\n    setValue(value);\n  }, [value]);\n  React.useEffect(() => {\n    setLocalInputValue(inputValue);\n  }, [inputValue]);\n  let diff = 0;\n  let snapValue;\n  // calculate style value percentage\n  const stylePercent = (localValue - min) * 100 / (max - min);\n  const style = {\n    '--pf-c-slider--value': `${stylePercent}%`\n  };\n  const widthChars = React.useMemo(() => localInputValue.toString().length, [localInputValue]);\n  const inputStyle = {\n    '--pf-c-slider__value--c-form-control--width-chars': widthChars\n  };\n  const onChangeHandler = value => {\n    setLocalInputValue(Number(value));\n  };\n  const handleKeyPressOnInput = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (onChange) {\n        onChange(localValue, localInputValue, setLocalInputValue);\n      }\n    }\n  };\n  const onInputFocus = e => {\n    e.stopPropagation();\n  };\n  const onThumbClick = () => {\n    thumbRef.current.focus();\n  };\n  const onBlur = () => {\n    if (onChange) {\n      onChange(localValue, localInputValue, setLocalInputValue);\n    }\n  };\n  const findAriaTextValue = () => {\n    if (!areCustomStepsContinuous && customSteps) {\n      const matchingStep = customSteps.find(stepObj => stepObj.value === localValue);\n      if (matchingStep) {\n        return matchingStep.label;\n      }\n    }\n    // For continuous steps default to showing 2 decimals in tooltip\n    // Consider making it configurable via a property\n    return Number(Number(localValue).toFixed(2)).toString();\n  };\n  const handleThumbDragEnd = () => {\n    document.removeEventListener('mousemove', callbackThumbMove);\n    document.removeEventListener('mouseup', callbackThumbUp);\n    document.removeEventListener('touchmove', callbackThumbMove);\n    document.removeEventListener('touchend', callbackThumbUp);\n    document.removeEventListener('touchcancel', callbackThumbUp);\n  };\n  const handleMouseDown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('mousemove', callbackThumbMove);\n    document.addEventListener('mouseup', callbackThumbUp);\n  };\n  const handleTouchStart = e => {\n    e.stopPropagation();\n    diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('touchmove', callbackThumbMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackThumbUp);\n    document.addEventListener('touchcancel', callbackThumbUp);\n  };\n  const onSliderRailClick = e => {\n    handleThumbMove(e);\n    if (snapValue && !areCustomStepsContinuous) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n      if (onChange) {\n        onChange(snapValue);\n      }\n    }\n  };\n  const handleThumbMove = e => {\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n    const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n    let newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n    const end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n    const start = 0;\n    if (newPosition < start) {\n      newPosition = 0;\n    }\n    if (newPosition > end) {\n      newPosition = end;\n    }\n    const newPercentage = getPercentage(newPosition, end);\n    thumbRef.current.style.setProperty('--pf-c-slider--value', `${newPercentage}%`);\n    // convert percentage to value\n    const newValue = Math.round((newPercentage * (max - min) / 100 + min) * 100) / 100;\n    setValue(newValue);\n    if (!customSteps) {\n      // snap to new value if not custom steps\n      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n    }\n    /* If custom steps are discrete, snap to closest step value */\n    if (!areCustomStepsContinuous && customSteps) {\n      let percentage = newPercentage;\n      if (customSteps[customSteps.length - 1].value !== 100) {\n        percentage = newPercentage * (max - min) / 100 + min;\n      }\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value >= percentage);\n      if (customSteps[stepIndex].value === percentage) {\n        snapValue = customSteps[stepIndex].value;\n      } else {\n        const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n        if (midpoint > percentage) {\n          snapValue = customSteps[stepIndex - 1].value;\n        } else {\n          snapValue = customSteps[stepIndex].value;\n        }\n      }\n      setValue(snapValue);\n    }\n    // Call onchange callback\n    if (onChange) {\n      if (snapValue !== undefined) {\n        onChange(snapValue);\n      } else {\n        onChange(newValue);\n      }\n    }\n  };\n  const callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n  const callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n  const handleThumbKeys = e => {\n    const key = e.key;\n    if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      return;\n    }\n    e.preventDefault();\n    let newValue = localValue;\n    if (!areCustomStepsContinuous && customSteps) {\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value === localValue);\n      if (key === 'ArrowRight') {\n        if (stepIndex + 1 < customSteps.length) {\n          {\n            newValue = customSteps[stepIndex + 1].value;\n          }\n        }\n      } else if (key === 'ArrowLeft') {\n        if (stepIndex - 1 >= 0) {\n          newValue = customSteps[stepIndex - 1].value;\n        }\n      }\n    } else {\n      if (key === 'ArrowRight') {\n        newValue = localValue + step <= max ? localValue + step : max;\n      } else if (key === 'ArrowLeft') {\n        newValue = localValue - step >= min ? localValue - step : min;\n      }\n    }\n    if (newValue !== localValue) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${newValue}%`);\n      setValue(newValue);\n      if (onChange) {\n        onChange(newValue);\n      }\n    }\n  };\n  const displayInput = () => {\n    const textInput = React.createElement(TextInput, {\n      className: css(styles.formControl),\n      isDisabled: isDisabled,\n      type: \"number\",\n      value: localInputValue,\n      \"aria-label\": inputAriaLabel,\n      onKeyDown: handleKeyPressOnInput,\n      onChange: onChangeHandler,\n      onClick: onInputFocus,\n      onFocus: onInputFocus,\n      onBlur: onBlur\n    });\n    if (inputLabel) {\n      return React.createElement(InputGroup, null, textInput, React.createElement(InputGroupText, Object.assign({}, isDisabled && {\n        className: css(styles.modifiers.disabled)\n      }), ' ', inputLabel));\n    } else {\n      return textInput;\n    }\n  };\n  const getStepValue = (val, min, max) => (val - min) * 100 / (max - min);\n  const buildSteps = () => {\n    const builtSteps = [];\n    for (let i = min; i <= max; i = i + step) {\n      const stepValue = getStepValue(i, min, max);\n      // If we boundaries but not ticks just generate the needed steps\n      // so that we don't pullute them DOM with empty divs\n      if (!showTicks && showBoundaries && i !== min && i !== max) {\n        continue;\n      }\n      builtSteps.push(React.createElement(SliderStep, {\n        key: i,\n        value: stepValue,\n        label: i.toString(),\n        isTickHidden: !showTicks,\n        isLabelHidden: (i === min || i === max) && showBoundaries ? false : true,\n        isActive: i <= localValue\n      }));\n    }\n    return builtSteps;\n  };\n  const thumbComponent = React.createElement(\"div\", {\n    className: css(styles.sliderThumb),\n    ref: thumbRef,\n    tabIndex: isDisabled ? -1 : 0,\n    role: \"slider\",\n    \"aria-valuemin\": customSteps ? customSteps[0].value : min,\n    \"aria-valuemax\": customSteps ? customSteps[customSteps.length - 1].value : max,\n    \"aria-valuenow\": localValue,\n    \"aria-valuetext\": findAriaTextValue(),\n    \"aria-label\": thumbAriaLabel,\n    \"aria-disabled\": isDisabled,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-labelledby\": ariaLabelledby,\n    onMouseDown: !isDisabled ? handleMouseDown : null,\n    onTouchStart: !isDisabled ? handleTouchStart : null,\n    onKeyDown: !isDisabled ? handleThumbKeys : null,\n    onClick: !isDisabled ? onThumbClick : null\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.slider, className, isDisabled && styles.modifiers.disabled),\n    style: Object.assign(Object.assign({}, style), inputStyle)\n  }, props), leftActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, leftActions), React.createElement(\"div\", {\n    className: css(styles.sliderMain)\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRail),\n    ref: sliderRailRef,\n    onClick: !isDisabled ? onSliderRailClick : null\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRailTrack)\n  })), customSteps && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, customSteps.map(stepObj => {\n    const minValue = customSteps[0].value;\n    const maxValue = customSteps[customSteps.length - 1].value;\n    const stepValue = getStepValue(stepObj.value, minValue, maxValue);\n    return React.createElement(SliderStep, {\n      key: stepObj.value,\n      value: stepValue,\n      label: stepObj.label,\n      isLabelHidden: stepObj.isLabelHidden,\n      isActive: stepObj.value <= localValue\n    });\n  })), !customSteps && (showTicks || showBoundaries) && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, buildSteps()), hasTooltipOverThumb ? React.createElement(Tooltip, {\n    entryDelay: 0,\n    content: findAriaTextValue()\n  }, thumbComponent) : thumbComponent, isInputVisible && inputPosition === 'aboveThumb' && React.createElement(\"div\", {\n    className: css(styles.sliderValue, styles.modifiers.floating)\n  }, displayInput())), isInputVisible && inputPosition === 'right' && React.createElement(\"div\", {\n    className: css(styles.sliderValue)\n  }, displayInput()), rightActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, rightActions));\n};\nSlider.displayName = 'Slider';","map":{"version":3,"sources":["../../../../src/components/Slider/Slider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\nconst getPercentage = (current, max) => (100 * current) / max;\nexport const Slider = (_a) => {\n    var { className, value = 0, customSteps, areCustomStepsContinuous = false, isDisabled = false, isInputVisible = false, inputValue = 0, inputLabel, inputAriaLabel = 'Slider value input', thumbAriaLabel = 'Value', hasTooltipOverThumb = false, inputPosition = 'right', onChange, leftActions, rightActions, step = 1, min = 0, max = 100, showTicks = false, showBoundaries = true, 'aria-describedby': ariaDescribedby, 'aria-labelledby': ariaLabelledby } = _a, props = __rest(_a, [\"className\", \"value\", \"customSteps\", \"areCustomStepsContinuous\", \"isDisabled\", \"isInputVisible\", \"inputValue\", \"inputLabel\", \"inputAriaLabel\", \"thumbAriaLabel\", \"hasTooltipOverThumb\", \"inputPosition\", \"onChange\", \"leftActions\", \"rightActions\", \"step\", \"min\", \"max\", \"showTicks\", \"showBoundaries\", 'aria-describedby', 'aria-labelledby']);\n    const sliderRailRef = React.useRef();\n    const thumbRef = React.useRef();\n    const [localValue, setValue] = useState(value);\n    const [localInputValue, setLocalInputValue] = useState(inputValue);\n    React.useEffect(() => {\n        setValue(value);\n    }, [value]);\n    React.useEffect(() => {\n        setLocalInputValue(inputValue);\n    }, [inputValue]);\n    let diff = 0;\n    let snapValue;\n    // calculate style value percentage\n    const stylePercent = ((localValue - min) * 100) / (max - min);\n    const style = { '--pf-c-slider--value': `${stylePercent}%` };\n    const widthChars = React.useMemo(() => localInputValue.toString().length, [localInputValue]);\n    const inputStyle = { '--pf-c-slider__value--c-form-control--width-chars': widthChars };\n    const onChangeHandler = (value) => {\n        setLocalInputValue(Number(value));\n    };\n    const handleKeyPressOnInput = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (onChange) {\n                onChange(localValue, localInputValue, setLocalInputValue);\n            }\n        }\n    };\n    const onInputFocus = (e) => {\n        e.stopPropagation();\n    };\n    const onThumbClick = () => {\n        thumbRef.current.focus();\n    };\n    const onBlur = () => {\n        if (onChange) {\n            onChange(localValue, localInputValue, setLocalInputValue);\n        }\n    };\n    const findAriaTextValue = () => {\n        if (!areCustomStepsContinuous && customSteps) {\n            const matchingStep = customSteps.find(stepObj => stepObj.value === localValue);\n            if (matchingStep) {\n                return matchingStep.label;\n            }\n        }\n        // For continuous steps default to showing 2 decimals in tooltip\n        // Consider making it configurable via a property\n        return Number(Number(localValue).toFixed(2)).toString();\n    };\n    const handleThumbDragEnd = () => {\n        document.removeEventListener('mousemove', callbackThumbMove);\n        document.removeEventListener('mouseup', callbackThumbUp);\n        document.removeEventListener('touchmove', callbackThumbMove);\n        document.removeEventListener('touchend', callbackThumbUp);\n        document.removeEventListener('touchcancel', callbackThumbUp);\n    };\n    const handleMouseDown = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n        document.addEventListener('mousemove', callbackThumbMove);\n        document.addEventListener('mouseup', callbackThumbUp);\n    };\n    const handleTouchStart = (e) => {\n        e.stopPropagation();\n        diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n        document.addEventListener('touchmove', callbackThumbMove, { passive: false });\n        document.addEventListener('touchend', callbackThumbUp);\n        document.addEventListener('touchcancel', callbackThumbUp);\n    };\n    const onSliderRailClick = (e) => {\n        handleThumbMove(e);\n        if (snapValue && !areCustomStepsContinuous) {\n            thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n            setValue(snapValue);\n            if (onChange) {\n                onChange(snapValue);\n            }\n        }\n    };\n    const handleThumbMove = (e) => {\n        if (e.type === 'touchmove') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n        const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n        let newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n        const end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n        const start = 0;\n        if (newPosition < start) {\n            newPosition = 0;\n        }\n        if (newPosition > end) {\n            newPosition = end;\n        }\n        const newPercentage = getPercentage(newPosition, end);\n        thumbRef.current.style.setProperty('--pf-c-slider--value', `${newPercentage}%`);\n        // convert percentage to value\n        const newValue = Math.round(((newPercentage * (max - min)) / 100 + min) * 100) / 100;\n        setValue(newValue);\n        if (!customSteps) {\n            // snap to new value if not custom steps\n            snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n            thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n            setValue(snapValue);\n        }\n        /* If custom steps are discrete, snap to closest step value */\n        if (!areCustomStepsContinuous && customSteps) {\n            let percentage = newPercentage;\n            if (customSteps[customSteps.length - 1].value !== 100) {\n                percentage = (newPercentage * (max - min)) / 100 + min;\n            }\n            const stepIndex = customSteps.findIndex(stepObj => stepObj.value >= percentage);\n            if (customSteps[stepIndex].value === percentage) {\n                snapValue = customSteps[stepIndex].value;\n            }\n            else {\n                const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n                if (midpoint > percentage) {\n                    snapValue = customSteps[stepIndex - 1].value;\n                }\n                else {\n                    snapValue = customSteps[stepIndex].value;\n                }\n            }\n            setValue(snapValue);\n        }\n        // Call onchange callback\n        if (onChange) {\n            if (snapValue !== undefined) {\n                onChange(snapValue);\n            }\n            else {\n                onChange(newValue);\n            }\n        }\n    };\n    const callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n    const callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n    const handleThumbKeys = (e) => {\n        const key = e.key;\n        if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n            return;\n        }\n        e.preventDefault();\n        let newValue = localValue;\n        if (!areCustomStepsContinuous && customSteps) {\n            const stepIndex = customSteps.findIndex(stepObj => stepObj.value === localValue);\n            if (key === 'ArrowRight') {\n                if (stepIndex + 1 < customSteps.length) {\n                    {\n                        newValue = customSteps[stepIndex + 1].value;\n                    }\n                }\n            }\n            else if (key === 'ArrowLeft') {\n                if (stepIndex - 1 >= 0) {\n                    newValue = customSteps[stepIndex - 1].value;\n                }\n            }\n        }\n        else {\n            if (key === 'ArrowRight') {\n                newValue = localValue + step <= max ? localValue + step : max;\n            }\n            else if (key === 'ArrowLeft') {\n                newValue = localValue - step >= min ? localValue - step : min;\n            }\n        }\n        if (newValue !== localValue) {\n            thumbRef.current.style.setProperty('--pf-c-slider--value', `${newValue}%`);\n            setValue(newValue);\n            if (onChange) {\n                onChange(newValue);\n            }\n        }\n    };\n    const displayInput = () => {\n        const textInput = (React.createElement(TextInput, { className: css(styles.formControl), isDisabled: isDisabled, type: \"number\", value: localInputValue, \"aria-label\": inputAriaLabel, onKeyDown: handleKeyPressOnInput, onChange: onChangeHandler, onClick: onInputFocus, onFocus: onInputFocus, onBlur: onBlur }));\n        if (inputLabel) {\n            return (React.createElement(InputGroup, null,\n                textInput,\n                React.createElement(InputGroupText, Object.assign({}, (isDisabled && { className: css(styles.modifiers.disabled) })),\n                    ' ',\n                    inputLabel)));\n        }\n        else {\n            return textInput;\n        }\n    };\n    const getStepValue = (val, min, max) => ((val - min) * 100) / (max - min);\n    const buildSteps = () => {\n        const builtSteps = [];\n        for (let i = min; i <= max; i = i + step) {\n            const stepValue = getStepValue(i, min, max);\n            // If we boundaries but not ticks just generate the needed steps\n            // so that we don't pullute them DOM with empty divs\n            if (!showTicks && showBoundaries && i !== min && i !== max) {\n                continue;\n            }\n            builtSteps.push(React.createElement(SliderStep, { key: i, value: stepValue, label: i.toString(), isTickHidden: !showTicks, isLabelHidden: (i === min || i === max) && showBoundaries ? false : true, isActive: i <= localValue }));\n        }\n        return builtSteps;\n    };\n    const thumbComponent = (React.createElement(\"div\", { className: css(styles.sliderThumb), ref: thumbRef, tabIndex: isDisabled ? -1 : 0, role: \"slider\", \"aria-valuemin\": customSteps ? customSteps[0].value : min, \"aria-valuemax\": customSteps ? customSteps[customSteps.length - 1].value : max, \"aria-valuenow\": localValue, \"aria-valuetext\": findAriaTextValue(), \"aria-label\": thumbAriaLabel, \"aria-disabled\": isDisabled, \"aria-describedby\": ariaDescribedby, \"aria-labelledby\": ariaLabelledby, onMouseDown: !isDisabled ? handleMouseDown : null, onTouchStart: !isDisabled ? handleTouchStart : null, onKeyDown: !isDisabled ? handleThumbKeys : null, onClick: !isDisabled ? onThumbClick : null }));\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.slider, className, isDisabled && styles.modifiers.disabled), style: Object.assign(Object.assign({}, style), inputStyle) }, props),\n        leftActions && React.createElement(\"div\", { className: css(styles.sliderActions) }, leftActions),\n        React.createElement(\"div\", { className: css(styles.sliderMain) },\n            React.createElement(\"div\", { className: css(styles.sliderRail), ref: sliderRailRef, onClick: !isDisabled ? onSliderRailClick : null },\n                React.createElement(\"div\", { className: css(styles.sliderRailTrack) })),\n            customSteps && (React.createElement(\"div\", { className: css(styles.sliderSteps), \"aria-hidden\": \"true\" }, customSteps.map(stepObj => {\n                const minValue = customSteps[0].value;\n                const maxValue = customSteps[customSteps.length - 1].value;\n                const stepValue = getStepValue(stepObj.value, minValue, maxValue);\n                return (React.createElement(SliderStep, { key: stepObj.value, value: stepValue, label: stepObj.label, isLabelHidden: stepObj.isLabelHidden, isActive: stepObj.value <= localValue }));\n            }))),\n            !customSteps && (showTicks || showBoundaries) && (React.createElement(\"div\", { className: css(styles.sliderSteps), \"aria-hidden\": \"true\" }, buildSteps())),\n            hasTooltipOverThumb ? (React.createElement(Tooltip, { entryDelay: 0, content: findAriaTextValue() }, thumbComponent)) : (thumbComponent),\n            isInputVisible && inputPosition === 'aboveThumb' && (React.createElement(\"div\", { className: css(styles.sliderValue, styles.modifiers.floating) }, displayInput()))),\n        isInputVisible && inputPosition === 'right' && React.createElement(\"div\", { className: css(styles.sliderValue) }, displayInput()),\n        rightActions && React.createElement(\"div\", { className: css(styles.sliderActions) }, rightActions)));\n};\nSlider.displayName = 'Slider';\n//# sourceMappingURL=Slider.js.map"]},"metadata":{},"sourceType":"module"}