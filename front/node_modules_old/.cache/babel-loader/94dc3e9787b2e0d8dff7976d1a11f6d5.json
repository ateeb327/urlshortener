{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport var Weekday;\n(function (Weekday) {\n  Weekday[Weekday[\"Sunday\"] = 0] = \"Sunday\";\n  Weekday[Weekday[\"Monday\"] = 1] = \"Monday\";\n  Weekday[Weekday[\"Tuesday\"] = 2] = \"Tuesday\";\n  Weekday[Weekday[\"Wednesday\"] = 3] = \"Wednesday\";\n  Weekday[Weekday[\"Thursday\"] = 4] = \"Thursday\";\n  Weekday[Weekday[\"Friday\"] = 5] = \"Friday\";\n  Weekday[Weekday[\"Saturday\"] = 6] = \"Saturday\";\n})(Weekday || (Weekday = {}));\n// Must be numeric given current header design\nconst yearFormat = date => date.getFullYear();\nconst buildCalendar = (year, month, weekStart, validators) => {\n  const defaultDate = new Date(year, month);\n  const firstDayOfWeek = new Date(defaultDate);\n  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);\n  // We will show a maximum of 6 weeks like Google calendar\n  // Assume we just want the numbers for now...\n  const calendarWeeks = [];\n  if (firstDayOfWeek.getMonth() === defaultDate.getMonth() && firstDayOfWeek.getDate() !== 1) {\n    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 7);\n  }\n  for (let i = 0; i < 6; i++) {\n    const week = [];\n    for (let j = 0; j < 7; j++) {\n      const date = new Date(firstDayOfWeek);\n      week.push({\n        date,\n        isValid: validators.every(validator => validator(date))\n      });\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n    calendarWeeks.push(week);\n    if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {\n      break;\n    }\n  }\n  return calendarWeeks;\n};\nconst isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\nconst today = new Date();\n/** The main calendar month component. */\nexport const CalendarMonth = _a => {\n  var {\n      date: dateProp,\n      locale = undefined,\n      monthFormat = date => date.toLocaleDateString(locale, {\n        month: 'long'\n      }),\n      weekdayFormat = date => date.toLocaleDateString(locale, {\n        weekday: 'narrow'\n      }),\n      longWeekdayFormat = date => date.toLocaleDateString(locale, {\n        weekday: 'long'\n      }),\n      dayFormat = date => date.getDate(),\n      weekStart = 0,\n      // Use the American Sunday as a default\n      onChange = () => {},\n      validators = [() => true],\n      className,\n      onSelectToggle = () => {},\n      onMonthChange = () => {},\n      rangeStart,\n      prevMonthAriaLabel = 'Previous month',\n      nextMonthAriaLabel = 'Next month',\n      yearInputAriaLabel = 'Select year',\n      cellAriaLabel,\n      isDateFocused = false,\n      inlineProps\n    } = _a,\n    props = __rest(_a, [\"date\", \"locale\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"onChange\", \"validators\", \"className\", \"onSelectToggle\", \"onMonthChange\", \"rangeStart\", \"prevMonthAriaLabel\", \"nextMonthAriaLabel\", \"yearInputAriaLabel\", \"cellAriaLabel\", \"isDateFocused\", \"inlineProps\"]);\n  const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthNum => new Date(1990, monthNum)).map(monthFormat);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  // eslint-disable-next-line prefer-const\n  const [focusedDate, setFocusedDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n    if (isValidDate(initDate)) {\n      return initDate;\n    } else {\n      if (isValidDate(rangeStart)) {\n        return rangeStart;\n      } else {\n        return today;\n      }\n    }\n  });\n  const [hoveredDate, setHoveredDate] = React.useState(new Date(focusedDate));\n  const focusRef = React.useRef();\n  const [hiddenMonthId] = React.useState(getUniqueId('hidden-month-span'));\n  const [shouldFocus, setShouldFocus] = React.useState(false);\n  const isValidated = date => validators.every(validator => validator(date));\n  const focusedDateValidated = isValidated(focusedDate);\n  useEffect(() => {\n    if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {\n      setFocusedDate(dateProp);\n    } else if (!dateProp) {\n      setFocusedDate(today);\n    }\n  }, [dateProp]);\n  useEffect(() => {\n    // Calendar month should not be focused on page load\n    // Datepicker should place focus in calendar month when opened\n    if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {\n      focusRef.current.focus();\n    } else {\n      setShouldFocus(true);\n    }\n  }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);\n  const onMonthClick = (newDate, ev) => {\n    setFocusedDate(newDate);\n    setHoveredDate(newDate);\n    setShouldFocus(false);\n    onMonthChange(newDate, ev);\n  };\n  const onKeyDown = ev => {\n    const newDate = new Date(focusedDate);\n    if (ev.key === 'ArrowUp') {\n      newDate.setDate(newDate.getDate() - 7);\n    } else if (ev.key === 'ArrowRight') {\n      newDate.setDate(newDate.getDate() + 1);\n    } else if (ev.key === 'ArrowDown') {\n      newDate.setDate(newDate.getDate() + 7);\n    } else if (ev.key === 'ArrowLeft') {\n      newDate.setDate(newDate.getDate() - 1);\n    }\n    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n      ev.preventDefault();\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(true);\n    }\n  };\n  const addMonth = toAdd => {\n    const newDate = new Date(focusedDate);\n    newDate.setMonth(newDate.getMonth() + toAdd);\n    return newDate;\n  };\n  const prevMonth = addMonth(-1);\n  const nextMonth = addMonth(1);\n  const focusedYear = focusedDate.getFullYear();\n  const focusedMonth = focusedDate.getMonth();\n  const calendar = React.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [focusedYear, focusedMonth, weekStart, validators]);\n  if (!focusedDateValidated) {\n    const toFocus = calendar.reduce((acc, cur) => [...acc, ...cur], []).filter(({\n      date,\n      isValid\n    }) => isValid && date.getMonth() === focusedMonth).map(({\n      date\n    }) => ({\n      date,\n      days: Math.abs(focusedDate.getTime() - date.getTime())\n    })).sort((o1, o2) => o1.days - o2.days).map(({\n      date\n    }) => date)[0];\n    if (toFocus) {\n      setFocusedDate(toFocus);\n      setHoveredDate(toFocus);\n    }\n  }\n  const isHoveredDateValid = isValidated(hoveredDate);\n  const monthFormatted = monthFormat(focusedDate);\n  const yearFormatted = yearFormat(focusedDate);\n  const calendarToRender = React.createElement(\"div\", Object.assign({\n    className: css(styles.calendarMonth, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.calendarMonthHeader\n  }, React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": prevMonthAriaLabel,\n    onClick: ev => onMonthClick(prevMonth, ev)\n  }, React.createElement(AngleLeftIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(InputGroup, null, React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderMonth\n  }, React.createElement(\"span\", {\n    id: hiddenMonthId,\n    hidden: true\n  }, \"Month\"), React.createElement(Select\n  // Max width with \"September\"\n  , {\n    // Max width with \"September\"\n    width: \"140px\",\n    \"aria-labelledby\": hiddenMonthId,\n    isOpen: isSelectOpen,\n    onToggle: () => {\n      setIsSelectOpen(!isSelectOpen);\n      onSelectToggle(!isSelectOpen);\n    },\n    onSelect: (ev, monthNum) => {\n      // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n      // to see the SelectOption as a child so it doesn't close the Popover.\n      setTimeout(() => {\n        setIsSelectOpen(false);\n        onSelectToggle(false);\n        const newDate = new Date(focusedDate);\n        newDate.setMonth(Number(monthNum));\n        setFocusedDate(newDate);\n        setHoveredDate(newDate);\n        setShouldFocus(false);\n        onMonthChange(newDate, ev);\n      }, 0);\n    },\n    variant: \"single\",\n    selections: monthFormatted\n  }, longMonths.map((longMonth, index) => React.createElement(SelectOption, {\n    key: index,\n    value: index,\n    isSelected: longMonth === monthFormatted\n  }, longMonth)))), React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderYear\n  }, React.createElement(TextInput, {\n    \"aria-label\": yearInputAriaLabel,\n    type: \"number\",\n    value: yearFormatted,\n    onChange: (year, ev) => {\n      const newDate = new Date(focusedDate);\n      newDate.setFullYear(+year);\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(false);\n      onMonthChange(newDate, ev);\n    }\n  }))), React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": nextMonthAriaLabel,\n    onClick: ev => onMonthClick(nextMonth, ev)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  })))), React.createElement(\"table\", {\n    className: styles.calendarMonthCalendar\n  }, React.createElement(\"thead\", {\n    className: styles.calendarMonthDays\n  }, React.createElement(\"tr\", null, calendar[0].map(({\n    date\n  }, index) => React.createElement(\"th\", {\n    key: index,\n    className: styles.calendarMonthDay,\n    scope: \"col\"\n  }, React.createElement(\"span\", {\n    className: \"pf-screen-reader\"\n  }, longWeekdayFormat(date)), React.createElement(\"span\", {\n    \"aria-hidden\": true\n  }, weekdayFormat(date)))))), React.createElement(\"tbody\", {\n    onKeyDown: onKeyDown\n  }, calendar.map((week, index) => React.createElement(\"tr\", {\n    key: index,\n    className: styles.calendarMonthDatesRow\n  }, week.map(({\n    date,\n    isValid\n  }, index) => {\n    const dayFormatted = dayFormat(date);\n    const isToday = isSameDate(date, today);\n    const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n    const isFocused = isSameDate(date, focusedDate);\n    const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n    const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);\n    let isInRange = false;\n    let isRangeEnd = false;\n    if (isValidDate(rangeStart) && isValidDate(dateProp)) {\n      isInRange = date > rangeStart && date < dateProp;\n      isRangeEnd = isSameDate(date, dateProp);\n    } else if (isValidDate(rangeStart) && isHoveredDateValid) {\n      if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n        isInRange = date > rangeStart && date < hoveredDate;\n        isRangeEnd = isSameDate(date, hoveredDate);\n      }\n      // Don't handle focused dates before start dates for now.\n      // Core would likely need new styles\n    }\n    return React.createElement(\"td\", {\n      key: index,\n      className: css(styles.calendarMonthDatesCell, isAdjacentMonth && styles.modifiers.adjacentMonth, isToday && styles.modifiers.current, (isSelected || isRangeStart) && styles.modifiers.selected, !isValid && styles.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange, isRangeStart && styles.modifiers.startRange, isRangeEnd && styles.modifiers.endRange)\n    }, React.createElement(\"button\", Object.assign({\n      className: css(styles.calendarMonthDate, isRangeEnd && styles.modifiers.hover, !isValid && styles.modifiers.disabled),\n      type: \"button\",\n      onClick: () => onChange(date),\n      onMouseOver: () => setHoveredDate(date),\n      tabIndex: isFocused ? 0 : -1,\n      disabled: !isValid,\n      \"aria-label\": cellAriaLabel ? cellAriaLabel(date) : `${dayFormat(date)} ${monthFormat(date)} ${yearFormat(date)}`\n    }, isFocused && {\n      ref: focusRef\n    }), dayFormatted));\n  }))))));\n  if (inlineProps !== undefined) {\n    const Component = inlineProps.component ? inlineProps.component : 'article';\n    return React.createElement(Component, Object.assign({}, inlineProps.ariaLabelledby && {\n      'aria-labelledby': inlineProps.ariaLabelledby\n    }), inlineProps.title, calendarToRender);\n  }\n  return calendarToRender;\n};\nCalendarMonth.displayName = 'CalendarMonth';","map":{"version":3,"sources":["../../../../src/components/CalendarMonth/CalendarMonth.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,IAAI,SAAS,QAAQ,OAAO;AACxC,SAAS,SAAS,QAAQ,wBAAwB;AAClD,SAAS,MAAM,QAAQ,kBAAkB;AACzC,SAAS,MAAM,EAAE,YAAY,QAAQ,WAAW;AAChD,SAAS,UAAU,QAAQ,eAAe;AAC1C,OAAO,aAAa,MAAM,wDAAwD;AAClF,OAAO,cAAc,MAAM,yDAAyD;AACpF,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,sEAAsE;AACzF,SAAS,WAAW,QAAQ,oBAAoB;AAChD,SAAS,WAAW,QAAQ,6BAA6B;AAEzD,OAAA,IAAY,OAQX;AARD,CAAA,UAAY,OAAO,EAAA;EACjB,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAU;EACV,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM;EACN,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAO;EACP,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAS;EACT,OAAA,CAAA,OAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ;EACR,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM;EACN,OAAA,CAAA,OAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ;AACV,CAAC,EARW,OAAO,KAAP,OAAO,GAAA,CAAA,CAAA,CAAA,CAAA;AAwEnB;AACA,MAAM,UAAU,GAAI,IAAU,IAAK,IAAI,CAAC,WAAW,CAAA,CAAE;AAErD,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,KAAa,EAAE,SAAiB,EAAE,UAAuC,KAAI;EAChH,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;EAEzC,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC;EAC5C,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAA,CAAE,GAAG,cAAc,CAAC,MAAM,CAAA,CAAE,GAAG,SAAS,CAAC;EAEtF;EACA;EACA,MAAM,aAAa,GAAG,EAAE;EAExB,IAAI,cAAc,CAAC,QAAQ,CAAA,CAAE,KAAK,WAAW,CAAC,QAAQ,CAAA,CAAE,IAAI,cAAc,CAAC,OAAO,CAAA,CAAE,KAAK,CAAC,EAAE;IAC1F,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAA,CAAE,GAAG,CAAC,CAAC;EACrD;EACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAC1B,MAAM,IAAI,GAAG,EAAE;IAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;MAC1B,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC;MACrC,IAAI,CAAC,IAAI,CAAC;QACR,IAAI;QACJ,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC;OACvD,CAAC;MACF,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAA,CAAE,GAAG,CAAC,CAAC;IACrD;IACD,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;IACxB,IAAI,cAAc,CAAC,QAAQ,CAAA,CAAE,KAAK,WAAW,CAAC,QAAQ,CAAA,CAAE,EAAE;MACxD;IACD;EACF;EAED,OAAO,aAAa;AACtB,CAAC;AAED,MAAM,UAAU,GAAG,CAAC,EAAQ,EAAE,EAAQ,KACpC,EAAE,CAAC,WAAW,CAAA,CAAE,KAAK,EAAE,CAAC,WAAW,CAAA,CAAE,IAAI,EAAE,CAAC,QAAQ,CAAA,CAAE,KAAK,EAAE,CAAC,QAAQ,CAAA,CAAE,IAAI,EAAE,CAAC,OAAO,CAAA,CAAE,KAAK,EAAE,CAAC,OAAO,CAAA,CAAE;AAE3G,MAAM,KAAK,GAAG,IAAI,IAAI,CAAA,CAAE;AAExB;AAEA,OAAO,MAAM,aAAa,GAAI,EAqBd,IAAI;MArBU;MAC5B,IAAI,EAAE,QAAQ;MACd,MAAM,GAAG,SAAS;MAClB,WAAW,GAAG,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;QAAE,KAAK,EAAE;MAAM,CAAE,CAAC;MACxE,aAAa,GAAG,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;QAAE,OAAO,EAAE;MAAQ,CAAE,CAAC;MAC9E,iBAAiB,GAAG,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;QAAE,OAAO,EAAE;MAAM,CAAE,CAAC;MAChF,SAAS,GAAG,IAAI,IAAI,IAAI,CAAC,OAAO,CAAA,CAAE;MAClC,SAAS,GAAG,CAAC;MAAE;MACf,QAAQ,GAAG,CAAA,KAAK,CAAE,CAAC;MACnB,UAAU,GAAG,CAAC,MAAM,IAAI,CAAC;MACzB,SAAS;MACT,cAAc,GAAG,CAAA,KAAK,CAAE,CAAC;MACzB,aAAa,GAAG,CAAA,KAAK,CAAE,CAAC;MACxB,UAAU;MACV,kBAAkB,GAAG,gBAAgB;MACrC,kBAAkB,GAAG,YAAY;MACjC,kBAAkB,GAAG,aAAa;MAClC,aAAa;MACb,aAAa,GAAG,KAAK;MACrB;IAAW,CAAA,GAAA,EAEG;IADX,KAAK,GAAA,MAAA,CAAA,EAAA,EApBoB,CAAA,MAAA,EAAA,QAAA,EAAA,aAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,WAAA,EAAA,UAAA,EAAA,YAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,YAAA,EAAA,oBAAA,EAAA,oBAAA,EAAA,oBAAA,EAAA,eAAA,EAAA,eAAA,EAAA,aAAA,CAqB7B,CADS;EAER,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC;EACpH,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;EAC7D;EACA,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAK;IACxD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC;IACnC,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE;MACzB,OAAO,QAAQ;KAChB,MAAM;MACL,IAAI,WAAW,CAAC,UAAU,CAAC,EAAE;QAC3B,OAAO,UAAU;OAClB,MAAM;QACL,OAAO,KAAK;MACb;IACF;EACH,CAAC,CAAC;EACF,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;EAC3E,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAA,CAAqB;EAClD,MAAM,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;EACxE,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAM,WAAW,GAAI,IAAU,IAAK,UAAU,CAAC,KAAK,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;EAClF,MAAM,oBAAoB,GAAG,WAAW,CAAC,WAAW,CAAC;EACrD,SAAS,CAAC,MAAK;IACb,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC,EAAE;MAC/D,cAAc,CAAC,QAAQ,CAAC;KACzB,MAAM,IAAI,CAAC,QAAQ,EAAE;MACpB,cAAc,CAAC,KAAK,CAAC;IACtB;EACH,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;EAEd,SAAS,CAAC,MAAK;IACb;IACA;IACA,IAAI,CAAC,WAAW,IAAI,aAAa,KAAK,oBAAoB,IAAI,QAAQ,CAAC,OAAO,EAAE;MAC9E,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAA,CAAE;KACzB,MAAM;MACL,cAAc,CAAC,IAAI,CAAC;IACrB;EACH,CAAC,EAAE,CAAC,WAAW,EAAE,aAAa,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;EAEhE,MAAM,YAAY,GAAG,CAAC,OAAa,EAAE,EAAoB,KAAI;IAC3D,cAAc,CAAC,OAAO,CAAC;IACvB,cAAc,CAAC,OAAO,CAAC;IACvB,cAAc,CAAC,KAAK,CAAC;IACrB,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;EAC5B,CAAC;EAED,MAAM,SAAS,GAAI,EAAgD,IAAI;IACrE,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC;IACrC,IAAI,EAAE,CAAC,GAAG,KAAK,SAAS,EAAE;MACxB,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAA,CAAE,GAAG,CAAC,CAAC;KACvC,MAAM,IAAI,EAAE,CAAC,GAAG,KAAK,YAAY,EAAE;MAClC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAA,CAAE,GAAG,CAAC,CAAC;KACvC,MAAM,IAAI,EAAE,CAAC,GAAG,KAAK,WAAW,EAAE;MACjC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAA,CAAE,GAAG,CAAC,CAAC;KACvC,MAAM,IAAI,EAAE,CAAC,GAAG,KAAK,WAAW,EAAE;MACjC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAA,CAAE,GAAG,CAAC,CAAC;IACvC;IACD,IAAI,OAAO,CAAC,OAAO,CAAA,CAAE,KAAK,WAAW,CAAC,OAAO,CAAA,CAAE,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE;MACvE,EAAE,CAAC,cAAc,CAAA,CAAE;MACnB,cAAc,CAAC,OAAO,CAAC;MACvB,cAAc,CAAC,OAAO,CAAC;MACvB,cAAc,CAAC,IAAI,CAAC;IACrB;EACH,CAAC;EAED,MAAM,QAAQ,GAAI,KAAa,IAAI;IACjC,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC;IACrC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAA,CAAE,GAAG,KAAK,CAAC;IAC5C,OAAO,OAAO;EAChB,CAAC;EAED,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9B,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;EAC7B,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAA,CAAE;EAC7C,MAAM,YAAY,GAAG,WAAW,CAAC,QAAQ,CAAA,CAAE;EAC3C,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE,CACpG,WAAW,EACX,YAAY,EACZ,SAAS,EACT,UAAU,CACX,CAAC;EACF,IAAI,CAAC,oBAAoB,EAAE;IACzB,MAAM,OAAO,GAAG,QAAQ,CACrB,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,CAC1C,MAAM,CAAC,CAAC;MAAE,IAAI;MAAE;IAAO,CAAE,KAAK,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAA,CAAE,KAAK,YAAY,CAAC,CAC1E,GAAG,CAAC,CAAC;MAAE;IAAI,CAAE,MAAM;MAAE,IAAI;MAAE,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAA,CAAE,GAAG,IAAI,CAAC,OAAO,CAAA,CAAE;IAAC,CAAE,CAAC,CAAC,CACrF,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,CACnC,GAAG,CAAC,CAAC;MAAE;IAAI,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7B,IAAI,OAAO,EAAE;MACX,cAAc,CAAC,OAAO,CAAC;MACvB,cAAc,CAAC,OAAO,CAAC;IACxB;EACF;EACD,MAAM,kBAAkB,GAAG,WAAW,CAAC,WAAW,CAAC;EACnD,MAAM,cAAc,GAAG,WAAW,CAAC,WAAW,CAAC;EAC/C,MAAM,aAAa,GAAG,UAAU,CAAC,WAAW,CAAC;EAE7C,MAAM,gBAAgB,GACpB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS;EAAC,CAAA,EAAM,KAAK,CAAA,EAC7D,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,MAAM,CAAC;EAAmB,CAAA,EACxC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,SAAS,CAAC,SAAS;EAAC,CAAA,EACnF,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;IACL,OAAO,EAAC,OAAO;IAAA,YAAA,EACH,kBAAkB;IAC9B,OAAO,EAAG,EAAoB,IAAK,YAAY,CAAC,SAAS,EAAE,EAAE;EAAC,CAAA,EAE9D,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA;IAAA,aAAA,EAAc;EAAI,CAAA,CAAI,CAC7B,CACL,EACN,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA,IAAA,EACT,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,MAAM,CAAC;EAAwB,CAAA,EAC7C,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,EAAE,EAAE,aAAa;IAAE,MAAM,EAAA;EAAA,CAAA,EAAA,OAAA,CAExB,EACP,KAAA,CAAA,aAAA,CAAC;EACC;EAAA,E;IAAA;IACA,KAAK,EAAC,OAAO;IAAA,iBAAA,EACI,aAAa;IAC9B,MAAM,EAAE,YAAY;IACpB,QAAQ,EAAE,CAAA,KAAK;MACb,eAAe,CAAC,CAAC,YAAY,CAAC;MAC9B,cAAc,CAAC,CAAC,YAAY,CAAC;IAC/B,CAAC;IACD,QAAQ,EAAE,CAAC,EAAE,EAAE,QAAQ,KAAI;MACzB;MACA;MACA,UAAU,CAAC,MAAK;QACd,eAAe,CAAC,KAAK,CAAC;QACtB,cAAc,CAAC,KAAK,CAAC;QACrB,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC;QACrC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAkB,CAAC,CAAC;QAC5C,cAAc,CAAC,OAAO,CAAC;QACvB,cAAc,CAAC,OAAO,CAAC;QACvB,cAAc,CAAC,KAAK,CAAC;QACrB,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;MAC5B,CAAC,EAAE,CAAC,CAAC;IACP,CAAC;IACD,OAAO,EAAC,QAAQ;IAChB,UAAU,EAAE;EAAc,CAAA,EAEzB,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,KAAK,KAC/B,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA;IAAC,GAAG,EAAE,KAAK;IAAE,KAAK,EAAE,KAAK;IAAE,UAAU,EAAE,SAAS,KAAK;EAAc,CAAA,EAC7E,SAAS,CAEb,CAAC,CACK,CACL,EACN,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,MAAM,CAAC;EAAuB,CAAA,EAC5C,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IAAA,YAAA,EACI,kBAAkB;IAC9B,IAAI,EAAC,QAAQ;IACb,KAAK,EAAE,aAAa;IACpB,QAAQ,EAAE,CAAC,IAAY,EAAE,EAAqC,KAAI;MAChE,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC;MACrC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;MAC1B,cAAc,CAAC,OAAO,CAAC;MACvB,cAAc,CAAC,OAAO,CAAC;MACvB,cAAc,CAAC,KAAK,CAAC;MACrB,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;IAC5B;EAAC,CAAA,CACD,CACE,CACK,EACb,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,SAAS,CAAC,SAAS;EAAC,CAAA,EACnF,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;IACL,OAAO,EAAC,OAAO;IAAA,YAAA,EACH,kBAAkB;IAC9B,OAAO,EAAG,EAAoB,IAAK,YAAY,CAAC,SAAS,EAAE,EAAE;EAAC,CAAA,EAE9D,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA;IAAA,aAAA,EAAc;EAAI,CAAA,CAAI,CAC9B,CACL,CACF,EACN,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;IAAO,SAAS,EAAE,MAAM,CAAC;EAAqB,CAAA,EAC5C,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;IAAO,SAAS,EAAE,MAAM,CAAC;EAAiB,CAAA,EACxC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAAE;EAAI,CAAE,EAAE,KAAK,KAC/B,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAI,GAAG,EAAE,KAAK;IAAE,SAAS,EAAE,MAAM,CAAC,gBAAgB;IAAE,KAAK,EAAC;EAAK,CAAA,EAC7D,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAkB,CAAA,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAQ,EACnE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAA,aAAA,EAAA;EAAA,CAAA,EAAmB,aAAa,CAAC,IAAI,CAAC,CAAQ,CAEjD,CAAC,CACC,CACC,EACR,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;IAAO,SAAS,EAAE;EAAS,CAAA,EACxB,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,KACxB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAI,GAAG,EAAE,KAAK;IAAE,SAAS,EAAE,MAAM,CAAC;EAAqB,CAAA,EACpD,IAAI,CAAC,GAAG,CAAC,CAAC;IAAE,IAAI;IAAE;EAAO,CAAE,EAAE,KAAK,KAAI;IACrC,MAAM,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC;IACpC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;IACvC,MAAM,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC;IACtE,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,EAAE,WAAW,CAAC;IAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAA,CAAE,KAAK,WAAW,CAAC,QAAQ,CAAA,CAAE;IAClE,MAAM,YAAY,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC;IAC5E,IAAI,SAAS,GAAG,KAAK;IACrB,IAAI,UAAU,GAAG,KAAK;IACtB,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE;MACpD,SAAS,GAAG,IAAI,GAAG,UAAU,IAAI,IAAI,GAAG,QAAQ;MAChD,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC;KACxC,MAAM,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,kBAAkB,EAAE;MACxD,IAAI,WAAW,GAAG,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE;QACnE,SAAS,GAAG,IAAI,GAAG,UAAU,IAAI,IAAI,GAAG,WAAW;QACnD,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,WAAW,CAAC;MAC3C;MACD;MACA;IACD;IAED,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MACE,GAAG,EAAE,KAAK;MACV,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,sBAAsB,EAC7B,eAAe,IAAI,MAAM,CAAC,SAAS,CAAC,aAAa,EACjD,OAAO,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,EACnC,CAAC,UAAU,IAAI,YAAY,KAAK,MAAM,CAAC,SAAS,CAAC,QAAQ,EACzD,CAAC,OAAO,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,EACrC,CAAC,SAAS,IAAI,YAAY,IAAI,UAAU,KAAK,MAAM,CAAC,SAAS,CAAC,OAAO,EACrE,YAAY,IAAI,MAAM,CAAC,SAAS,CAAC,UAAU,EAC3C,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ;IACxC,CAAA,EAED,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MACE,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,iBAAiB,EACxB,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,EACpC,CAAC,OAAO,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CACtC;MACD,IAAI,EAAC,QAAQ;MACb,OAAO,EAAE,CAAA,KAAM,QAAQ,CAAC,IAAI,CAAC;MAC7B,WAAW,EAAE,CAAA,KAAM,cAAc,CAAC,IAAI,CAAC;MACvC,QAAQ,EAAE,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;MAC5B,QAAQ,EAAE,CAAC,OAAO;MAAA,YAAA,EAEhB,aAAa,GACT,aAAa,CAAC,IAAI,CAAC,GACnB,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC;IAAE,CAAA,EAE9D,SAAS,IAAI;MAAE,GAAG,EAAE;IAAQ,CAAG,CAAA,EAEnC,YAAY,CACN,CACN;EAET,CAAC,CAAC,CAEL,CAAC,CACI,CACF,CAEX;EAED,IAAI,WAAW,KAAK,SAAS,EAAE;IAC7B,MAAM,SAAS,GAAI,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,GAAG,SAAiB;IACpF,OACE,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAM,WAAW,CAAC,cAAc,IAAI;MAAE,iBAAiB,EAAE,WAAW,CAAC;IAAc,CAAG,CAAA,EAC7F,WAAW,CAAC,KAAK,EACjB,gBAAgB,CACP;EAEf;EACD,OAAO,gBAAgB;AACzB,CAAC;AACD,aAAa,CAAC,WAAW,GAAG,eAAe","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport var Weekday;\n(function (Weekday) {\n    Weekday[Weekday[\"Sunday\"] = 0] = \"Sunday\";\n    Weekday[Weekday[\"Monday\"] = 1] = \"Monday\";\n    Weekday[Weekday[\"Tuesday\"] = 2] = \"Tuesday\";\n    Weekday[Weekday[\"Wednesday\"] = 3] = \"Wednesday\";\n    Weekday[Weekday[\"Thursday\"] = 4] = \"Thursday\";\n    Weekday[Weekday[\"Friday\"] = 5] = \"Friday\";\n    Weekday[Weekday[\"Saturday\"] = 6] = \"Saturday\";\n})(Weekday || (Weekday = {}));\n// Must be numeric given current header design\nconst yearFormat = (date) => date.getFullYear();\nconst buildCalendar = (year, month, weekStart, validators) => {\n    const defaultDate = new Date(year, month);\n    const firstDayOfWeek = new Date(defaultDate);\n    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);\n    // We will show a maximum of 6 weeks like Google calendar\n    // Assume we just want the numbers for now...\n    const calendarWeeks = [];\n    if (firstDayOfWeek.getMonth() === defaultDate.getMonth() && firstDayOfWeek.getDate() !== 1) {\n        firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 7);\n    }\n    for (let i = 0; i < 6; i++) {\n        const week = [];\n        for (let j = 0; j < 7; j++) {\n            const date = new Date(firstDayOfWeek);\n            week.push({\n                date,\n                isValid: validators.every(validator => validator(date))\n            });\n            firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n        }\n        calendarWeeks.push(week);\n        if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {\n            break;\n        }\n    }\n    return calendarWeeks;\n};\nconst isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\nconst today = new Date();\n/** The main calendar month component. */\nexport const CalendarMonth = (_a) => {\n    var { date: dateProp, locale = undefined, monthFormat = date => date.toLocaleDateString(locale, { month: 'long' }), weekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'narrow' }), longWeekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'long' }), dayFormat = date => date.getDate(), weekStart = 0, // Use the American Sunday as a default\n    onChange = () => { }, validators = [() => true], className, onSelectToggle = () => { }, onMonthChange = () => { }, rangeStart, prevMonthAriaLabel = 'Previous month', nextMonthAriaLabel = 'Next month', yearInputAriaLabel = 'Select year', cellAriaLabel, isDateFocused = false, inlineProps } = _a, props = __rest(_a, [\"date\", \"locale\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"onChange\", \"validators\", \"className\", \"onSelectToggle\", \"onMonthChange\", \"rangeStart\", \"prevMonthAriaLabel\", \"nextMonthAriaLabel\", \"yearInputAriaLabel\", \"cellAriaLabel\", \"isDateFocused\", \"inlineProps\"]);\n    const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthNum => new Date(1990, monthNum)).map(monthFormat);\n    const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n    // eslint-disable-next-line prefer-const\n    const [focusedDate, setFocusedDate] = React.useState(() => {\n        const initDate = new Date(dateProp);\n        if (isValidDate(initDate)) {\n            return initDate;\n        }\n        else {\n            if (isValidDate(rangeStart)) {\n                return rangeStart;\n            }\n            else {\n                return today;\n            }\n        }\n    });\n    const [hoveredDate, setHoveredDate] = React.useState(new Date(focusedDate));\n    const focusRef = React.useRef();\n    const [hiddenMonthId] = React.useState(getUniqueId('hidden-month-span'));\n    const [shouldFocus, setShouldFocus] = React.useState(false);\n    const isValidated = (date) => validators.every(validator => validator(date));\n    const focusedDateValidated = isValidated(focusedDate);\n    useEffect(() => {\n        if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {\n            setFocusedDate(dateProp);\n        }\n        else if (!dateProp) {\n            setFocusedDate(today);\n        }\n    }, [dateProp]);\n    useEffect(() => {\n        // Calendar month should not be focused on page load\n        // Datepicker should place focus in calendar month when opened\n        if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {\n            focusRef.current.focus();\n        }\n        else {\n            setShouldFocus(true);\n        }\n    }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);\n    const onMonthClick = (newDate, ev) => {\n        setFocusedDate(newDate);\n        setHoveredDate(newDate);\n        setShouldFocus(false);\n        onMonthChange(newDate, ev);\n    };\n    const onKeyDown = (ev) => {\n        const newDate = new Date(focusedDate);\n        if (ev.key === 'ArrowUp') {\n            newDate.setDate(newDate.getDate() - 7);\n        }\n        else if (ev.key === 'ArrowRight') {\n            newDate.setDate(newDate.getDate() + 1);\n        }\n        else if (ev.key === 'ArrowDown') {\n            newDate.setDate(newDate.getDate() + 7);\n        }\n        else if (ev.key === 'ArrowLeft') {\n            newDate.setDate(newDate.getDate() - 1);\n        }\n        if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n            ev.preventDefault();\n            setFocusedDate(newDate);\n            setHoveredDate(newDate);\n            setShouldFocus(true);\n        }\n    };\n    const addMonth = (toAdd) => {\n        const newDate = new Date(focusedDate);\n        newDate.setMonth(newDate.getMonth() + toAdd);\n        return newDate;\n    };\n    const prevMonth = addMonth(-1);\n    const nextMonth = addMonth(1);\n    const focusedYear = focusedDate.getFullYear();\n    const focusedMonth = focusedDate.getMonth();\n    const calendar = React.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [\n        focusedYear,\n        focusedMonth,\n        weekStart,\n        validators\n    ]);\n    if (!focusedDateValidated) {\n        const toFocus = calendar\n            .reduce((acc, cur) => [...acc, ...cur], [])\n            .filter(({ date, isValid }) => isValid && date.getMonth() === focusedMonth)\n            .map(({ date }) => ({ date, days: Math.abs(focusedDate.getTime() - date.getTime()) }))\n            .sort((o1, o2) => o1.days - o2.days)\n            .map(({ date }) => date)[0];\n        if (toFocus) {\n            setFocusedDate(toFocus);\n            setHoveredDate(toFocus);\n        }\n    }\n    const isHoveredDateValid = isValidated(hoveredDate);\n    const monthFormatted = monthFormat(focusedDate);\n    const yearFormatted = yearFormat(focusedDate);\n    const calendarToRender = (React.createElement(\"div\", Object.assign({ className: css(styles.calendarMonth, className) }, props),\n        React.createElement(\"div\", { className: styles.calendarMonthHeader },\n            React.createElement(\"div\", { className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth) },\n                React.createElement(Button, { variant: \"plain\", \"aria-label\": prevMonthAriaLabel, onClick: (ev) => onMonthClick(prevMonth, ev) },\n                    React.createElement(AngleLeftIcon, { \"aria-hidden\": true }))),\n            React.createElement(InputGroup, null,\n                React.createElement(\"div\", { className: styles.calendarMonthHeaderMonth },\n                    React.createElement(\"span\", { id: hiddenMonthId, hidden: true }, \"Month\"),\n                    React.createElement(Select\n                    // Max width with \"September\"\n                    , { \n                        // Max width with \"September\"\n                        width: \"140px\", \"aria-labelledby\": hiddenMonthId, isOpen: isSelectOpen, onToggle: () => {\n                            setIsSelectOpen(!isSelectOpen);\n                            onSelectToggle(!isSelectOpen);\n                        }, onSelect: (ev, monthNum) => {\n                            // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n                            // to see the SelectOption as a child so it doesn't close the Popover.\n                            setTimeout(() => {\n                                setIsSelectOpen(false);\n                                onSelectToggle(false);\n                                const newDate = new Date(focusedDate);\n                                newDate.setMonth(Number(monthNum));\n                                setFocusedDate(newDate);\n                                setHoveredDate(newDate);\n                                setShouldFocus(false);\n                                onMonthChange(newDate, ev);\n                            }, 0);\n                        }, variant: \"single\", selections: monthFormatted }, longMonths.map((longMonth, index) => (React.createElement(SelectOption, { key: index, value: index, isSelected: longMonth === monthFormatted }, longMonth))))),\n                React.createElement(\"div\", { className: styles.calendarMonthHeaderYear },\n                    React.createElement(TextInput, { \"aria-label\": yearInputAriaLabel, type: \"number\", value: yearFormatted, onChange: (year, ev) => {\n                            const newDate = new Date(focusedDate);\n                            newDate.setFullYear(+year);\n                            setFocusedDate(newDate);\n                            setHoveredDate(newDate);\n                            setShouldFocus(false);\n                            onMonthChange(newDate, ev);\n                        } }))),\n            React.createElement(\"div\", { className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth) },\n                React.createElement(Button, { variant: \"plain\", \"aria-label\": nextMonthAriaLabel, onClick: (ev) => onMonthClick(nextMonth, ev) },\n                    React.createElement(AngleRightIcon, { \"aria-hidden\": true })))),\n        React.createElement(\"table\", { className: styles.calendarMonthCalendar },\n            React.createElement(\"thead\", { className: styles.calendarMonthDays },\n                React.createElement(\"tr\", null, calendar[0].map(({ date }, index) => (React.createElement(\"th\", { key: index, className: styles.calendarMonthDay, scope: \"col\" },\n                    React.createElement(\"span\", { className: \"pf-screen-reader\" }, longWeekdayFormat(date)),\n                    React.createElement(\"span\", { \"aria-hidden\": true }, weekdayFormat(date))))))),\n            React.createElement(\"tbody\", { onKeyDown: onKeyDown }, calendar.map((week, index) => (React.createElement(\"tr\", { key: index, className: styles.calendarMonthDatesRow }, week.map(({ date, isValid }, index) => {\n                const dayFormatted = dayFormat(date);\n                const isToday = isSameDate(date, today);\n                const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n                const isFocused = isSameDate(date, focusedDate);\n                const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n                const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);\n                let isInRange = false;\n                let isRangeEnd = false;\n                if (isValidDate(rangeStart) && isValidDate(dateProp)) {\n                    isInRange = date > rangeStart && date < dateProp;\n                    isRangeEnd = isSameDate(date, dateProp);\n                }\n                else if (isValidDate(rangeStart) && isHoveredDateValid) {\n                    if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n                        isInRange = date > rangeStart && date < hoveredDate;\n                        isRangeEnd = isSameDate(date, hoveredDate);\n                    }\n                    // Don't handle focused dates before start dates for now.\n                    // Core would likely need new styles\n                }\n                return (React.createElement(\"td\", { key: index, className: css(styles.calendarMonthDatesCell, isAdjacentMonth && styles.modifiers.adjacentMonth, isToday && styles.modifiers.current, (isSelected || isRangeStart) && styles.modifiers.selected, !isValid && styles.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange, isRangeStart && styles.modifiers.startRange, isRangeEnd && styles.modifiers.endRange) },\n                    React.createElement(\"button\", Object.assign({ className: css(styles.calendarMonthDate, isRangeEnd && styles.modifiers.hover, !isValid && styles.modifiers.disabled), type: \"button\", onClick: () => onChange(date), onMouseOver: () => setHoveredDate(date), tabIndex: isFocused ? 0 : -1, disabled: !isValid, \"aria-label\": cellAriaLabel\n                            ? cellAriaLabel(date)\n                            : `${dayFormat(date)} ${monthFormat(date)} ${yearFormat(date)}` }, (isFocused && { ref: focusRef })), dayFormatted)));\n            }))))))));\n    if (inlineProps !== undefined) {\n        const Component = (inlineProps.component ? inlineProps.component : 'article');\n        return (React.createElement(Component, Object.assign({}, (inlineProps.ariaLabelledby && { 'aria-labelledby': inlineProps.ariaLabelledby })),\n            inlineProps.title,\n            calendarToRender));\n    }\n    return calendarToRender;\n};\nCalendarMonth.displayName = 'CalendarMonth';\n//# sourceMappingURL=CalendarMonth.js.map"]},"metadata":{},"sourceType":"module"}