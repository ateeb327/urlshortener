{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nexport const OptionsToggle = ({\n  itemsTitle = 'items',\n  optionsToggle,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  itemsPerPageTitle = 'Items per page',\n  ofWord = 'of',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount,\n  widgetId = '',\n  showToggle = true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = _isOpen => undefined,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate,\n  onEnter = null,\n  perPageComponent = 'div'\n}) => {\n  const isDiv = perPageComponent === 'div';\n  const toggleClasses = css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text);\n  const template = typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n    firstIndex,\n    lastIndex,\n    ofWord,\n    itemCount,\n    itemsTitle\n  }) : React.createElement(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    ofWord: ofWord,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  });\n  const dropdown = showToggle && React.createElement(React.Fragment, null, isDiv && React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText)\n  }, template), React.createElement(DropdownToggle, Object.assign({\n    onEnter: onEnter,\n    \"aria-label\": isDiv ? optionsToggle || 'Items per page' : optionsToggle,\n    onToggle: onToggle,\n    isDisabled: isDisabled || itemCount && itemCount <= 0,\n    isOpen: isOpen\n  }, widgetId && {\n    id: `${widgetId}-toggle`\n  }, {\n    className: isDiv ? styles.optionsMenuToggleButton : toggleClasses,\n    parentRef: parentRef,\n    \"aria-haspopup\": \"listbox\"\n  }), !isDiv && template));\n  return isDiv ? React.createElement(\"div\", {\n    className: toggleClasses\n  }, dropdown) : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';","map":{"version":3,"sources":["../../../../src/components/Pagination/OptionsToggle.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,kEAAkE;AACrF,SAAS,GAAG,QAAQ,0BAA0B;AAE9C,SAAS,YAAY,QAAQ,eAAe;AAE5C,SAAS,cAAc,QAAQ,aAAa;AAwC5C,OAAO,MAAM,aAAa,GAAgD,CAAC;EACzE,UAAU,GAAG,OAAO;EACpB,aAAa;EACb;EACA,iBAAiB,GAAG,gBAAgB;EACpC,MAAM,GAAG,IAAI;EACb,UAAU,GAAG,CAAC;EACd,SAAS,GAAG,CAAC;EACb,SAAS;EACT,QAAQ,GAAG,EAAE;EACb,UAAU,GAAG,IAAI;EACjB;EACA,QAAQ,GAAI,OAAgB,IAAK,SAAgB;EACjD,MAAM,GAAG,KAAK;EACd,UAAU,GAAG,KAAK;EAClB,SAAS,GAAG,IAAI;EAChB,cAAc,EAAE,cAAc;EAC9B,OAAO,GAAG,IAAI;EACd,gBAAgB,GAAG;AAAK,CACL,KAAI;EACvB,MAAM,KAAK,GAAG,gBAAgB,KAAK,KAAK;EACxC,MAAM,aAAa,GAAG,GAAG,CACvB,MAAM,CAAC,iBAAiB,EACxB,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,EACvC,MAAM,CAAC,SAAS,CAAC,KAAK,EACtB,MAAM,CAAC,SAAS,CAAC,IAAI,CACtB;EAED,MAAM,QAAQ,GACZ,OAAO,cAAc,KAAK,QAAQ,GAChC,YAAY,CAAC,cAAc,EAAE;IAAE,UAAU;IAAE,SAAS;IAAE,MAAM;IAAE,SAAS;IAAE;EAAU,CAAE,CAAC,GAEtF,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA;IACb,UAAU,EAAE,UAAU;IACtB,SAAS,EAAE,SAAS;IACpB,MAAM,EAAE,MAAM;IACd,SAAS,EAAE,SAAS;IACpB,UAAU,EAAE;EAAU,CAAA,CAEzB;EAEH,MAAM,QAAQ,GAAG,UAAU,IACzB,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAQ,EAAA,IAAA,EACZ,KAAK,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAqB;EAAC,CAAA,EAAG,QAAQ,CAAQ,EAC/E,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA;IACb,OAAO,EAAE,OAAO;IAAA,YAAA,EACJ,KAAK,GAAG,aAAa,IAAI,gBAAgB,GAAG,aAAa;IACrE,QAAQ,EAAE,QAAQ;IAClB,UAAU,EAAE,UAAU,IAAK,SAAS,IAAI,SAAS,IAAI,CAAE;IACvD,MAAM,EAAE;EAAM,CAAA,EACT,QAAQ,IAAI;IAAE,EAAE,EAAE,GAAG,QAAQ;EAAS,CAAE,EAAC;IAC9C,SAAS,EAAE,KAAK,GAAG,MAAM,CAAC,uBAAuB,GAAG,aAAa;IACjE,SAAS,EAAE,SAAS;IAAA,eAAA,EACN;EAAS,CAAA,CAAA,EAEtB,CAAC,KAAK,IAAI,QAAQ,CACJ,CAEpB;EAED,OAAO,KAAK,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE;EAAa,CAAA,EAAG,QAAQ,CAAO,GAAG,QAAQ;AAC3E,CAAC;AACD,aAAa,CAAC,WAAW,GAAG,eAAe","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nexport const OptionsToggle = ({ itemsTitle = 'items', optionsToggle, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nitemsPerPageTitle = 'Items per page', ofWord = 'of', firstIndex = 0, lastIndex = 0, itemCount, widgetId = '', showToggle = true, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonToggle = (_isOpen) => undefined, isOpen = false, isDisabled = false, parentRef = null, toggleTemplate: ToggleTemplate, onEnter = null, perPageComponent = 'div' }) => {\n    const isDiv = perPageComponent === 'div';\n    const toggleClasses = css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text);\n    const template = typeof ToggleTemplate === 'string' ? (fillTemplate(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })) : (React.createElement(ToggleTemplate, { firstIndex: firstIndex, lastIndex: lastIndex, ofWord: ofWord, itemCount: itemCount, itemsTitle: itemsTitle }));\n    const dropdown = showToggle && (React.createElement(React.Fragment, null,\n        isDiv && React.createElement(\"span\", { className: css(styles.optionsMenuToggleText) }, template),\n        React.createElement(DropdownToggle, Object.assign({ onEnter: onEnter, \"aria-label\": isDiv ? optionsToggle || 'Items per page' : optionsToggle, onToggle: onToggle, isDisabled: isDisabled || (itemCount && itemCount <= 0), isOpen: isOpen }, (widgetId && { id: `${widgetId}-toggle` }), { className: isDiv ? styles.optionsMenuToggleButton : toggleClasses, parentRef: parentRef, \"aria-haspopup\": \"listbox\" }), !isDiv && template)));\n    return isDiv ? React.createElement(\"div\", { className: toggleClasses }, dropdown) : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';\n//# sourceMappingURL=OptionsToggle.js.map"]},"metadata":{},"sourceType":"module"}