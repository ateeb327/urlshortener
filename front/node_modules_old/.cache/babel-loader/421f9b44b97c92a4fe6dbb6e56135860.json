{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nexport const isVariantIcon = icon => ['success', 'danger', 'warning', 'info', 'default'].includes(icon);\nexport const ModalBoxTitle = _a => {\n  var {\n      className = '',\n      id,\n      title,\n      titleIconVariant,\n      titleLabel = ''\n    } = _a,\n    props = __rest(_a, [\"className\", \"id\", \"title\", \"titleIconVariant\", \"titleLabel\"]);\n  const [hasTooltip, setHasTooltip] = React.useState(false);\n  const h1 = React.useRef(null);\n  const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);\n  const variantIcons = {\n    success: React.createElement(CheckCircleIcon, null),\n    danger: React.createElement(ExclamationCircleIcon, null),\n    warning: React.createElement(ExclamationTriangleIcon, null),\n    info: React.createElement(InfoCircleIcon, null),\n    default: React.createElement(BellIcon, null)\n  };\n  const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n  useIsomorphicLayoutEffect(() => {\n    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n  const content = React.createElement(\"h1\", Object.assign({\n    id: id,\n    ref: h1,\n    className: css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)\n  }, props), titleIconVariant && React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleIcon)\n  }, isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : React.createElement(CustomIcon, null)), label && React.createElement(\"span\", {\n    className: css(accessibleStyles.screenReader)\n  }, label), React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleText)\n  }, title));\n  return hasTooltip ? React.createElement(Tooltip, {\n    content: title\n  }, content) : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';","map":{"version":3,"sources":["../../../../src/components/Modal/ModalBoxTitle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nexport const isVariantIcon = (icon) => ['success', 'danger', 'warning', 'info', 'default'].includes(icon);\nexport const ModalBoxTitle = (_a) => {\n    var { className = '', id, title, titleIconVariant, titleLabel = '' } = _a, props = __rest(_a, [\"className\", \"id\", \"title\", \"titleIconVariant\", \"titleLabel\"]);\n    const [hasTooltip, setHasTooltip] = React.useState(false);\n    const h1 = React.useRef(null);\n    const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);\n    const variantIcons = {\n        success: React.createElement(CheckCircleIcon, null),\n        danger: React.createElement(ExclamationCircleIcon, null),\n        warning: React.createElement(ExclamationTriangleIcon, null),\n        info: React.createElement(InfoCircleIcon, null),\n        default: React.createElement(BellIcon, null)\n    };\n    const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n    useIsomorphicLayoutEffect(() => {\n        setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n    }, []);\n    const content = (React.createElement(\"h1\", Object.assign({ id: id, ref: h1, className: css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className) }, props),\n        titleIconVariant && (React.createElement(\"span\", { className: css(modalStyles.modalBoxTitleIcon) }, isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : React.createElement(CustomIcon, null))),\n        label && React.createElement(\"span\", { className: css(accessibleStyles.screenReader) }, label),\n        React.createElement(\"span\", { className: css(modalStyles.modalBoxTitleText) }, title)));\n    return hasTooltip ? React.createElement(Tooltip, { content: title }, content) : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';\n//# sourceMappingURL=ModalBoxTitle.js.map"]},"metadata":{},"sourceType":"module"}