{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport class NavList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      scrollViewAtStart: false,\n      scrollViewAtEnd: false\n    };\n    this.navList = React.createRef();\n    this.observer = () => {};\n    this.handleScrollButtons = () => {\n      const container = this.navList.current;\n      if (container) {\n        // check if it elements are in view\n        const scrollViewAtStart = isElementInView(container, container.firstChild, false);\n        const scrollViewAtEnd = isElementInView(container, container.lastChild, false);\n        this.setState({\n          scrollViewAtStart,\n          scrollViewAtEnd\n        });\n        this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n      }\n    };\n    this.scrollLeft = () => {\n      // find first Element that is fully in view on the left, then scroll to the element before it\n      const container = this.navList.current;\n      if (container) {\n        const childrenArr = Array.from(container.children);\n        let firstElementInView;\n        let lastElementOutOfView;\n        for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            firstElementInView = childrenArr[i];\n            lastElementOutOfView = childrenArr[i - 1];\n          }\n        }\n        if (lastElementOutOfView) {\n          container.scrollLeft -= lastElementOutOfView.scrollWidth;\n        }\n        this.handleScrollButtons();\n      }\n    };\n    this.scrollRight = () => {\n      // find last Element that is fully in view on the right, then scroll to the element after it\n      const container = this.navList.current;\n      if (container) {\n        const childrenArr = Array.from(container.children);\n        let lastElementInView;\n        let firstElementOutOfView;\n        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            lastElementInView = childrenArr[i];\n            firstElementOutOfView = childrenArr[i + 1];\n          }\n        }\n        if (firstElementOutOfView) {\n          container.scrollLeft += firstElementOutOfView.scrollWidth;\n        }\n        this.handleScrollButtons();\n      }\n    };\n  }\n  componentDidMount() {\n    this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n    this.handleScrollButtons();\n  }\n  componentWillUnmount() {\n    this.observer();\n  }\n  render() {\n    const _a = this.props,\n      {\n        children,\n        className,\n        ariaLeftScroll,\n        ariaRightScroll\n      } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"ariaLeftScroll\", \"ariaRightScroll\"]);\n    const {\n      scrollViewAtStart,\n      scrollViewAtEnd\n    } = this.state;\n    return React.createElement(NavContext.Consumer, null, ({\n      isHorizontal\n    }) => React.createElement(PageSidebarContext.Consumer, null, ({\n      isNavOpen\n    }) => React.createElement(React.Fragment, null, isHorizontal && React.createElement(\"button\", {\n      className: css(styles.navScrollButton),\n      \"aria-label\": ariaLeftScroll,\n      onClick: this.scrollLeft,\n      disabled: scrollViewAtStart,\n      tabIndex: isNavOpen ? null : -1\n    }, React.createElement(AngleLeftIcon, null)), React.createElement(\"ul\", Object.assign({\n      ref: this.navList,\n      className: css(styles.navList, className),\n      onScroll: this.handleScrollButtons\n    }, props), children), isHorizontal && React.createElement(\"button\", {\n      className: css(styles.navScrollButton),\n      \"aria-label\": ariaRightScroll,\n      onClick: this.scrollRight,\n      disabled: scrollViewAtEnd,\n      tabIndex: isNavOpen ? null : -1\n    }, React.createElement(AngleRightIcon, null)))));\n  }\n}\nNavList.displayName = 'NavList';\nNavList.contextType = NavContext;\nNavList.defaultProps = {\n  ariaLeftScroll: 'Scroll left',\n  ariaRightScroll: 'Scroll right'\n};","map":{"version":3,"sources":["../../../../src/components/Nav/NavList.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport class NavList extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            scrollViewAtStart: false,\n            scrollViewAtEnd: false\n        };\n        this.navList = React.createRef();\n        this.observer = () => { };\n        this.handleScrollButtons = () => {\n            const container = this.navList.current;\n            if (container) {\n                // check if it elements are in view\n                const scrollViewAtStart = isElementInView(container, container.firstChild, false);\n                const scrollViewAtEnd = isElementInView(container, container.lastChild, false);\n                this.setState({\n                    scrollViewAtStart,\n                    scrollViewAtEnd\n                });\n                this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n            }\n        };\n        this.scrollLeft = () => {\n            // find first Element that is fully in view on the left, then scroll to the element before it\n            const container = this.navList.current;\n            if (container) {\n                const childrenArr = Array.from(container.children);\n                let firstElementInView;\n                let lastElementOutOfView;\n                for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n                    if (isElementInView(container, childrenArr[i], false)) {\n                        firstElementInView = childrenArr[i];\n                        lastElementOutOfView = childrenArr[i - 1];\n                    }\n                }\n                if (lastElementOutOfView) {\n                    container.scrollLeft -= lastElementOutOfView.scrollWidth;\n                }\n                this.handleScrollButtons();\n            }\n        };\n        this.scrollRight = () => {\n            // find last Element that is fully in view on the right, then scroll to the element after it\n            const container = this.navList.current;\n            if (container) {\n                const childrenArr = Array.from(container.children);\n                let lastElementInView;\n                let firstElementOutOfView;\n                for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n                    if (isElementInView(container, childrenArr[i], false)) {\n                        lastElementInView = childrenArr[i];\n                        firstElementOutOfView = childrenArr[i + 1];\n                    }\n                }\n                if (firstElementOutOfView) {\n                    container.scrollLeft += firstElementOutOfView.scrollWidth;\n                }\n                this.handleScrollButtons();\n            }\n        };\n    }\n    componentDidMount() {\n        this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n        this.handleScrollButtons();\n    }\n    componentWillUnmount() {\n        this.observer();\n    }\n    render() {\n        const _a = this.props, { children, className, ariaLeftScroll, ariaRightScroll } = _a, props = __rest(_a, [\"children\", \"className\", \"ariaLeftScroll\", \"ariaRightScroll\"]);\n        const { scrollViewAtStart, scrollViewAtEnd } = this.state;\n        return (React.createElement(NavContext.Consumer, null, ({ isHorizontal }) => (React.createElement(PageSidebarContext.Consumer, null, ({ isNavOpen }) => (React.createElement(React.Fragment, null,\n            isHorizontal && (React.createElement(\"button\", { className: css(styles.navScrollButton), \"aria-label\": ariaLeftScroll, onClick: this.scrollLeft, disabled: scrollViewAtStart, tabIndex: isNavOpen ? null : -1 },\n                React.createElement(AngleLeftIcon, null))),\n            React.createElement(\"ul\", Object.assign({ ref: this.navList, className: css(styles.navList, className), onScroll: this.handleScrollButtons }, props), children),\n            isHorizontal && (React.createElement(\"button\", { className: css(styles.navScrollButton), \"aria-label\": ariaRightScroll, onClick: this.scrollRight, disabled: scrollViewAtEnd, tabIndex: isNavOpen ? null : -1 },\n                React.createElement(AngleRightIcon, null)))))))));\n    }\n}\nNavList.displayName = 'NavList';\nNavList.contextType = NavContext;\nNavList.defaultProps = {\n    ariaLeftScroll: 'Scroll left',\n    ariaRightScroll: 'Scroll right'\n};\n//# sourceMappingURL=NavList.js.map"]},"metadata":{},"sourceType":"module"}