{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport const DualListSelectorTree = _a => {\n  var {\n      data,\n      hasBadges = false,\n      isNested = false,\n      defaultAllExpanded = false,\n      onOptionCheck,\n      isDisabled = false\n    } = _a,\n    props = __rest(_a, [\"data\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"onOptionCheck\", \"isDisabled\"]);\n  const dataToRender = typeof data === 'function' ? data() : data;\n  const tree = dataToRender.map(item => React.createElement(DualListSelectorTreeItem, Object.assign({\n    key: item.id,\n    text: item.text,\n    id: item.id,\n    defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n    onOptionCheck: onOptionCheck,\n    isChecked: item.isChecked,\n    checkProps: item.checkProps,\n    hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n    badgeProps: item.badgeProps,\n    itemData: item,\n    isDisabled: isDisabled,\n    useMemo: true\n  }, item.children && {\n    children: React.createElement(DualListSelectorTree, {\n      isNested: true,\n      data: item.children,\n      hasBadges: hasBadges,\n      defaultAllExpanded: defaultAllExpanded,\n      onOptionCheck: onOptionCheck,\n      isDisabled: isDisabled\n    })\n  })));\n  return isNested ? React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: \"group\"\n  }, props), tree) : React.createElement(React.Fragment, null, tree);\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorTree.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,6EAA6E;AAChG,SAAS,wBAAwB,QAAQ,4BAA4B;AA2DrE,OAAO,MAAM,oBAAoB,GAAwD,EAQ7D,IAAI;MARyD;MACvF,IAAI;MACJ,SAAS,GAAG,KAAK;MACjB,QAAQ,GAAG,KAAK;MAChB,kBAAkB,GAAG,KAAK;MAC1B,aAAa;MACb,UAAU,GAAG;IAAK,CAAA,GAAA,EAEQ;IADvB,KAAK,GAAA,MAAA,CAAA,EAAA,EAP+E,CAAA,MAAA,EAAA,WAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,eAAA,EAAA,YAAA,CAQxF,CADS;EAER,MAAM,YAAY,GAAG,OAAO,IAAI,KAAK,UAAU,GAAG,IAAI,CAAA,CAAE,GAAG,IAAI;EAC/D,MAAM,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC,IAAI,IAChC,KAAA,CAAA,aAAA,CAAC,wBAAwB,EAAA,MAAA,CAAA,MAAA,CAAA;IACvB,GAAG,EAAE,IAAI,CAAC,EAAE;IACZ,IAAI,EAAE,IAAI,CAAC,IAAI;IACf,EAAE,EAAE,IAAI,CAAC,EAAE;IACX,eAAe,EAAE,IAAI,CAAC,eAAe,KAAK,SAAS,GAAG,IAAI,CAAC,eAAe,GAAG,kBAAkB;IAC/F,aAAa,EAAE,aAAa;IAC5B,SAAS,EAAE,IAAI,CAAC,SAAS;IACzB,UAAU,EAAE,IAAI,CAAC,UAAU;IAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ,KAAK,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,SAAS;IACjE,UAAU,EAAE,IAAI,CAAC,UAAU;IAC3B,QAAQ,EAAE,IAAI;IACd,UAAU,EAAE,UAAU;IACtB,OAAO,EAAE;EAAI,CAAA,EACR,IAAI,CAAC,QAAQ,IAAI;IACpB,QAAQ,EACN,KAAA,CAAA,aAAA,CAAC,oBAAoB,EAAA;MACnB,QAAQ,EAAA,IAAA;MACR,IAAI,EAAE,IAAI,CAAC,QAAQ;MACnB,SAAS,EAAE,SAAS;MACpB,kBAAkB,EAAE,kBAAkB;MACtC,aAAa,EAAE,aAAa;MAC5B,UAAU,EAAE;IAAU,CAAA;EAG3B,CAAC,CAAA,CAEL,CAAC;EACF,OAAO,QAAQ,GACb,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IAAI,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC;IAAE,IAAI,EAAC;EAAO,CAAA,EAAK,KAAK,CAAA,EACpE,IAAI,CACF,GAEL,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,IAAI,CACR;AACH,CAAC;AAED,oBAAoB,CAAC,WAAW,GAAG,sBAAsB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport const DualListSelectorTree = (_a) => {\n    var { data, hasBadges = false, isNested = false, defaultAllExpanded = false, onOptionCheck, isDisabled = false } = _a, props = __rest(_a, [\"data\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"onOptionCheck\", \"isDisabled\"]);\n    const dataToRender = typeof data === 'function' ? data() : data;\n    const tree = dataToRender.map(item => (React.createElement(DualListSelectorTreeItem, Object.assign({ key: item.id, text: item.text, id: item.id, defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onOptionCheck: onOptionCheck, isChecked: item.isChecked, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, badgeProps: item.badgeProps, itemData: item, isDisabled: isDisabled, useMemo: true }, (item.children && {\n        children: (React.createElement(DualListSelectorTree, { isNested: true, data: item.children, hasBadges: hasBadges, defaultAllExpanded: defaultAllExpanded, onOptionCheck: onOptionCheck, isDisabled: isDisabled }))\n    })))));\n    return isNested ? (React.createElement(\"ul\", Object.assign({ className: css(styles.dualListSelectorList), role: \"group\" }, props), tree)) : (React.createElement(React.Fragment, null, tree));\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';\n//# sourceMappingURL=DualListSelectorTree.js.map"]},"metadata":{},"sourceType":"module"}