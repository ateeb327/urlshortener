{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/BackToTop/back-to-top';\nimport { css } from '@patternfly/react-styles';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport { canUseDOM } from '../../helpers/util';\nimport { Button } from '../Button';\nconst BackToTopBase = _a => {\n  var {\n      className,\n      title = 'Back to top',\n      innerRef,\n      scrollableSelector,\n      isAlwaysVisible = false\n    } = _a,\n    props = __rest(_a, [\"className\", \"title\", \"innerRef\", \"scrollableSelector\", \"isAlwaysVisible\"]);\n  const [visible, setVisible] = React.useState(isAlwaysVisible);\n  React.useEffect(() => {\n    setVisible(isAlwaysVisible);\n  }, [isAlwaysVisible]);\n  const [scrollElement, setScrollElement] = React.useState(null);\n  const toggleVisible = () => {\n    const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;\n    if (!isAlwaysVisible) {\n      if (scrolled > 400) {\n        setVisible(true);\n      } else {\n        setVisible(false);\n      }\n    }\n  };\n  React.useEffect(() => {\n    const hasScrollSpy = Boolean(scrollableSelector);\n    if (hasScrollSpy) {\n      const scrollEl = document.querySelector(scrollableSelector);\n      if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {\n        return;\n      }\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    } else {\n      if (!canUseDOM) {\n        return;\n      }\n      const scrollEl = window;\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    }\n  }, [scrollableSelector, toggleVisible]);\n  const handleClick = () => {\n    scrollElement.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.backToTop, !visible && styles.modifiers.hidden, className),\n    ref: innerRef,\n    onClick: handleClick\n  }, props), React.createElement(Button, {\n    variant: \"primary\",\n    icon: React.createElement(AngleUpIcon, {\n      \"aria-hidden\": \"true\"\n    }),\n    iconPosition: \"right\"\n  }, title));\n};\nexport const BackToTop = React.forwardRef((props, ref) => React.createElement(BackToTopBase, Object.assign({\n  innerRef: ref\n}, props)));\nBackToTop.displayName = 'BackToTop';","map":{"version":3,"sources":["../../../../src/components/BackToTop/BackToTop.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,+DAA+D;AAClF,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,WAAW,MAAM,sDAAsD;AAC9E,SAAS,SAAS,QAAQ,oBAAoB;AAC9C,SAAS,MAAM,QAAQ,WAAW;AAelC,MAAM,aAAa,GAA6C,EAO/C,IAAI;MAP2C;MAC9D,SAAS;MACT,KAAK,GAAG,aAAa;MACrB,QAAQ;MACR,kBAAkB;MAClB,eAAe,GAAG;IAAK,CAAA,GAAA,EAER;IADZ,KAAK,GAAA,MAAA,CAAA,EAAA,EANsD,CAAA,WAAA,EAAA,OAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,iBAAA,CAO/D,CADS;EAER,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC;EAC7D,KAAK,CAAC,SAAS,CAAC,MAAK;IACnB,UAAU,CAAC,eAAe,CAAC;EAC7B,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;EAErB,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAM,aAAa,GAAG,CAAA,KAAK;IACzB,MAAM,QAAQ,GAAG,aAAa,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,GAAG,aAAa,CAAC,SAAS;IACxF,IAAI,CAAC,eAAe,EAAE;MACpB,IAAI,QAAQ,GAAG,GAAG,EAAE;QAClB,UAAU,CAAC,IAAI,CAAC;OACjB,MAAM;QACL,UAAU,CAAC,KAAK,CAAC;MAClB;IACF;EACH,CAAC;EAED,KAAK,CAAC,SAAS,CAAC,MAAK;IACnB,MAAM,YAAY,GAAG,OAAO,CAAC,kBAAkB,CAAC;IAChD,IAAI,YAAY,EAAE;MAChB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAgB;MAC1E,IAAI,CAAC,SAAS,IAAI,EAAE,QAAQ,YAAY,WAAW,CAAC,EAAE;QACpD;MACD;MACD,gBAAgB,CAAC,QAAQ,CAAC;MAC1B,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC;MAElD,OAAO,MAAK;QACV,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,aAAa,CAAC;MACvD,CAAC;KACF,MAAM;MACL,IAAI,CAAC,SAAS,EAAE;QACd;MACD;MACD,MAAM,QAAQ,GAAG,MAAM;MACvB,gBAAgB,CAAC,QAAQ,CAAC;MAC1B,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC;MAElD,OAAO,MAAK;QACV,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,aAAa,CAAC;MACvD,CAAC;IACF;EACH,CAAC,EAAE,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;EAEvC,MAAM,WAAW,GAAG,CAAA,KAAK;IACvB,aAAa,CAAC,QAAQ,CAAC;MAAE,GAAG,EAAE,CAAC;MAAE,QAAQ,EAAE;IAAQ,CAAE,CAAC;EACxD,CAAC;EAED,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IACE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC;IAChF,GAAG,EAAE,QAAQ;IACb,OAAO,EAAE;EAAW,CAAA,EAChB,KAAK,CAAA,EAET,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;IAAC,OAAO,EAAC,SAAS;IAAC,IAAI,EAAE,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA;MAAA,aAAA,EAAa;IAAM,CAAA,CAAG;IAAE,YAAY,EAAC;EAAO,CAAA,EACrF,KAAK,CACC,CACL;AAEV,CAAC;AAED,OAAO,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,KAAqB,EAAE,GAAmB,KACnF,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,MAAA,CAAA,MAAA,CAAA;EAAC,QAAQ,EAAE;AAAG,CAAA,EAAM,KAAK,CAAA,CACxC,CAAC;AACF,SAAS,CAAC,WAAW,GAAG,WAAW","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/BackToTop/back-to-top';\nimport { css } from '@patternfly/react-styles';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport { canUseDOM } from '../../helpers/util';\nimport { Button } from '../Button';\nconst BackToTopBase = (_a) => {\n    var { className, title = 'Back to top', innerRef, scrollableSelector, isAlwaysVisible = false } = _a, props = __rest(_a, [\"className\", \"title\", \"innerRef\", \"scrollableSelector\", \"isAlwaysVisible\"]);\n    const [visible, setVisible] = React.useState(isAlwaysVisible);\n    React.useEffect(() => {\n        setVisible(isAlwaysVisible);\n    }, [isAlwaysVisible]);\n    const [scrollElement, setScrollElement] = React.useState(null);\n    const toggleVisible = () => {\n        const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;\n        if (!isAlwaysVisible) {\n            if (scrolled > 400) {\n                setVisible(true);\n            }\n            else {\n                setVisible(false);\n            }\n        }\n    };\n    React.useEffect(() => {\n        const hasScrollSpy = Boolean(scrollableSelector);\n        if (hasScrollSpy) {\n            const scrollEl = document.querySelector(scrollableSelector);\n            if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {\n                return;\n            }\n            setScrollElement(scrollEl);\n            scrollEl.addEventListener('scroll', toggleVisible);\n            return () => {\n                scrollEl.removeEventListener('scroll', toggleVisible);\n            };\n        }\n        else {\n            if (!canUseDOM) {\n                return;\n            }\n            const scrollEl = window;\n            setScrollElement(scrollEl);\n            scrollEl.addEventListener('scroll', toggleVisible);\n            return () => {\n                scrollEl.removeEventListener('scroll', toggleVisible);\n            };\n        }\n    }, [scrollableSelector, toggleVisible]);\n    const handleClick = () => {\n        scrollElement.scrollTo({ top: 0, behavior: 'smooth' });\n    };\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.backToTop, !visible && styles.modifiers.hidden, className), ref: innerRef, onClick: handleClick }, props),\n        React.createElement(Button, { variant: \"primary\", icon: React.createElement(AngleUpIcon, { \"aria-hidden\": \"true\" }), iconPosition: \"right\" }, title)));\n};\nexport const BackToTop = React.forwardRef((props, ref) => (React.createElement(BackToTopBase, Object.assign({ innerRef: ref }, props))));\nBackToTop.displayName = 'BackToTop';\n//# sourceMappingURL=BackToTop.js.map"]},"metadata":{},"sourceType":"module"}