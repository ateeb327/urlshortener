{"ast":null,"code":"import { useMemo } from 'react';\nlet uid = 0;\nconst ouiaPrefix = 'OUIA-Generated-';\nconst ouiaIdByRoute = {};\n/** Get props to conform to OUIA spec\n *\n * For functional components, use the useOUIAProps function instead\n *\n * In class based components, create a state variable ouiaStateId to create a static generated ID:\n * state = {\n *  ouiaStateId: getDefaultOUIAId(Chip.displayName)\n * }\n * This generated ID should remain alive as long as the component is not unmounted.\n *\n * Then add the attributes to the component\n * {...getOUIAProps('OverflowChip', this.props.ouiaId !== undefined ? this.props.ouiaId : this.state.ouiaStateId)}\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n */\nexport function getOUIAProps(componentType, id, ouiaSafe = true) {\n  return {\n    'data-ouia-component-type': `PF4/${componentType}`,\n    'data-ouia-safe': ouiaSafe,\n    'data-ouia-component-id': id\n  };\n}\n/**\n * Hooks version of the getOUIAProps function that also memoizes the generated ID\n * Can only be used in functional components\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAProps = (componentType, id, ouiaSafe = true, variant) => ({\n  'data-ouia-component-type': `PF4/${componentType}`,\n  'data-ouia-safe': ouiaSafe,\n  'data-ouia-component-id': useOUIAId(componentType, id, variant)\n});\n/**\n * Returns the ID or the memoized generated ID\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAId = (componentType, id, variant) => {\n  const defaultOUIAId = useMemo(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);\n  return id !== null && id !== void 0 ? id : defaultOUIAId;\n};\n/**\n * Returns a generated id based on the URL location\n *\n * @param {string} componentType OUIA component type\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport function getDefaultOUIAId(componentType, variant) {\n  /*\n  ouiaIdByRoute = {\n    [route+componentType]: [number]\n  }\n  */\n  try {\n    let key;\n    if (typeof window !== 'undefined') {\n      // browser environments\n      key = `${window.location.href}-${componentType}-${variant || ''}`;\n    } else {\n      // node/SSR environments\n      key = `${componentType}-${variant || ''}`;\n    }\n    if (!ouiaIdByRoute[key]) {\n      ouiaIdByRoute[key] = 0;\n    }\n    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++ouiaIdByRoute[key]}`;\n  } catch (exception) {\n    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++uid}`;\n  }\n}","map":{"version":3,"sources":["../../../../src/helpers/OUIA/ouia.ts"],"names":[],"mappings":"AAAA,SAAS,OAAO,QAAQ,OAAO;AAY/B,IAAI,GAAG,GAAG,CAAC;AACX,MAAM,UAAU,GAAG,iBAAiB;AACpC,MAAM,aAAa,GAAQ,CAAA,CAAE;AAE7B;;;;;;;;;;;;;;;;AAgBG;AACH,OAAM,SAAU,YAAY,CAAC,aAAqB,EAAE,EAAU,EAAE,QAAA,GAAoB,IAAI,EAAA;EACtF,OAAO;IACL,0BAA0B,EAAE,OAAO,aAAa,EAAE;IAClD,gBAAgB,EAAE,QAAQ;IAC1B,wBAAwB,EAAE;GAC3B;AACH;AAEA;;;;;;;;AAQG;AACH,OAAO,MAAM,YAAY,GAAG,CAAC,aAAqB,EAAE,EAAW,EAAE,QAAA,GAAoB,IAAI,EAAE,OAAgB,MAAM;EAC/G,0BAA0B,EAAE,OAAO,aAAa,EAAE;EAClD,gBAAgB,EAAE,QAAQ;EAC1B,wBAAwB,EAAE,SAAS,CAAC,aAAa,EAAE,EAAE,EAAE,OAAO;CAC/D,CAAC;AAEF;;;;;;AAMG;AACH,OAAO,MAAM,SAAS,GAAG,CAAC,aAAqB,EAAE,EAAW,EAAE,OAAgB,KAAI;EAChF,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,gBAAgB,CAAC,aAAa,EAAE,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;EACvG,OAAO,EAAE,KAAA,IAAA,IAAF,EAAE,KAAA,KAAA,CAAA,GAAF,EAAE,GAAI,aAAa;AAC5B,CAAC;AAED;;;;;AAKG;AACH,OAAM,SAAU,gBAAgB,CAAC,aAAqB,EAAE,OAAgB,EAAA;EACtE;;;;AAIE;EACF,IAAI;IACF,IAAI,GAAG;IACP,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;MACjC;MACA,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,aAAa,IAAI,OAAO,IAAI,EAAE,EAAE;KAClE,MAAM;MACL;MACA,GAAG,GAAG,GAAG,aAAa,IAAI,OAAO,IAAI,EAAE,EAAE;IAC1C;IACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;MACvB,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC;IACvB;IACD,OAAO,GAAG,UAAU,GAAG,aAAa,IAAI,OAAO,GAAG,GAAG,OAAO,GAAG,GAAG,EAAE,GAAG,EAAE,aAAa,CAAC,GAAG,CAAC,EAAE;GAC9F,CAAC,OAAO,SAAS,EAAE;IAClB,OAAO,GAAG,UAAU,GAAG,aAAa,IAAI,OAAO,GAAG,GAAG,OAAO,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;EAC/E;AACH","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nlet uid = 0;\nconst ouiaPrefix = 'OUIA-Generated-';\nconst ouiaIdByRoute = {};\n/** Get props to conform to OUIA spec\n *\n * For functional components, use the useOUIAProps function instead\n *\n * In class based components, create a state variable ouiaStateId to create a static generated ID:\n * state = {\n *  ouiaStateId: getDefaultOUIAId(Chip.displayName)\n * }\n * This generated ID should remain alive as long as the component is not unmounted.\n *\n * Then add the attributes to the component\n * {...getOUIAProps('OverflowChip', this.props.ouiaId !== undefined ? this.props.ouiaId : this.state.ouiaStateId)}\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n */\nexport function getOUIAProps(componentType, id, ouiaSafe = true) {\n    return {\n        'data-ouia-component-type': `PF4/${componentType}`,\n        'data-ouia-safe': ouiaSafe,\n        'data-ouia-component-id': id\n    };\n}\n/**\n * Hooks version of the getOUIAProps function that also memoizes the generated ID\n * Can only be used in functional components\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAProps = (componentType, id, ouiaSafe = true, variant) => ({\n    'data-ouia-component-type': `PF4/${componentType}`,\n    'data-ouia-safe': ouiaSafe,\n    'data-ouia-component-id': useOUIAId(componentType, id, variant)\n});\n/**\n * Returns the ID or the memoized generated ID\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAId = (componentType, id, variant) => {\n    const defaultOUIAId = useMemo(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);\n    return id !== null && id !== void 0 ? id : defaultOUIAId;\n};\n/**\n * Returns a generated id based on the URL location\n *\n * @param {string} componentType OUIA component type\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport function getDefaultOUIAId(componentType, variant) {\n    /*\n    ouiaIdByRoute = {\n      [route+componentType]: [number]\n    }\n    */\n    try {\n        let key;\n        if (typeof window !== 'undefined') {\n            // browser environments\n            key = `${window.location.href}-${componentType}-${variant || ''}`;\n        }\n        else {\n            // node/SSR environments\n            key = `${componentType}-${variant || ''}`;\n        }\n        if (!ouiaIdByRoute[key]) {\n            ouiaIdByRoute[key] = 0;\n        }\n        return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++ouiaIdByRoute[key]}`;\n    }\n    catch (exception) {\n        return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++uid}`;\n    }\n}\n//# sourceMappingURL=ouia.js.map"]},"metadata":{},"sourceType":"module"}