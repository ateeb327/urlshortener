{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nconst ThBase = _a => {\n  var {\n      children,\n      className,\n      component = 'th',\n      dataLabel,\n      scope = 'col',\n      textCenter = false,\n      sort = null,\n      modifier,\n      select = null,\n      expand: collapse = null,\n      tooltip = '',\n      onMouseEnter: onMouseEnterProp = () => {},\n      width,\n      visibility,\n      innerRef,\n      info: infoProps,\n      isStickyColumn = false,\n      hasRightBorder = false,\n      hasLeftBorder = false,\n      stickyMinWidth = '120px',\n      stickyLeftOffset,\n      stickyRightOffset,\n      isSubheader = false\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"component\", \"dataLabel\", \"scope\", \"textCenter\", \"sort\", \"modifier\", \"select\", \"expand\", \"tooltip\", \"onMouseEnter\", \"width\", \"visibility\", \"innerRef\", \"info\", \"isStickyColumn\", \"hasRightBorder\", \"hasLeftBorder\", \"stickyMinWidth\", \"stickyLeftOffset\", \"stickyRightOffset\", \"isSubheader\"]);\n  const [showTooltip, setShowTooltip] = React.useState(false);\n  const onMouseEnter = event => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      !showTooltip && setShowTooltip(true);\n    } else {\n      showTooltip && setShowTooltip(false);\n    }\n    onMouseEnterProp(event);\n  };\n  let sortParams = null;\n  if (sort) {\n    if (sort.isFavorites) {\n      sortParams = sortableFavorites({\n        onSort: sort === null || sort === void 0 ? void 0 : sort.onSort,\n        columnIndex: sort.columnIndex,\n        sortBy: sort.sortBy\n      })();\n    } else {\n      sortParams = sortable(children, {\n        columnIndex: sort.columnIndex,\n        column: {\n          extraParams: {\n            sortBy: sort.sortBy,\n            onSort: sort === null || sort === void 0 ? void 0 : sort.onSort\n          }\n        }\n      });\n    }\n  }\n  const selectParams = select ? selectable(children, {\n    rowData: {\n      selected: select.isSelected,\n      disableSelection: select === null || select === void 0 ? void 0 : select.isDisabled,\n      props: select === null || select === void 0 ? void 0 : select.props\n    },\n    column: {\n      extraParams: {\n        onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n        selectVariant: 'checkbox',\n        allRowsSelected: select.isSelected,\n        isHeaderSelectDisabled: !!select.isHeaderSelectDisabled\n      }\n    }\n  }) : null;\n  const collapseParams = collapse ? collapsible(children, {\n    column: {\n      extraParams: {\n        onCollapse: collapse === null || collapse === void 0 ? void 0 : collapse.onToggle,\n        allRowsExpanded: !collapse.areAllExpanded,\n        collapseAllAriaLabel: ''\n      }\n    }\n  }) : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility ? classNames(...visibility.map(vis => Visibility[vis]))() : null;\n  let transformedChildren = (sortParams === null || sortParams === void 0 ? void 0 : sortParams.children) || (selectParams === null || selectParams === void 0 ? void 0 : selectParams.children) || (collapseParams === null || collapseParams === void 0 ? void 0 : collapseParams.children) || children;\n  // info can wrap other transformedChildren\n  let infoParams = null;\n  if (infoProps) {\n    infoParams = info(infoProps)(transformedChildren);\n    transformedChildren = infoParams.children;\n  }\n  const merged = mergeProps(sortParams, selectParams, collapseParams, widthParams, visibilityParams, infoParams);\n  const {\n      // ignore the merged children since we transform them ourselves so we can wrap it with info\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      children: mergedChildren = null,\n      // selectable adds this but we don't want it\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isVisible = null,\n      className: mergedClassName = '',\n      component: MergedComponent = component\n    } = merged,\n    mergedProps = __rest(merged, [\"children\", \"isVisible\", \"className\", \"component\"]);\n  const cell = React.createElement(MergedComponent, Object.assign({\n    \"data-label\": dataLabel,\n    onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp,\n    scope: component === 'th' && children ? scope : null,\n    ref: innerRef,\n    className: css(className, textCenter && styles.modifiers.center, isSubheader && styles.tableSubhead, isStickyColumn && scrollStyles.tableStickyColumn, hasRightBorder && scrollStyles.modifiers.borderRight, hasLeftBorder && scrollStyles.modifiers.borderLeft, modifier && styles.modifiers[modifier], mergedClassName)\n  }, mergedProps, props, isStickyColumn && {\n    style: Object.assign({\n      '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined,\n      '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined,\n      right: stickyRightOffset ? stickyRightOffset : 0\n    }, props.style)\n  }), transformedChildren);\n  const canMakeDefaultTooltip = tooltip === '' ? typeof transformedChildren === 'string' : true;\n  return tooltip !== null && canMakeDefaultTooltip && showTooltip ? React.createElement(Tooltip, {\n    content: tooltip || tooltip === '' && children,\n    isVisible: true\n  }, cell) : cell;\n};\nexport const Th = React.forwardRef((props, ref) => React.createElement(ThBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTh.displayName = 'Th';","map":{"version":3,"sources":["../../../../src/components/TableComposable/Th.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nconst ThBase = (_a) => {\n    var { children, className, component = 'th', dataLabel, scope = 'col', textCenter = false, sort = null, modifier, select = null, expand: collapse = null, tooltip = '', onMouseEnter: onMouseEnterProp = () => { }, width, visibility, innerRef, info: infoProps, isStickyColumn = false, hasRightBorder = false, hasLeftBorder = false, stickyMinWidth = '120px', stickyLeftOffset, stickyRightOffset, isSubheader = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"dataLabel\", \"scope\", \"textCenter\", \"sort\", \"modifier\", \"select\", \"expand\", \"tooltip\", \"onMouseEnter\", \"width\", \"visibility\", \"innerRef\", \"info\", \"isStickyColumn\", \"hasRightBorder\", \"hasLeftBorder\", \"stickyMinWidth\", \"stickyLeftOffset\", \"stickyRightOffset\", \"isSubheader\"]);\n    const [showTooltip, setShowTooltip] = React.useState(false);\n    const onMouseEnter = (event) => {\n        if (event.target.offsetWidth < event.target.scrollWidth) {\n            !showTooltip && setShowTooltip(true);\n        }\n        else {\n            showTooltip && setShowTooltip(false);\n        }\n        onMouseEnterProp(event);\n    };\n    let sortParams = null;\n    if (sort) {\n        if (sort.isFavorites) {\n            sortParams = sortableFavorites({\n                onSort: sort === null || sort === void 0 ? void 0 : sort.onSort,\n                columnIndex: sort.columnIndex,\n                sortBy: sort.sortBy\n            })();\n        }\n        else {\n            sortParams = sortable(children, {\n                columnIndex: sort.columnIndex,\n                column: {\n                    extraParams: {\n                        sortBy: sort.sortBy,\n                        onSort: sort === null || sort === void 0 ? void 0 : sort.onSort\n                    }\n                }\n            });\n        }\n    }\n    const selectParams = select\n        ? selectable(children, {\n            rowData: {\n                selected: select.isSelected,\n                disableSelection: select === null || select === void 0 ? void 0 : select.isDisabled,\n                props: select === null || select === void 0 ? void 0 : select.props\n            },\n            column: {\n                extraParams: {\n                    onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n                    selectVariant: 'checkbox',\n                    allRowsSelected: select.isSelected,\n                    isHeaderSelectDisabled: !!select.isHeaderSelectDisabled\n                }\n            }\n        })\n        : null;\n    const collapseParams = collapse\n        ? collapsible(children, {\n            column: {\n                extraParams: {\n                    onCollapse: collapse === null || collapse === void 0 ? void 0 : collapse.onToggle,\n                    allRowsExpanded: !collapse.areAllExpanded,\n                    collapseAllAriaLabel: ''\n                }\n            }\n        })\n        : null;\n    const widthParams = width ? cellWidth(width)() : null;\n    const visibilityParams = visibility\n        ? classNames(...visibility.map((vis) => Visibility[vis]))()\n        : null;\n    let transformedChildren = (sortParams === null || sortParams === void 0 ? void 0 : sortParams.children) || (selectParams === null || selectParams === void 0 ? void 0 : selectParams.children) || (collapseParams === null || collapseParams === void 0 ? void 0 : collapseParams.children) || children;\n    // info can wrap other transformedChildren\n    let infoParams = null;\n    if (infoProps) {\n        infoParams = info(infoProps)(transformedChildren);\n        transformedChildren = infoParams.children;\n    }\n    const merged = mergeProps(sortParams, selectParams, collapseParams, widthParams, visibilityParams, infoParams);\n    const { \n    // ignore the merged children since we transform them ourselves so we can wrap it with info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    children: mergedChildren = null, \n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null, className: mergedClassName = '', component: MergedComponent = component } = merged, mergedProps = __rest(merged, [\"children\", \"isVisible\", \"className\", \"component\"]);\n    const cell = (React.createElement(MergedComponent, Object.assign({ \"data-label\": dataLabel, onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp, scope: component === 'th' && children ? scope : null, ref: innerRef, className: css(className, textCenter && styles.modifiers.center, isSubheader && styles.tableSubhead, isStickyColumn && scrollStyles.tableStickyColumn, hasRightBorder && scrollStyles.modifiers.borderRight, hasLeftBorder && scrollStyles.modifiers.borderLeft, modifier && styles.modifiers[modifier], mergedClassName) }, mergedProps, props, (isStickyColumn && {\n        style: Object.assign({ '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined, '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined, right: stickyRightOffset ? stickyRightOffset : 0 }, props.style)\n    })), transformedChildren));\n    const canMakeDefaultTooltip = tooltip === '' ? typeof transformedChildren === 'string' : true;\n    return tooltip !== null && canMakeDefaultTooltip && showTooltip ? (React.createElement(Tooltip, { content: tooltip || (tooltip === '' && children), isVisible: true }, cell)) : (cell);\n};\nexport const Th = React.forwardRef((props, ref) => (React.createElement(ThBase, Object.assign({}, props, { innerRef: ref }))));\nTh.displayName = 'Th';\n//# sourceMappingURL=Th.js.map"]},"metadata":{},"sourceType":"module"}