{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/Breadcrumb/breadcrumb';\nimport { css } from '@patternfly/react-styles';\nexport const BreadcrumbItem = _a => {\n  var {\n      children = null,\n      className: classNameProp = '',\n      to = undefined,\n      isActive = false,\n      isDropdown = false,\n      showDivider,\n      target = undefined,\n      component = 'a',\n      render = undefined\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"to\", \"isActive\", \"isDropdown\", \"showDivider\", \"target\", \"component\", \"render\"]);\n  const Component = component;\n  const ariaCurrent = isActive ? 'page' : undefined;\n  const className = css(styles.breadcrumbLink, isActive && styles.modifiers.current);\n  return React.createElement(\"li\", Object.assign({}, props, {\n    className: css(styles.breadcrumbItem, classNameProp)\n  }), showDivider && React.createElement(\"span\", {\n    className: styles.breadcrumbItemDivider\n  }, React.createElement(AngleRightIcon, null)), component === 'button' && React.createElement(\"button\", {\n    className: className,\n    \"aria-current\": ariaCurrent,\n    type: \"button\"\n  }, children), isDropdown && React.createElement(\"span\", {\n    className: css(styles.breadcrumbDropdown)\n  }, children), render && render({\n    className,\n    ariaCurrent\n  }), to && !render && React.createElement(Component, {\n    href: to,\n    target: target,\n    className: className,\n    \"aria-current\": ariaCurrent\n  }, children), !to && component !== 'button' && !isDropdown && children);\n};\nBreadcrumbItem.displayName = 'BreadcrumbItem';","map":{"version":3,"sources":["../../../../src/components/Breadcrumb/BreadcrumbItem.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,cAAc,MAAM,yDAAyD;AACpF,OAAO,MAAM,MAAM,+DAA+D;AAClF,SAAS,GAAG,QAAQ,0BAA0B;AA4B9C,OAAO,MAAM,cAAc,GAAkD,EAWvD,IAAI;MAXmD;MAC3E,QAAQ,GAAG,IAAI;MACf,SAAS,EAAE,aAAa,GAAG,EAAE;MAC7B,EAAE,GAAG,SAAS;MACd,QAAQ,GAAG,KAAK;MAChB,UAAU,GAAG,KAAK;MAClB,WAAW;MACX,MAAM,GAAG,SAAS;MAClB,SAAS,GAAG,GAAG;MACf,MAAM,GAAG;IAAS,CAAA,GAAA,EAEE;IADjB,KAAK,GAAA,MAAA,CAAA,EAAA,EAVmE,CAAA,UAAA,EAAA,WAAA,EAAA,IAAA,EAAA,UAAA,EAAA,YAAA,EAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,QAAA,CAW5E,CADS;EAER,MAAM,SAAS,GAAG,SAAS;EAC3B,MAAM,WAAW,GAAG,QAAQ,GAAG,MAAM,GAAG,SAAS;EACjD,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;EAClF,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,KAAK,EAAA;IAAE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,aAAa;EAAC,CAAA,CAAA,EAChE,WAAW,IACV,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,MAAM,CAAC;EAAqB,CAAA,EAC3C,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA,IAAA,CAAG,CAErB,EACA,SAAS,KAAK,QAAQ,IACrB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IAAQ,SAAS,EAAE,SAAS;IAAA,cAAA,EAAgB,WAAW;IAAE,IAAI,EAAC;EAAQ,CAAA,EACnE,QAAQ,CAEZ,EACA,UAAU,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAkB;EAAC,CAAA,EAAG,QAAQ,CAAQ,EAChF,MAAM,IAAI,MAAM,CAAC;IAAE,SAAS;IAAE;EAAW,CAAE,CAAC,EAC5C,EAAE,IAAI,CAAC,MAAM,IACZ,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IAAC,IAAI,EAAE,EAAE;IAAE,MAAM,EAAE,MAAM;IAAE,SAAS,EAAE,SAAS;IAAA,cAAA,EAAgB;EAAW,CAAA,EACjF,QAAQ,CAEZ,EACA,CAAC,EAAE,IAAI,SAAS,KAAK,QAAQ,IAAI,CAAC,UAAU,IAAI,QAAQ,CACtD;AAET,CAAC;AACD,cAAc,CAAC,WAAW,GAAG,gBAAgB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/Breadcrumb/breadcrumb';\nimport { css } from '@patternfly/react-styles';\nexport const BreadcrumbItem = (_a) => {\n    var { children = null, className: classNameProp = '', to = undefined, isActive = false, isDropdown = false, showDivider, target = undefined, component = 'a', render = undefined } = _a, props = __rest(_a, [\"children\", \"className\", \"to\", \"isActive\", \"isDropdown\", \"showDivider\", \"target\", \"component\", \"render\"]);\n    const Component = component;\n    const ariaCurrent = isActive ? 'page' : undefined;\n    const className = css(styles.breadcrumbLink, isActive && styles.modifiers.current);\n    return (React.createElement(\"li\", Object.assign({}, props, { className: css(styles.breadcrumbItem, classNameProp) }),\n        showDivider && (React.createElement(\"span\", { className: styles.breadcrumbItemDivider },\n            React.createElement(AngleRightIcon, null))),\n        component === 'button' && (React.createElement(\"button\", { className: className, \"aria-current\": ariaCurrent, type: \"button\" }, children)),\n        isDropdown && React.createElement(\"span\", { className: css(styles.breadcrumbDropdown) }, children),\n        render && render({ className, ariaCurrent }),\n        to && !render && (React.createElement(Component, { href: to, target: target, className: className, \"aria-current\": ariaCurrent }, children)),\n        !to && component !== 'button' && !isDropdown && children));\n};\nBreadcrumbItem.displayName = 'BreadcrumbItem';\n//# sourceMappingURL=BreadcrumbItem.js.map"]},"metadata":{},"sourceType":"module"}