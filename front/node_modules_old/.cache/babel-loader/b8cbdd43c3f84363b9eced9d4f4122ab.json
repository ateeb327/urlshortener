{"ast":null,"code":"import { scopeColTransformer, emptyCol, mapProps, emptyTD, parentId } from './transformers';\nimport { selectable, cellActions, collapsible, expandedRow, editable, favoritable, sortableFavorites } from './decorators';\nimport { defaultTitle } from './formatters';\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = ({\n  transforms: origTransforms,\n  formatters: origFormatters,\n  columnTransforms,\n  header\n}, title) => Object.assign(Object.assign({}, header), {\n  label: title,\n  transforms: [scopeColTransformer, emptyCol, ...(origTransforms || []), ...(columnTransforms || []), ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])],\n  formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])]\n});\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\nconst generateCell = ({\n  cellFormatters,\n  cellTransforms,\n  columnTransforms,\n  cell\n},\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nextra) => Object.assign(Object.assign({}, cell), {\n  transforms: [...(cellTransforms || []), ...(columnTransforms || []), ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []), mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n  ],\n  formatters: [defaultTitle, ...(cellFormatters || []), ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])]\n});\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\nconst mapHeader = (column, extra, key, ...props) => {\n  const title = column.hasOwnProperty('title') ? column.title : column;\n  let dataLabel = `column-${key}`;\n  if (column.hasOwnProperty('dataLabel')) {\n    dataLabel = column.dataLabel;\n  } else if (typeof title === 'string') {\n    dataLabel = title;\n  }\n  return {\n    property: typeof title === 'string' && title.toLowerCase().trim().replace(/\\s/g, '-') || `column-${key}`,\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: Object.assign(Object.assign({\n      'data-label': dataLabel,\n      'data-key': key\n    }, column.hasOwnProperty('props') ? column.props : {}), props)\n  };\n};\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst selectableTransforms = ({\n  onSelect,\n  canSelectAll\n}) => [...(onSelect ? [{\n  title: '',\n  transforms: canSelectAll && [selectable] || null,\n  cellTransforms: [selectable]\n}] : [])];\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst favoritesTransforms = ({\n  onFavorite,\n  onSort,\n  sortBy,\n  canSortFavorites,\n  firstUserColumnIndex\n}) => [...(onFavorite ? [{\n  title: '',\n  transforms: onSort && canSortFavorites ? [scopeColTransformer, sortableFavorites({\n    onSort,\n    // favorites should be just before the first user-defined column\n    columnIndex: firstUserColumnIndex - 1,\n    sortBy\n  })] : [emptyTD],\n  cellTransforms: [favoritable]\n}] : [])];\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst actionsTransforms = ({\n  actions,\n  actionResolver,\n  areActionsDisabled\n}) => [...(actionResolver || actions ? [{\n  title: '',\n  transforms: [emptyTD],\n  cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n}] : [])];\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst collapsibleTransforms = (header, {\n  onCollapse,\n  canCollapseAll,\n  firstUserColumnIndex\n}) => [...(onCollapse ? [{\n  title: '',\n  transforms: canCollapseAll && [collapsible] || null,\n  cellTransforms: [collapsible, expandedRow(header.length, firstUserColumnIndex)]\n}] : [])];\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\nconst addAdditionalCellTranforms = (cell, additional) => Object.assign(Object.assign({}, cell.hasOwnProperty('title') ? cell : {\n  title: cell\n}), {\n  cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional]\n});\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\nconst expandContent = (header, extra) => {\n  if (!extra.onCollapse && !extra.onExpand) {\n    return header;\n  }\n  return header.map(cell => {\n    const parentIdCell = addAdditionalCellTranforms(cell, parentId);\n    return addAdditionalCellTranforms(parentIdCell, expandedRow(header.length));\n  });\n};\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\nexport const mapOpenedRows = (rows, children) => rows.reduce((acc, curr, key) => {\n  if (curr.hasOwnProperty('parent')) {\n    const parent = acc.length > 0 && acc[acc.length - 1];\n    if (parent) {\n      acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n      if (curr.hasOwnProperty('compoundParent')) {\n        // if this is compound expand, check for any open child cell\n        acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some(oneRow => oneRow.props.rowData.cells.some(oneCell => oneCell.props && oneCell.props.isOpen));\n      }\n    }\n  } else {\n    acc = [...acc, Object.assign(Object.assign({}, curr), {\n      rows: [children[key]]\n    })];\n  }\n  return acc;\n}, []);\nconst rowEditTransforms = ({\n  onRowEdit\n}) => [...(onRowEdit ? [{\n  title: '',\n  cellTransforms: [editable]\n}] : [])];\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\nexport const calculateColumns = (headerRows, extra) => headerRows && [...collapsibleTransforms(headerRows, extra), ...selectableTransforms(extra), ...favoritesTransforms(extra), ...expandContent(headerRows, extra), ...rowEditTransforms(extra), ...actionsTransforms(extra)].map((oneCol, key) => Object.assign({}, mapHeader(oneCol, extra, key)));","map":{"version":3,"sources":["../../../../../src/components/Table/utils/headerUtils.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { scopeColTransformer, emptyCol, mapProps, emptyTD, parentId } from './transformers';\nimport { selectable, cellActions, collapsible, expandedRow, editable, favoritable, sortableFavorites } from './decorators';\nimport { defaultTitle } from './formatters';\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = ({ transforms: origTransforms, formatters: origFormatters, columnTransforms, header }, title) => (Object.assign(Object.assign({}, header), { label: title, transforms: [\n        scopeColTransformer,\n        emptyCol,\n        ...(origTransforms || []),\n        ...(columnTransforms || []),\n        ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])\n    ], formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])] }));\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\nconst generateCell = ({ cellFormatters, cellTransforms, columnTransforms, cell }, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nextra) => (Object.assign(Object.assign({}, cell), { transforms: [\n        ...(cellTransforms || []),\n        ...(columnTransforms || []),\n        ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []),\n        mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n    ], formatters: [\n        defaultTitle,\n        ...(cellFormatters || []),\n        ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])\n    ] }));\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\nconst mapHeader = (column, extra, key, ...props) => {\n    const title = (column.hasOwnProperty('title') ? column.title : column);\n    let dataLabel = `column-${key}`;\n    if (column.hasOwnProperty('dataLabel')) {\n        dataLabel = column.dataLabel;\n    }\n    else if (typeof title === 'string') {\n        dataLabel = title;\n    }\n    return {\n        property: (typeof title === 'string' &&\n            title\n                .toLowerCase()\n                .trim()\n                .replace(/\\s/g, '-')) ||\n            `column-${key}`,\n        extraParams: extra,\n        data: column.data,\n        header: generateHeader(column, title),\n        cell: generateCell(column, extra),\n        props: Object.assign(Object.assign({ 'data-label': dataLabel, 'data-key': key }, (column.hasOwnProperty('props') ? column.props : {})), props)\n    };\n};\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst selectableTransforms = ({ onSelect, canSelectAll }) => [\n    ...(onSelect\n        ? [\n            {\n                title: '',\n                transforms: (canSelectAll && [selectable]) || null,\n                cellTransforms: [selectable]\n            }\n        ]\n        : [])\n];\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst favoritesTransforms = ({ onFavorite, onSort, sortBy, canSortFavorites, firstUserColumnIndex }) => [\n    ...(onFavorite\n        ? [\n            {\n                title: '',\n                transforms: onSort && canSortFavorites\n                    ? [\n                        scopeColTransformer,\n                        sortableFavorites({\n                            onSort,\n                            // favorites should be just before the first user-defined column\n                            columnIndex: firstUserColumnIndex - 1,\n                            sortBy\n                        })\n                    ]\n                    : [emptyTD],\n                cellTransforms: [favoritable]\n            }\n        ]\n        : [])\n];\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst actionsTransforms = ({ actions, actionResolver, areActionsDisabled }) => [\n    ...(actionResolver || actions\n        ? [\n            {\n                title: '',\n                transforms: [emptyTD],\n                cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n            }\n        ]\n        : [])\n];\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst collapsibleTransforms = (header, { onCollapse, canCollapseAll, firstUserColumnIndex }) => [\n    ...(onCollapse\n        ? [\n            {\n                title: '',\n                transforms: (canCollapseAll && [collapsible]) || null,\n                cellTransforms: [collapsible, expandedRow(header.length, firstUserColumnIndex)]\n            }\n        ]\n        : [])\n];\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\nconst addAdditionalCellTranforms = (cell, additional) => (Object.assign(Object.assign({}, (cell.hasOwnProperty('title') ? cell : { title: cell })), { cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional] }));\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\nconst expandContent = (header, extra) => {\n    if (!extra.onCollapse && !extra.onExpand) {\n        return header;\n    }\n    return header.map((cell) => {\n        const parentIdCell = addAdditionalCellTranforms(cell, parentId);\n        return addAdditionalCellTranforms(parentIdCell, expandedRow(header.length));\n    });\n};\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\nexport const mapOpenedRows = (rows, children) => rows.reduce((acc, curr, key) => {\n    if (curr.hasOwnProperty('parent')) {\n        const parent = acc.length > 0 && acc[acc.length - 1];\n        if (parent) {\n            acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n            if (curr.hasOwnProperty('compoundParent')) {\n                // if this is compound expand, check for any open child cell\n                acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some((oneRow) => oneRow.props.rowData.cells.some((oneCell) => oneCell.props && oneCell.props.isOpen));\n            }\n        }\n    }\n    else {\n        acc = [...acc, Object.assign(Object.assign({}, curr), { rows: [children[key]] })];\n    }\n    return acc;\n}, []);\nconst rowEditTransforms = ({ onRowEdit }) => [\n    ...(onRowEdit\n        ? [\n            {\n                title: '',\n                cellTransforms: [editable]\n            }\n        ]\n        : [])\n];\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\nexport const calculateColumns = (headerRows, extra) => headerRows &&\n    [\n        ...collapsibleTransforms(headerRows, extra),\n        ...selectableTransforms(extra),\n        ...favoritesTransforms(extra),\n        ...expandContent(headerRows, extra),\n        ...rowEditTransforms(extra),\n        ...actionsTransforms(extra)\n    ].map((oneCol, key) => (Object.assign({}, mapHeader(oneCol, extra, key))));\n//# sourceMappingURL=headerUtils.js.map"]},"metadata":{},"sourceType":"module"}