{"ast":null,"code":"// @ts-nocheck\nimport getWindow from './getWindow';\nimport getNodeName from './getNodeName';\nimport getComputedStyle from './getComputedStyle';\nimport { isHTMLElement } from './instanceOf';\nimport isTableElement from './isTableElement';\nimport getParentNode from './getParentNode';\nimport getDocumentElement from './getDocumentElement';\n/**\n * @param element\n */\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) ||\n  // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  const offsetParent = element.offsetParent;\n  if (offsetParent) {\n    const html = getDocumentElement(offsetParent);\n    if (getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && getComputedStyle(html).position !== 'static') {\n      return html;\n    }\n  }\n  return offsetParent;\n}\n// `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n/**\n * @param element\n */\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    const css = getComputedStyle(currentNode);\n    // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n  return null;\n}\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n/**\n * @param element\n */\nexport default function getOffsetParent(element) {\n  const window = getWindow(element);\n  let offsetParent = getTrueOffsetParent(element);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n  if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/dom-utils/getOffsetParent.ts"],"names":[],"mappings":"AAAA;AACA,OAAO,SAAS,MAAM,aAAa;AACnC,OAAO,WAAW,MAAM,eAAe;AACvC,OAAO,gBAAgB,MAAM,oBAAoB;AACjD,SAAS,aAAa,QAAQ,cAAc;AAC5C,OAAO,cAAc,MAAM,kBAAkB;AAC7C,OAAO,aAAa,MAAM,iBAAiB;AAC3C,OAAO,kBAAkB,MAAM,sBAAsB;AAErD;;AAEG;AACH,SAAS,mBAAmB,CAAC,OAAgB,EAAA;EAC3C,IACE,CAAC,aAAa,CAAC,OAAO,CAAC;EAAI;EAC3B,gBAAgB,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK,OAAO,EAC9C;IACA,OAAO,IAAI;EACZ;EAED,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY;EAEzC,IAAI,YAAY,EAAE;IAChB,MAAM,IAAI,GAAG,kBAAkB,CAAC,YAAY,CAAC;IAE7C,IACE,WAAW,CAAC,YAAY,CAAC,KAAK,MAAM,IACpC,gBAAgB,CAAC,YAAY,CAAC,CAAC,QAAQ,KAAK,QAAQ,IACpD,gBAAgB,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAC5C;MACA,OAAO,IAAI;IACZ;EACF;EAED,OAAO,YAAY;AACrB;AAEA;AACA;AACA;;AAEG;AACH,SAAS,kBAAkB,CAAC,OAAgB,EAAA;EAC1C,IAAI,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC;EAExC,OAAO,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE;IAC3F,MAAM,GAAG,GAAG,gBAAgB,CAAC,WAAW,CAAC;IAEzC;IACA;IACA,IAAI,GAAG,CAAC,SAAS,KAAK,MAAM,IAAI,GAAG,CAAC,WAAW,KAAK,MAAM,IAAK,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,KAAK,MAAO,EAAE;MAC3G,OAAO,WAAW;KACnB,MAAM;MACL,WAAW,GAAG,WAAW,CAAC,UAAU;IACrC;EACF;EAED,OAAO,IAAI;AACb;AAEA;AACA;AACA;;AAEG;AACH,eAAc,SAAU,eAAe,CAAC,OAAgB,EAAA;EACtD,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC;EAEjC,IAAI,YAAY,GAAG,mBAAmB,CAAC,OAAO,CAAC;EAE/C,OAAO,YAAY,IAAI,cAAc,CAAC,YAAY,CAAC,IAAI,gBAAgB,CAAC,YAAY,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;IAC3G,YAAY,GAAG,mBAAmB,CAAC,YAAY,CAAC;EACjD;EAED,IAAI,YAAY,IAAI,WAAW,CAAC,YAAY,CAAC,KAAK,MAAM,IAAI,gBAAgB,CAAC,YAAY,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;IAChH,OAAO,MAAM;EACd;EAED,OAAO,YAAY,IAAI,kBAAkB,CAAC,OAAO,CAAC,IAAI,MAAM;AAC9D","sourceRoot":"","sourcesContent":["// @ts-nocheck\nimport getWindow from './getWindow';\nimport getNodeName from './getNodeName';\nimport getComputedStyle from './getComputedStyle';\nimport { isHTMLElement } from './instanceOf';\nimport isTableElement from './isTableElement';\nimport getParentNode from './getParentNode';\nimport getDocumentElement from './getDocumentElement';\n/**\n * @param element\n */\nfunction getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n        getComputedStyle(element).position === 'fixed') {\n        return null;\n    }\n    const offsetParent = element.offsetParent;\n    if (offsetParent) {\n        const html = getDocumentElement(offsetParent);\n        if (getNodeName(offsetParent) === 'body' &&\n            getComputedStyle(offsetParent).position === 'static' &&\n            getComputedStyle(html).position !== 'static') {\n            return html;\n        }\n    }\n    return offsetParent;\n}\n// `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n/**\n * @param element\n */\nfunction getContainingBlock(element) {\n    let currentNode = getParentNode(element);\n    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n        const css = getComputedStyle(currentNode);\n        // This is non-exhaustive but covers the most common CSS properties that\n        // create a containing block.\n        if (css.transform !== 'none' || css.perspective !== 'none' || (css.willChange && css.willChange !== 'auto')) {\n            return currentNode;\n        }\n        else {\n            currentNode = currentNode.parentNode;\n        }\n    }\n    return null;\n}\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n/**\n * @param element\n */\nexport default function getOffsetParent(element) {\n    const window = getWindow(element);\n    let offsetParent = getTrueOffsetParent(element);\n    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n        offsetParent = getTrueOffsetParent(offsetParent);\n    }\n    if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') {\n        return window;\n    }\n    return offsetParent || getContainingBlock(element) || window;\n}\n//# sourceMappingURL=getOffsetParent.js.map"]},"metadata":{},"sourceType":"module"}