{"ast":null,"code":"import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\nexport const createRenderableFavorites = (items, isGrouped, favorites, isEnterTriggersArrowDown) => {\n  if (isGrouped) {\n    const favoriteItems = [];\n    items.forEach(group => {\n      if (favorites.length > 0) {\n        return group.props.children && group.props.children.filter(item => favorites.includes(item.props.id)).map(item => {\n          if (isEnterTriggersArrowDown) {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              enterTriggersArrowDown: isEnterTriggersArrowDown,\n              id: `favorite-${item.props.id}`\n            }));\n          } else {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              id: `favorite-${item.props.id}`\n            }));\n          }\n        });\n      }\n    });\n    return favoriteItems;\n  }\n  return items.filter(item => favorites.includes(item.props.id)).map(item => React.cloneElement(item, {\n    isFavorite: true,\n    enterTriggersArrowDown: isEnterTriggersArrowDown\n  }));\n};\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\nexport const extendItemsWithFavorite = (items, isGrouped, favorites) => {\n  if (isGrouped) {\n    return items.map(group => React.cloneElement(group, {\n      children: React.Children.map(group.props.children, item => {\n        if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n          return item;\n        }\n        return React.cloneElement(item, {\n          isFavorite: favorites.some(favoriteId => favoriteId === item.props.id || `favorite-${favoriteId}` === item.props.id)\n        });\n      })\n    }));\n  }\n  return items.map(item => React.cloneElement(item, {\n    isFavorite: favorites.some(favoriteId => favoriteId === item.props.id)\n  }));\n};","map":{"version":3,"sources":["../../../src/helpers/favorites.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,4BAA4B,QAAQ,gEAAgE;AAC7G,SAAS,OAAO,QAAQ,+BAA+B;AAEvD;;;;;;;AAOG;AACH,OAAO,MAAM,yBAAyB,GAAG,CACvC,KAAa,EACb,SAAkB,EAClB,SAAgB,EAChB,wBAAkC,KAChC;EACF,IAAI,SAAS,EAAE;IACb,MAAM,aAAa,GAAsB,EAAE;IAC1C,KAA8B,CAAC,OAAO,CAAC,KAAK,IAAG;MAC9C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;QACxB,OACE,KAAK,CAAC,KAAK,CAAC,QAAQ,IACnB,KAAK,CAAC,KAAK,CAAC,QAAiC,CAC3C,MAAM,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CACjD,GAAG,CAAC,IAAI,IAAG;UACV,IAAI,wBAAwB,EAAE;YAC5B,OAAO,aAAa,CAAC,IAAI,CACvB,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE;cACvB,UAAU,EAAE,IAAI;cAChB,sBAAsB,EAAE,wBAAwB;cAChD,EAAE,EAAE,YAAY,IAAI,CAAC,KAAK,CAAC,EAAE;aAC9B,CAAC,CACH;WACF,MAAM;YACL,OAAO,aAAa,CAAC,IAAI,CACvB,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE;cAAE,UAAU,EAAE,IAAI;cAAE,EAAE,EAAE,YAAY,IAAI,CAAC,KAAK,CAAC,EAAE;YAAE,CAAE,CAAC,CAChF;UACF;QACH,CAAC,CAAC;MAEP;IACH,CAAC,CAAC;IACF,OAAO,aAAa;EACrB;EACD,OAAQ,KAA8B,CACnC,MAAM,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CACjD,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE;IAAE,UAAU,EAAE,IAAI;IAAE,sBAAsB,EAAE;EAAwB,CAAE,CAAC,CAAC;AAClH,CAAC;AAED;;;;;;AAMG;AACH,OAAO,MAAM,uBAAuB,GAAG,CAAC,KAAa,EAAE,SAAkB,EAAE,SAAgB,KAAI;EAC7F,IAAI,SAAS,EAAE;IACb,OAAQ,KAA8B,CAAC,GAAG,CAAC,KAAK,IAC9C,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE;MACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,QAAgC,EAAE,IAAI,IAAG;QAChF,IAAI,IAAI,CAAC,IAAI,KAAK,4BAA4B,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;UACvE,OAAO,IAAI;QACZ;QACD,OAAO,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE;UAC9B,UAAU,EAAE,SAAS,CAAC,IAAI,CACxB,UAAU,IAAI,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,YAAY,UAAU,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,EAAE;SAE3F,CAAC;MACJ,CAAC;KACF,CAAC,CACH;EACF;EACD,OAAQ,KAA8B,CAAC,GAAG,CAAC,IAAI,IAC7C,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE;IACvB,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,IAAI,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,EAAE;GACtE,CAAC,CACH;AACH,CAAC","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\nexport const createRenderableFavorites = (items, isGrouped, favorites, isEnterTriggersArrowDown) => {\n    if (isGrouped) {\n        const favoriteItems = [];\n        items.forEach(group => {\n            if (favorites.length > 0) {\n                return (group.props.children &&\n                    group.props.children\n                        .filter(item => favorites.includes(item.props.id))\n                        .map(item => {\n                        if (isEnterTriggersArrowDown) {\n                            return favoriteItems.push(React.cloneElement(item, {\n                                isFavorite: true,\n                                enterTriggersArrowDown: isEnterTriggersArrowDown,\n                                id: `favorite-${item.props.id}`\n                            }));\n                        }\n                        else {\n                            return favoriteItems.push(React.cloneElement(item, { isFavorite: true, id: `favorite-${item.props.id}` }));\n                        }\n                    }));\n            }\n        });\n        return favoriteItems;\n    }\n    return items\n        .filter(item => favorites.includes(item.props.id))\n        .map(item => React.cloneElement(item, { isFavorite: true, enterTriggersArrowDown: isEnterTriggersArrowDown }));\n};\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\nexport const extendItemsWithFavorite = (items, isGrouped, favorites) => {\n    if (isGrouped) {\n        return items.map(group => React.cloneElement(group, {\n            children: React.Children.map(group.props.children, item => {\n                if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n                    return item;\n                }\n                return React.cloneElement(item, {\n                    isFavorite: favorites.some(favoriteId => favoriteId === item.props.id || `favorite-${favoriteId}` === item.props.id)\n                });\n            })\n        }));\n    }\n    return items.map(item => React.cloneElement(item, {\n        isFavorite: favorites.some(favoriteId => favoriteId === item.props.id)\n    }));\n};\n//# sourceMappingURL=favorites.js.map"]},"metadata":{},"sourceType":"module"}