{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\nexport const AccordionToggle = _a => {\n  var {\n      className = '',\n      id,\n      isExpanded = false,\n      children = null,\n      component\n    } = _a,\n    props = __rest(_a, [\"className\", \"id\", \"isExpanded\", \"children\", \"component\"]);\n  return React.createElement(AccordionContext.Consumer, null, ({\n    ToggleContainer\n  }) => {\n    const Container = component || ToggleContainer;\n    return React.createElement(Container, null, React.createElement(\"button\", Object.assign({\n      id: id,\n      className: css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className),\n      \"aria-expanded\": isExpanded,\n      type: \"button\"\n    }, props), React.createElement(\"span\", {\n      className: css(styles.accordionToggleText)\n    }, children), React.createElement(\"span\", {\n      className: css(styles.accordionToggleIcon)\n    }, React.createElement(AngleRightIcon, null))));\n  });\n};\nAccordionToggle.displayName = 'AccordionToggle';","map":{"version":3,"sources":["../../../../src/components/Accordion/AccordionToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,6DAA6D;AAChF,OAAO,cAAc,MAAM,yDAAyD;AACpF,SAAS,gBAAgB,QAAQ,oBAAoB;AAgBrD,OAAO,MAAM,eAAe,GAAmD,EAOxD,IAAI;MAPoD;MAC7E,SAAS,GAAG,EAAE;MACd,EAAE;MACF,UAAU,GAAG,KAAK;MAClB,QAAQ,GAAG,IAAI;MACf;IAAS,CAAA,GAAA,EAEY;IADlB,KAAK,GAAA,MAAA,CAAA,EAAA,EANqE,CAAA,WAAA,EAAA,IAAA,EAAA,YAAA,EAAA,UAAA,EAAA,WAAA,CAO9E,CADS;EACkB,OAC1B,KAAA,CAAA,aAAA,CAAC,gBAAgB,CAAC,QAAQ,EAAA,IAAA,EACvB,CAAC;IAAE;EAAe,CAAE,KAAI;IACvB,MAAM,SAAS,GAAG,SAAS,IAAI,eAAe;IAC9C,OACE,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA,IAAA,EACR,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MACE,EAAE,EAAE,EAAE;MACN,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC;MAAA,eAAA,EAC3E,UAAU;MACzB,IAAI,EAAC;IAAQ,CAAA,EACT,KAAK,CAAA,EAET,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,mBAAmB;IAAC,CAAA,EAAG,QAAQ,CAAQ,EACnE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,mBAAmB;IAAC,CAAA,EAC9C,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA,IAAA,CAAG,CACb,CACA,CACC;EAEhB,CAAC,CACyB;CAC7B;AACD,eAAe,CAAC,WAAW,GAAG,iBAAiB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\nexport const AccordionToggle = (_a) => {\n    var { className = '', id, isExpanded = false, children = null, component } = _a, props = __rest(_a, [\"className\", \"id\", \"isExpanded\", \"children\", \"component\"]);\n    return (React.createElement(AccordionContext.Consumer, null, ({ ToggleContainer }) => {\n        const Container = component || ToggleContainer;\n        return (React.createElement(Container, null,\n            React.createElement(\"button\", Object.assign({ id: id, className: css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className), \"aria-expanded\": isExpanded, type: \"button\" }, props),\n                React.createElement(\"span\", { className: css(styles.accordionToggleText) }, children),\n                React.createElement(\"span\", { className: css(styles.accordionToggleIcon) },\n                    React.createElement(AngleRightIcon, null)))));\n    }));\n};\nAccordionToggle.displayName = 'AccordionToggle';\n//# sourceMappingURL=AccordionToggle.js.map"]},"metadata":{},"sourceType":"module"}