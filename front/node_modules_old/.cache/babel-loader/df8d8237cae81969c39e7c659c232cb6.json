{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const FormGroup = _a => {\n  var {\n      children = null,\n      className = '',\n      label,\n      labelInfo,\n      labelIcon,\n      isRequired = false,\n      validated = 'default',\n      isInline = false,\n      hasNoPaddingTop = false,\n      isStack = false,\n      helperText,\n      isHelperTextBeforeField = false,\n      helperTextInvalid,\n      helperTextIcon,\n      helperTextInvalidIcon,\n      fieldId,\n      role\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"validated\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"helperText\", \"isHelperTextBeforeField\", \"helperTextInvalid\", \"helperTextIcon\", \"helperTextInvalidIcon\", \"fieldId\", \"role\"]);\n  const validHelperText = typeof helperText !== 'string' ? helperText : React.createElement(\"div\", {\n    className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextIcon), helperText);\n  const inValidHelperText = typeof helperTextInvalid !== 'string' ? helperTextInvalid : React.createElement(\"div\", {\n    className: css(styles.formHelperText, styles.modifiers.error),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextInvalidIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextInvalidIcon), helperTextInvalid);\n  const showValidHelperTxt = validationType => validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n  const helperTextToDisplay = validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n  const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n  const labelContent = React.createElement(React.Fragment, null, React.createElement(LabelComponent, Object.assign({\n    className: css(styles.formLabel)\n  }, !isGroupOrRadioGroup && {\n    htmlFor: fieldId\n  }), React.createElement(\"span\", {\n    className: css(styles.formLabelText)\n  }, label), isRequired && React.createElement(\"span\", {\n    className: css(styles.formLabelRequired),\n    \"aria-hidden\": \"true\"\n  }, ' ', ASTERISK)), ' ', React.isValidElement(labelIcon) && labelIcon);\n  return React.createElement(GenerateId, null, randomId => React.createElement(\"div\", Object.assign({\n    className: css(styles.formGroup, className)\n  }, role && {\n    role\n  }, isGroupOrRadioGroup && {\n    'aria-labelledby': `${fieldId || randomId}-legend`\n  }, props), label && React.createElement(\"div\", Object.assign({\n    className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop)\n  }, isGroupOrRadioGroup && {\n    id: `${fieldId || randomId}-legend`\n  }), labelInfo && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.formGroupLabelMain)\n  }, labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupLabelInfo)\n  }, labelInfo)), !labelInfo && labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack)\n  }, isHelperTextBeforeField && helperTextToDisplay, children, !isHelperTextBeforeField && helperTextToDisplay)));\n};\nFormGroup.displayName = 'FormGroup';","map":{"version":3,"sources":["../../../../src/components/Form/FormGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const FormGroup = (_a) => {\n    var { children = null, className = '', label, labelInfo, labelIcon, isRequired = false, validated = 'default', isInline = false, hasNoPaddingTop = false, isStack = false, helperText, isHelperTextBeforeField = false, helperTextInvalid, helperTextIcon, helperTextInvalidIcon, fieldId, role } = _a, props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"validated\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"helperText\", \"isHelperTextBeforeField\", \"helperTextInvalid\", \"helperTextIcon\", \"helperTextInvalidIcon\", \"fieldId\", \"role\"]);\n    const validHelperText = typeof helperText !== 'string' ? (helperText) : (React.createElement(\"div\", { className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning), id: `${fieldId}-helper`, \"aria-live\": \"polite\" },\n        helperTextIcon && React.createElement(\"span\", { className: css(styles.formHelperTextIcon) }, helperTextIcon),\n        helperText));\n    const inValidHelperText = typeof helperTextInvalid !== 'string' ? (helperTextInvalid) : (React.createElement(\"div\", { className: css(styles.formHelperText, styles.modifiers.error), id: `${fieldId}-helper`, \"aria-live\": \"polite\" },\n        helperTextInvalidIcon && React.createElement(\"span\", { className: css(styles.formHelperTextIcon) }, helperTextInvalidIcon),\n        helperTextInvalid));\n    const showValidHelperTxt = (validationType) => validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n    const helperTextToDisplay = validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n    const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n    const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n    const labelContent = (React.createElement(React.Fragment, null,\n        React.createElement(LabelComponent, Object.assign({ className: css(styles.formLabel) }, (!isGroupOrRadioGroup && { htmlFor: fieldId })),\n            React.createElement(\"span\", { className: css(styles.formLabelText) }, label),\n            isRequired && (React.createElement(\"span\", { className: css(styles.formLabelRequired), \"aria-hidden\": \"true\" },\n                ' ',\n                ASTERISK))),\n        ' ',\n        React.isValidElement(labelIcon) && labelIcon));\n    return (React.createElement(GenerateId, null, randomId => (React.createElement(\"div\", Object.assign({ className: css(styles.formGroup, className) }, (role && { role }), (isGroupOrRadioGroup && { 'aria-labelledby': `${fieldId || randomId}-legend` }), props),\n        label && (React.createElement(\"div\", Object.assign({ className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop) }, (isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` })),\n            labelInfo && (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: css(styles.formGroupLabelMain) }, labelContent),\n                React.createElement(\"div\", { className: css(styles.formGroupLabelInfo) }, labelInfo))),\n            !labelInfo && labelContent)),\n        React.createElement(\"div\", { className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack) },\n            isHelperTextBeforeField && helperTextToDisplay,\n            children,\n            !isHelperTextBeforeField && helperTextToDisplay)))));\n};\nFormGroup.displayName = 'FormGroup';\n//# sourceMappingURL=FormGroup.js.map"]},"metadata":{},"sourceType":"module"}