{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\nimport { Tooltip } from '../Tooltip';\nexport const variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\nexport const NotificationDrawerListItemHeader = _a => {\n  var {\n      children,\n      className = '',\n      icon = null,\n      srTitle,\n      title,\n      variant = 'default',\n      truncateTitle = 0,\n      tooltipPosition,\n      headingLevel: HeadingLevel = 'h2'\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\", \"headingLevel\"]);\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Icon = variantIcons[variant];\n  const Title = React.createElement(HeadingLevel, Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)\n  }), srTitle && React.createElement(\"span\", {\n    className: css(a11yStyles.screenReader)\n  }, srTitle), title);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerListItemHeader, className)\n  }), React.createElement(\"span\", {\n    className: css(styles.notificationDrawerListItemHeaderIcon)\n  }, icon ? icon : React.createElement(Icon, null)), isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title), children && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerListItemAction)\n  }, children));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';","map":{"version":3,"sources":["../../../../src/components/NotificationDrawer/NotificationDrawerListItemHeader.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\nimport { Tooltip } from '../Tooltip';\nexport const variantIcons = {\n    success: CheckCircleIcon,\n    danger: ExclamationCircleIcon,\n    warning: ExclamationTriangleIcon,\n    info: InfoCircleIcon,\n    default: BellIcon\n};\nexport const NotificationDrawerListItemHeader = (_a) => {\n    var { children, className = '', icon = null, srTitle, title, variant = 'default', truncateTitle = 0, tooltipPosition, headingLevel: HeadingLevel = 'h2' } = _a, props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\", \"headingLevel\"]);\n    const titleRef = React.useRef(null);\n    const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n    React.useEffect(() => {\n        if (!titleRef.current || !truncateTitle) {\n            return;\n        }\n        titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n        const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n        if (isTooltipVisible !== showTooltip) {\n            setIsTooltipVisible(showTooltip);\n        }\n    }, [titleRef, truncateTitle, isTooltipVisible]);\n    const Icon = variantIcons[variant];\n    const Title = (React.createElement(HeadingLevel, Object.assign({}, (isTooltipVisible && { tabIndex: 0 }), { ref: titleRef, className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate) }),\n        srTitle && React.createElement(\"span\", { className: css(a11yStyles.screenReader) }, srTitle),\n        title));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", Object.assign({}, props, { className: css(styles.notificationDrawerListItemHeader, className) }),\n            React.createElement(\"span\", { className: css(styles.notificationDrawerListItemHeaderIcon) }, icon ? icon : React.createElement(Icon, null)),\n            isTooltipVisible ? (React.createElement(Tooltip, { content: title, position: tooltipPosition }, Title)) : (Title)),\n        children && React.createElement(\"div\", { className: css(styles.notificationDrawerListItemAction) }, children)));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';\n//# sourceMappingURL=NotificationDrawerListItemHeader.js.map"]},"metadata":{},"sourceType":"module"}