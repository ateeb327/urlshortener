{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport lineClamp from '@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { debounce } from '../../helpers/util';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var ExpandableSectionVariant;\n(function (ExpandableSectionVariant) {\n  ExpandableSectionVariant[\"default\"] = \"default\";\n  ExpandableSectionVariant[\"truncate\"] = \"truncate\";\n})(ExpandableSectionVariant || (ExpandableSectionVariant = {}));\nconst setLineClamp = (lines, element) => {\n  if (!element || lines < 1) {\n    return;\n  }\n  element.style.setProperty(lineClamp.name, lines.toString());\n};\nexport class ExpandableSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.expandableContentRef = React.createRef();\n    this.observer = () => {};\n    this.checkToggleVisibility = () => {\n      var _a;\n      if ((_a = this.expandableContentRef) === null || _a === void 0 ? void 0 : _a.current) {\n        const maxLines = this.props.truncateMaxLines || parseInt(lineClamp.value);\n        const totalLines = this.expandableContentRef.current.scrollHeight / parseInt(getComputedStyle(this.expandableContentRef.current).lineHeight);\n        this.setState({\n          hasToggle: totalLines > maxLines\n        });\n      }\n    };\n    this.resize = () => {\n      const {\n        offsetWidth\n      } = this.expandableContentRef.current;\n      if (this.state.previousWidth !== offsetWidth) {\n        this.setState({\n          previousWidth: offsetWidth\n        });\n        this.checkToggleVisibility();\n      }\n    };\n    this.handleResize = debounce(this.resize, 250);\n    this.state = {\n      isExpanded: props.isExpanded,\n      hasToggle: true,\n      previousWidth: undefined\n    };\n  }\n  calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n    if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n      return toggleTextExpanded;\n    }\n    if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n      return toggleTextCollapsed;\n    }\n    return toggleText;\n  }\n  componentDidMount() {\n    if (this.props.variant === ExpandableSectionVariant.truncate) {\n      const expandableContent = this.expandableContentRef.current;\n      this.setState({\n        previousWidth: expandableContent.offsetWidth\n      });\n      this.observer = getResizeObserver(expandableContent, this.handleResize, false);\n      if (this.props.truncateMaxLines) {\n        setLineClamp(this.props.truncateMaxLines, expandableContent);\n      }\n      this.checkToggleVisibility();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.variant === ExpandableSectionVariant.truncate && prevProps.truncateMaxLines !== this.props.truncateMaxLines) {\n      const expandableContent = this.expandableContentRef.current;\n      setLineClamp(this.props.truncateMaxLines, expandableContent);\n      this.checkToggleVisibility();\n    }\n  }\n  componentWillUnmount() {\n    if (this.props.variant === ExpandableSectionVariant.truncate) {\n      this.observer();\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        onToggle: onToggleProp,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isActive,\n        className,\n        toggleText,\n        toggleTextExpanded,\n        toggleTextCollapsed,\n        toggleContent,\n        children,\n        isExpanded,\n        isDetached,\n        displaySize,\n        isWidthLimited,\n        isIndented,\n        contentId,\n        variant,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        truncateMaxLines\n      } = _a,\n      props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"toggleContent\", \"children\", \"isExpanded\", \"isDetached\", \"displaySize\", \"isWidthLimited\", \"isIndented\", \"contentId\", \"variant\", \"truncateMaxLines\"]);\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded;\n    // uncontrolled\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n      onToggle = isOpen => {\n        this.setState({\n          isExpanded: isOpen\n        }, () => onToggleProp(this.state.isExpanded));\n      };\n    }\n    const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n    const expandableToggle = !isDetached && React.createElement(\"button\", {\n      className: css(styles.expandableSectionToggle),\n      type: \"button\",\n      \"aria-expanded\": propOrStateIsExpanded,\n      onClick: () => onToggle(!propOrStateIsExpanded)\n    }, variant !== ExpandableSectionVariant.truncate && React.createElement(\"span\", {\n      className: css(styles.expandableSectionToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": true\n    })), React.createElement(\"span\", {\n      className: css(styles.expandableSectionToggleText)\n    }, toggleContent || computedToggleText));\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, displaySize === 'large' && styles.modifiers.displayLg, isWidthLimited && styles.modifiers.limitWidth, isIndented && styles.modifiers.indented, variant === ExpandableSectionVariant.truncate && styles.modifiers.truncate, className)\n    }, props), variant === ExpandableSectionVariant.default && expandableToggle, React.createElement(\"div\", {\n      ref: this.expandableContentRef,\n      className: css(styles.expandableSectionContent),\n      hidden: variant !== ExpandableSectionVariant.truncate && !propOrStateIsExpanded,\n      id: contentId\n    }, children), variant === ExpandableSectionVariant.truncate && this.state.hasToggle && expandableToggle);\n  }\n}\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n  className: '',\n  toggleText: '',\n  toggleTextExpanded: '',\n  toggleTextCollapsed: '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: isExpanded => undefined,\n  isActive: false,\n  isDetached: false,\n  displaySize: 'default',\n  isWidthLimited: false,\n  isIndented: false,\n  contentId: '',\n  variant: 'default'\n};","map":{"version":3,"sources":["../../../../src/components/ExpandableSection/ExpandableSection.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport lineClamp from '@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { debounce } from '../../helpers/util';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var ExpandableSectionVariant;\n(function (ExpandableSectionVariant) {\n    ExpandableSectionVariant[\"default\"] = \"default\";\n    ExpandableSectionVariant[\"truncate\"] = \"truncate\";\n})(ExpandableSectionVariant || (ExpandableSectionVariant = {}));\nconst setLineClamp = (lines, element) => {\n    if (!element || lines < 1) {\n        return;\n    }\n    element.style.setProperty(lineClamp.name, lines.toString());\n};\nexport class ExpandableSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.expandableContentRef = React.createRef();\n        this.observer = () => { };\n        this.checkToggleVisibility = () => {\n            var _a;\n            if ((_a = this.expandableContentRef) === null || _a === void 0 ? void 0 : _a.current) {\n                const maxLines = this.props.truncateMaxLines || parseInt(lineClamp.value);\n                const totalLines = this.expandableContentRef.current.scrollHeight /\n                    parseInt(getComputedStyle(this.expandableContentRef.current).lineHeight);\n                this.setState({\n                    hasToggle: totalLines > maxLines\n                });\n            }\n        };\n        this.resize = () => {\n            const { offsetWidth } = this.expandableContentRef.current;\n            if (this.state.previousWidth !== offsetWidth) {\n                this.setState({ previousWidth: offsetWidth });\n                this.checkToggleVisibility();\n            }\n        };\n        this.handleResize = debounce(this.resize, 250);\n        this.state = {\n            isExpanded: props.isExpanded,\n            hasToggle: true,\n            previousWidth: undefined\n        };\n    }\n    calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n        if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n            return toggleTextExpanded;\n        }\n        if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n            return toggleTextCollapsed;\n        }\n        return toggleText;\n    }\n    componentDidMount() {\n        if (this.props.variant === ExpandableSectionVariant.truncate) {\n            const expandableContent = this.expandableContentRef.current;\n            this.setState({ previousWidth: expandableContent.offsetWidth });\n            this.observer = getResizeObserver(expandableContent, this.handleResize, false);\n            if (this.props.truncateMaxLines) {\n                setLineClamp(this.props.truncateMaxLines, expandableContent);\n            }\n            this.checkToggleVisibility();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.variant === ExpandableSectionVariant.truncate &&\n            prevProps.truncateMaxLines !== this.props.truncateMaxLines) {\n            const expandableContent = this.expandableContentRef.current;\n            setLineClamp(this.props.truncateMaxLines, expandableContent);\n            this.checkToggleVisibility();\n        }\n    }\n    componentWillUnmount() {\n        if (this.props.variant === ExpandableSectionVariant.truncate) {\n            this.observer();\n        }\n    }\n    render() {\n        const _a = this.props, { onToggle: onToggleProp, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isActive, className, toggleText, toggleTextExpanded, toggleTextCollapsed, toggleContent, children, isExpanded, isDetached, displaySize, isWidthLimited, isIndented, contentId, variant, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        truncateMaxLines } = _a, props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"toggleContent\", \"children\", \"isExpanded\", \"isDetached\", \"displaySize\", \"isWidthLimited\", \"isIndented\", \"contentId\", \"variant\", \"truncateMaxLines\"]);\n        let onToggle = onToggleProp;\n        let propOrStateIsExpanded = isExpanded;\n        // uncontrolled\n        if (isExpanded === undefined) {\n            propOrStateIsExpanded = this.state.isExpanded;\n            onToggle = isOpen => {\n                this.setState({ isExpanded: isOpen }, () => onToggleProp(this.state.isExpanded));\n            };\n        }\n        const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n        const expandableToggle = !isDetached && (React.createElement(\"button\", { className: css(styles.expandableSectionToggle), type: \"button\", \"aria-expanded\": propOrStateIsExpanded, onClick: () => onToggle(!propOrStateIsExpanded) },\n            variant !== ExpandableSectionVariant.truncate && (React.createElement(\"span\", { className: css(styles.expandableSectionToggleIcon) },\n                React.createElement(AngleRightIcon, { \"aria-hidden\": true }))),\n            React.createElement(\"span\", { className: css(styles.expandableSectionToggleText) }, toggleContent || computedToggleText)));\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, displaySize === 'large' && styles.modifiers.displayLg, isWidthLimited && styles.modifiers.limitWidth, isIndented && styles.modifiers.indented, variant === ExpandableSectionVariant.truncate && styles.modifiers.truncate, className) }, props),\n            variant === ExpandableSectionVariant.default && expandableToggle,\n            React.createElement(\"div\", { ref: this.expandableContentRef, className: css(styles.expandableSectionContent), hidden: variant !== ExpandableSectionVariant.truncate && !propOrStateIsExpanded, id: contentId }, children),\n            variant === ExpandableSectionVariant.truncate && this.state.hasToggle && expandableToggle));\n    }\n}\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n    className: '',\n    toggleText: '',\n    toggleTextExpanded: '',\n    toggleTextCollapsed: '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded) => undefined,\n    isActive: false,\n    isDetached: false,\n    displaySize: 'default',\n    isWidthLimited: false,\n    isIndented: false,\n    contentId: '',\n    variant: 'default'\n};\n//# sourceMappingURL=ExpandableSection.js.map"]},"metadata":{},"sourceType":"module"}