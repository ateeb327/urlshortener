{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport class LabelGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.headingRef = React.createRef();\n    this.toggleCollapse = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen,\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      }));\n    };\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n    });\n  }\n  renderLabel(id) {\n    const {\n      categoryName,\n      tooltipPosition\n    } = this.props;\n    const {\n      isTooltipVisible\n    } = this.state;\n    return isTooltipVisible ? React.createElement(Tooltip, {\n      position: tooltipPosition,\n      content: categoryName\n    }, React.createElement(\"span\", {\n      tabIndex: 0,\n      ref: this.headingRef,\n      className: css(styles.labelGroupLabel)\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      id: id\n    }, categoryName))) : React.createElement(\"span\", {\n      ref: this.headingRef,\n      className: css(styles.labelGroupLabel),\n      \"aria-hidden\": \"true\",\n      id: id\n    }, categoryName);\n  }\n  render() {\n    const _a = this.props,\n      {\n        categoryName,\n        children,\n        className,\n        isClosable,\n        isCompact,\n        closeBtnAriaLabel,\n        'aria-label': ariaLabel,\n        onClick,\n        numLabels,\n        expandedText,\n        collapsedText,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen,\n        tooltipPosition,\n        isVertical,\n        isEditable,\n        hasEditableTextArea,\n        editableTextAreaProps,\n        addLabelControl\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"isCompact\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"numLabels\", \"expandedText\", \"collapsedText\", \"defaultIsOpen\", \"tooltipPosition\", \"isVertical\", \"isEditable\", \"hasEditableTextArea\", \"editableTextAreaProps\", \"addLabelControl\"]);\n    const {\n      isOpen\n    } = this.state;\n    const renderedChildren = React.Children.toArray(children);\n    const numChildren = renderedChildren.length;\n    const collapsedTextResult = fillTemplate(collapsedText, {\n      remaining: numChildren - numLabels\n    });\n    const renderLabelGroup = id => {\n      const labelArray = !isOpen ? renderedChildren.slice(0, numLabels) : renderedChildren;\n      const content = React.createElement(React.Fragment, null, categoryName && this.renderLabel(id), React.createElement(\"ul\", Object.assign({\n        className: css(styles.labelGroupList)\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, {\n        role: \"list\"\n      }, rest), labelArray.map((child, i) => React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem),\n        key: i\n      }, child)), numChildren > numLabels && React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem)\n      }, React.createElement(Label, {\n        isOverflowLabel: true,\n        onClick: this.toggleCollapse,\n        className: css(isCompact && labelStyles.modifiers.compact)\n      }, isOpen ? expandedText : collapsedTextResult)), addLabelControl && React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem)\n      }, addLabelControl), isEditable && hasEditableTextArea && React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem, styles.modifiers.textarea)\n      }, React.createElement(\"textarea\", Object.assign({\n        className: css(styles.labelGroupTextarea),\n        rows: 1,\n        tabIndex: 0\n      }, editableTextAreaProps)))));\n      const close = React.createElement(\"div\", {\n        className: css(styles.labelGroupClose)\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        onClick: onClick,\n        id: `remove_group_${id}`,\n        \"aria-labelledby\": `remove_group_${id} ${id}`\n      }, React.createElement(TimesCircleIcon, {\n        \"aria-hidden\": \"true\"\n      })));\n      return React.createElement(\"div\", {\n        className: css(styles.labelGroup, className, categoryName && styles.modifiers.category, isVertical && styles.modifiers.vertical, isEditable && styles.modifiers.editable)\n      }, React.createElement(\"div\", {\n        className: css(styles.labelGroupMain)\n      }, content), isClosable && close);\n    };\n    return numChildren === 0 && addLabelControl === undefined ? null : React.createElement(GenerateId, null, randomId => renderLabelGroup(this.props.id || randomId));\n  }\n}\nLabelGroup.displayName = 'LabelGroup';\nLabelGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numLabels: 3,\n  isClosable: false,\n  isCompact: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  closeBtnAriaLabel: 'Close label group',\n  tooltipPosition: 'top',\n  'aria-label': 'Label group category',\n  isVertical: false,\n  isEditable: false,\n  hasEditableTextArea: false\n};","map":{"version":3,"sources":["../../../../src/components/LabelGroup/LabelGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport class LabelGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.headingRef = React.createRef();\n        this.toggleCollapse = () => {\n            this.setState(prevState => ({\n                isOpen: !prevState.isOpen,\n                isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n            }));\n        };\n        this.state = {\n            isOpen: this.props.defaultIsOpen,\n            isTooltipVisible: false\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n        });\n    }\n    renderLabel(id) {\n        const { categoryName, tooltipPosition } = this.props;\n        const { isTooltipVisible } = this.state;\n        return isTooltipVisible ? (React.createElement(Tooltip, { position: tooltipPosition, content: categoryName },\n            React.createElement(\"span\", { tabIndex: 0, ref: this.headingRef, className: css(styles.labelGroupLabel) },\n                React.createElement(\"span\", { \"aria-hidden\": \"true\", id: id }, categoryName)))) : (React.createElement(\"span\", { ref: this.headingRef, className: css(styles.labelGroupLabel), \"aria-hidden\": \"true\", id: id }, categoryName));\n    }\n    render() {\n        const _a = this.props, { categoryName, children, className, isClosable, isCompact, closeBtnAriaLabel, 'aria-label': ariaLabel, onClick, numLabels, expandedText, collapsedText, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen, tooltipPosition, isVertical, isEditable, hasEditableTextArea, editableTextAreaProps, addLabelControl } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"isCompact\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"numLabels\", \"expandedText\", \"collapsedText\", \"defaultIsOpen\", \"tooltipPosition\", \"isVertical\", \"isEditable\", \"hasEditableTextArea\", \"editableTextAreaProps\", \"addLabelControl\"]);\n        const { isOpen } = this.state;\n        const renderedChildren = React.Children.toArray(children);\n        const numChildren = renderedChildren.length;\n        const collapsedTextResult = fillTemplate(collapsedText, {\n            remaining: numChildren - numLabels\n        });\n        const renderLabelGroup = (id) => {\n            const labelArray = !isOpen ? renderedChildren.slice(0, numLabels) : renderedChildren;\n            const content = (React.createElement(React.Fragment, null,\n                categoryName && this.renderLabel(id),\n                React.createElement(\"ul\", Object.assign({ className: css(styles.labelGroupList) }, (categoryName && { 'aria-labelledby': id }), (!categoryName && { 'aria-label': ariaLabel }), { role: \"list\" }, rest),\n                    labelArray.map((child, i) => (React.createElement(\"li\", { className: css(styles.labelGroupListItem), key: i }, child))),\n                    numChildren > numLabels && (React.createElement(\"li\", { className: css(styles.labelGroupListItem) },\n                        React.createElement(Label, { isOverflowLabel: true, onClick: this.toggleCollapse, className: css(isCompact && labelStyles.modifiers.compact) }, isOpen ? expandedText : collapsedTextResult))),\n                    addLabelControl && React.createElement(\"li\", { className: css(styles.labelGroupListItem) }, addLabelControl),\n                    isEditable && hasEditableTextArea && (React.createElement(\"li\", { className: css(styles.labelGroupListItem, styles.modifiers.textarea) },\n                        React.createElement(\"textarea\", Object.assign({ className: css(styles.labelGroupTextarea), rows: 1, tabIndex: 0 }, editableTextAreaProps)))))));\n            const close = (React.createElement(\"div\", { className: css(styles.labelGroupClose) },\n                React.createElement(Button, { variant: \"plain\", \"aria-label\": closeBtnAriaLabel, onClick: onClick, id: `remove_group_${id}`, \"aria-labelledby\": `remove_group_${id} ${id}` },\n                    React.createElement(TimesCircleIcon, { \"aria-hidden\": \"true\" }))));\n            return (React.createElement(\"div\", { className: css(styles.labelGroup, className, categoryName && styles.modifiers.category, isVertical && styles.modifiers.vertical, isEditable && styles.modifiers.editable) },\n                React.createElement(\"div\", { className: css(styles.labelGroupMain) }, content),\n                isClosable && close));\n        };\n        return numChildren === 0 && addLabelControl === undefined ? null : (React.createElement(GenerateId, null, randomId => renderLabelGroup(this.props.id || randomId)));\n    }\n}\nLabelGroup.displayName = 'LabelGroup';\nLabelGroup.defaultProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numLabels: 3,\n    isClosable: false,\n    isCompact: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e) => undefined,\n    closeBtnAriaLabel: 'Close label group',\n    tooltipPosition: 'top',\n    'aria-label': 'Label group category',\n    isVertical: false,\n    isEditable: false,\n    hasEditableTextArea: false\n};\n//# sourceMappingURL=LabelGroup.js.map"]},"metadata":{},"sourceType":"module"}