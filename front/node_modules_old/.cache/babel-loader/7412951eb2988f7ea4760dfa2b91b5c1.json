{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/PageContext';\nexport class ToolbarContent extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.expandableContentRef = React.createRef();\n    this.chipContainerRef = React.createRef();\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        children,\n        isExpanded,\n        toolbarId,\n        visibility,\n        visiblity,\n        alignment,\n        clearAllFilters,\n        showClearFiltersButton,\n        clearFiltersButtonText\n      } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarContent visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n    return React.createElement(PageContext.Consumer, null, ({\n      width,\n      getBreakpoint\n    }) => React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), className)\n    }, props), React.createElement(ToolbarContext.Consumer, null, ({\n      clearAllFilters: clearAllFiltersContext,\n      clearFiltersButtonText: clearFiltersButtonContext,\n      showClearFiltersButton: showClearFiltersButtonContext,\n      toolbarId: toolbarIdContext\n    }) => {\n      const expandableContentId = `${toolbarId || toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n      return React.createElement(ToolbarContentContext.Provider, {\n        value: {\n          expandableContentRef: this.expandableContentRef,\n          expandableContentId,\n          chipContainerRef: this.chipContainerRef\n        }\n      }, React.createElement(\"div\", {\n        className: css(styles.toolbarContentSection)\n      }, children), React.createElement(ToolbarExpandableContent, {\n        id: expandableContentId,\n        isExpanded: isExpanded,\n        expandableContentRef: this.expandableContentRef,\n        chipContainerRef: this.chipContainerRef,\n        clearAllFilters: clearAllFilters || clearAllFiltersContext,\n        showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext,\n        clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext\n      }));\n    })));\n  }\n}\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n  isExpanded: false,\n  showClearFiltersButton: false\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarContent.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/PageContext';\nexport class ToolbarContent extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.expandableContentRef = React.createRef();\n        this.chipContainerRef = React.createRef();\n    }\n    render() {\n        const _a = this.props, { className, children, isExpanded, toolbarId, visibility, visiblity, alignment, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarContent visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(PageContext.Consumer, null, ({ width, getBreakpoint }) => (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), className) }, props),\n            React.createElement(ToolbarContext.Consumer, null, ({ clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext, toolbarId: toolbarIdContext }) => {\n                const expandableContentId = `${toolbarId ||\n                    toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n                return (React.createElement(ToolbarContentContext.Provider, { value: {\n                        expandableContentRef: this.expandableContentRef,\n                        expandableContentId,\n                        chipContainerRef: this.chipContainerRef\n                    } },\n                    React.createElement(\"div\", { className: css(styles.toolbarContentSection) }, children),\n                    React.createElement(ToolbarExpandableContent, { id: expandableContentId, isExpanded: isExpanded, expandableContentRef: this.expandableContentRef, chipContainerRef: this.chipContainerRef, clearAllFilters: clearAllFilters || clearAllFiltersContext, showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext, clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext })));\n            })))));\n    }\n}\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n    isExpanded: false,\n    showClearFiltersButton: false\n};\n//# sourceMappingURL=ToolbarContent.js.map"]},"metadata":{},"sourceType":"module"}