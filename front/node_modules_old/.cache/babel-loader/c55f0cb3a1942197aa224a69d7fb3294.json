{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport class ToolbarFilter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n  componentDidMount() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n    this.setState({\n      isMounted: true\n    });\n  }\n  componentDidUpdate() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n  }\n  render() {\n    const _a = this.props,\n      {\n        children,\n        chips,\n        deleteChipGroup,\n        deleteChip,\n        chipGroupExpandedText,\n        chipGroupCollapsedText,\n        categoryName,\n        showToolbarItem\n      } = _a,\n      props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"chipGroupExpandedText\", \"chipGroupCollapsedText\", \"categoryName\", \"showToolbarItem\"]);\n    const {\n      isExpanded,\n      chipGroupContentRef\n    } = this.context;\n    const categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString();\n    const chipGroup = chips.length ? React.createElement(ToolbarItem, {\n      variant: \"chip-group\"\n    }, React.createElement(ChipGroup, {\n      key: categoryKey,\n      categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name,\n      isClosable: deleteChipGroup !== undefined,\n      onClick: () => deleteChipGroup(categoryName),\n      collapsedText: chipGroupCollapsedText,\n      expandedText: chipGroupExpandedText\n    }, chips.map(chip => typeof chip === 'string' ? React.createElement(Chip, {\n      key: chip,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip) : React.createElement(Chip, {\n      key: chip.key,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip.node)))) : null;\n    if (!isExpanded && this.state.isMounted) {\n      return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild));\n    }\n    return React.createElement(ToolbarContentContext.Consumer, null, ({\n      chipContainerRef\n    }) => React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)));\n  }\n}\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n  chips: [],\n  showToolbarItem: true\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarFilter.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport class ToolbarFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMounted: false\n        };\n    }\n    componentDidMount() {\n        const { categoryName, chips } = this.props;\n        this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n            ? categoryName.key\n            : categoryName.toString(), chips.length);\n        this.setState({ isMounted: true });\n    }\n    componentDidUpdate() {\n        const { categoryName, chips } = this.props;\n        this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n            ? categoryName.key\n            : categoryName.toString(), chips.length);\n    }\n    render() {\n        const _a = this.props, { children, chips, deleteChipGroup, deleteChip, chipGroupExpandedText, chipGroupCollapsedText, categoryName, showToolbarItem } = _a, props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"chipGroupExpandedText\", \"chipGroupCollapsedText\", \"categoryName\", \"showToolbarItem\"]);\n        const { isExpanded, chipGroupContentRef } = this.context;\n        const categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n            ? categoryName.key\n            : categoryName.toString();\n        const chipGroup = chips.length ? (React.createElement(ToolbarItem, { variant: \"chip-group\" },\n            React.createElement(ChipGroup, { key: categoryKey, categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name, isClosable: deleteChipGroup !== undefined, onClick: () => deleteChipGroup(categoryName), collapsedText: chipGroupCollapsedText, expandedText: chipGroupExpandedText }, chips.map(chip => typeof chip === 'string' ? (React.createElement(Chip, { key: chip, onClick: () => deleteChip(categoryKey, chip) }, chip)) : (React.createElement(Chip, { key: chip.key, onClick: () => deleteChip(categoryKey, chip) }, chip.node)))))) : null;\n        if (!isExpanded && this.state.isMounted) {\n            return (React.createElement(React.Fragment, null,\n                showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children),\n                ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)));\n        }\n        return (React.createElement(ToolbarContentContext.Consumer, null, ({ chipContainerRef }) => (React.createElement(React.Fragment, null,\n            showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children),\n            chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)))));\n    }\n}\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n    chips: [],\n    showToolbarItem: true\n};\n//# sourceMappingURL=ToolbarFilter.js.map"]},"metadata":{},"sourceType":"module"}