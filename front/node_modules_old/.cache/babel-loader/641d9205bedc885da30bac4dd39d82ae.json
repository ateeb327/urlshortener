{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\nexport const Droppable = _a => {\n  var {\n      className,\n      children,\n      zone = 'defaultZone',\n      droppableId = 'defaultId',\n      hasNoWrapper = false\n    } = _a,\n    props = __rest(_a, [\"className\", \"children\", \"zone\", \"droppableId\", \"hasNoWrapper\"]);\n  const childProps = Object.assign({\n    'data-pf-droppable': zone,\n    'data-pf-droppableid': droppableId,\n    // if has no wrapper is set, don't overwrite children className with the className prop\n    className: hasNoWrapper && React.Children.count(children) === 1 ? css(styles.droppable, className, children.props.className) : css(styles.droppable, className)\n  }, props);\n  return React.createElement(DroppableContext.Provider, {\n    value: {\n      zone,\n      droppableId\n    }\n  }, hasNoWrapper ? React.cloneElement(children, childProps) : React.createElement(\"div\", Object.assign({}, childProps), children));\n};\nDroppable.displayName = 'Droppable';","map":{"version":3,"sources":["../../../../src/components/DragDrop/Droppable.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,4DAA4D;AAC/E,SAAS,gBAAgB,QAAQ,oBAAoB;AAerD,OAAO,MAAM,SAAS,GAA6C,EAOlD,IAAI;MAP8C;MACjE,SAAS;MACT,QAAQ;MACR,IAAI,GAAG,aAAa;MACpB,WAAW,GAAG,WAAW;MACzB,YAAY,GAAG;IAAK,CAAA,GAAA,EAEL;IADZ,KAAK,GAAA,MAAA,CAAA,EAAA,EANyD,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,aAAA,EAAA,cAAA,CAOlE,CADS;EAER,MAAM,UAAU,GAAA,MAAA,CAAA,MAAA,CAAA;IACd,mBAAmB,EAAE,IAAI;IACzB,qBAAqB,EAAE,WAAW;IAClC;IACA,SAAS,EACP,YAAY,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAChD,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,EAAG,QAA+B,CAAC,KAAK,CAAC,SAAS,CAAC,GAClF,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS;EAAC,CAAA,EACnC,KAAK,CACT;EAED,OACE,KAAA,CAAA,aAAA,CAAC,gBAAgB,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAE;MAAE,IAAI;MAAE;IAAW;EAAE,CAAA,EACpD,YAAY,GACX,KAAK,CAAC,YAAY,CAAC,QAA8B,EAAE,UAAU,CAAC,GAE9D,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAS,UAAU,CAAA,EAAG,QAAQ,CAC/B,CACyB;AAEhC,CAAC;AACD,SAAS,CAAC,WAAW,GAAG,WAAW","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\nexport const Droppable = (_a) => {\n    var { className, children, zone = 'defaultZone', droppableId = 'defaultId', hasNoWrapper = false } = _a, props = __rest(_a, [\"className\", \"children\", \"zone\", \"droppableId\", \"hasNoWrapper\"]);\n    const childProps = Object.assign({ 'data-pf-droppable': zone, 'data-pf-droppableid': droppableId, \n        // if has no wrapper is set, don't overwrite children className with the className prop\n        className: hasNoWrapper && React.Children.count(children) === 1\n            ? css(styles.droppable, className, children.props.className)\n            : css(styles.droppable, className) }, props);\n    return (React.createElement(DroppableContext.Provider, { value: { zone, droppableId } }, hasNoWrapper ? (React.cloneElement(children, childProps)) : (React.createElement(\"div\", Object.assign({}, childProps), children))));\n};\nDroppable.displayName = 'Droppable';\n//# sourceMappingURL=Droppable.js.map"]},"metadata":{},"sourceType":"module"}