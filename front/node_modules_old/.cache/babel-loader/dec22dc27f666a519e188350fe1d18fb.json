{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { getDefaultOUIAId } from '@patternfly/react-core/dist/esm/helpers';\nimport { DropdownDirection, DropdownPosition } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { Provider } from './base';\nimport { BodyCell } from './BodyCell';\nimport { HeaderCell } from './HeaderCell';\nimport { RowWrapper } from './RowWrapper';\nimport { BodyWrapper } from './BodyWrapper';\nimport { calculateColumns } from './utils/headerUtils';\nimport { RowSelectVariant } from './SelectColumn';\nimport { TableContext } from './TableContext';\nimport { TableGridBreakpoint } from './TableTypes';\nimport { TreeRowWrapper } from './TreeRowWrapper';\nexport class Table extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(Table.displayName)\n    };\n    this.isSelected = row => row.selected === true;\n    this.areAllRowsSelected = rows => {\n      if (rows === undefined || rows.length === 0) {\n        return false;\n      }\n      return rows.every(row => this.isSelected(row) || row.disableSelection || row.hasOwnProperty('parent') && !row.showSelect);\n    };\n    this.areAllExpanded = rows => {\n      if (rows === undefined || rows.length === 0) {\n        return false;\n      }\n      return rows.every(row => row.isOpen === undefined || row.isOpen);\n    };\n  }\n  render() {\n    const _a = this.props,\n      {\n        'aria-label': ariaLabel,\n        caption,\n        header,\n        onSort,\n        onSelect,\n        canSelectAll,\n        canCollapseAll,\n        isHeaderSelectDisabled,\n        selectVariant,\n        collapseAllAriaLabel,\n        sortBy,\n        children,\n        actions,\n        actionResolver,\n        areActionsDisabled,\n        onCollapse,\n        onExpand,\n        onRowEdit,\n        rowLabeledBy,\n        dropdownPosition,\n        dropdownDirection,\n        actionsMenuAppendTo: menuAppendTo,\n        actionsToggle,\n        contentId,\n        expandId,\n        variant,\n        rows,\n        cells,\n        bodyWrapper,\n        rowWrapper,\n        role,\n        borders,\n        onFavorite,\n        canSortFavorites\n      } = _a,\n      props = __rest(_a, ['aria-label', \"caption\", \"header\", \"onSort\", \"onSelect\", \"canSelectAll\", \"canCollapseAll\", \"isHeaderSelectDisabled\", \"selectVariant\", \"collapseAllAriaLabel\", \"sortBy\", \"children\", \"actions\", \"actionResolver\", \"areActionsDisabled\", \"onCollapse\", \"onExpand\", \"onRowEdit\", \"rowLabeledBy\", \"dropdownPosition\", \"dropdownDirection\", \"actionsMenuAppendTo\", \"actionsToggle\", \"contentId\", \"expandId\", \"variant\", \"rows\", \"cells\", \"bodyWrapper\", \"rowWrapper\", \"role\", \"borders\", \"onFavorite\", \"canSortFavorites\"]);\n    if (!ariaLabel && !caption && !header && role !== 'presentation') {\n      // eslint-disable-next-line no-console\n      console.error('Table: Specify at least one of: header, caption, aria-label');\n    }\n    const headerData = calculateColumns(cells, {\n      sortBy,\n      onSort,\n      onSelect,\n      canSelectAll: selectVariant === RowSelectVariant.radio ? false : canSelectAll,\n      canCollapseAll,\n      isHeaderSelectDisabled,\n      selectVariant,\n      collapseAllAriaLabel,\n      allRowsSelected: onSelect ? this.areAllRowsSelected(rows) : false,\n      allRowsExpanded: onCollapse ? this.areAllExpanded(rows) : false,\n      actions,\n      actionResolver,\n      areActionsDisabled,\n      onCollapse,\n      onRowEdit,\n      onExpand,\n      rowLabeledBy,\n      expandId,\n      contentId,\n      dropdownPosition,\n      dropdownDirection,\n      menuAppendTo,\n      actionsToggle,\n      onFavorite,\n      canSortFavorites,\n      // order of columns: Collapsible | Selectable | Favoritable\n      firstUserColumnIndex: [onCollapse, onSelect, onFavorite].filter(callback => callback).length\n    });\n    const table = React.createElement(TableContext.Provider, {\n      value: {\n        headerData,\n        headerRows: null,\n        rows\n      }\n    }, header, React.createElement(Provider, Object.assign({}, props, {\n      \"aria-label\": ariaLabel,\n      renderers: {\n        body: {\n          wrapper: bodyWrapper || BodyWrapper,\n          row: rowWrapper || (this.props.isTreeTable ? TreeRowWrapper : RowWrapper),\n          cell: BodyCell\n        },\n        header: {\n          cell: HeaderCell\n        }\n      },\n      columns: headerData,\n      role: role,\n      variant: variant,\n      borders: borders\n    }), caption && React.createElement(\"caption\", null, caption), children));\n    if (onRowEdit) {\n      return React.createElement(\"form\", {\n        className: css(inlineStyles.inlineEdit)\n      }, table);\n    }\n    return table;\n  }\n}\nTable.displayName = 'Table';\nTable.hasWarnBeta = false;\nTable.defaultProps = {\n  children: null,\n  className: '',\n  variant: null,\n  borders: true,\n  rowLabeledBy: 'simple-node',\n  expandId: 'expandable-toggle',\n  contentId: 'expanded-content',\n  dropdownPosition: DropdownPosition.right,\n  dropdownDirection: DropdownDirection.down,\n  actionsMenuAppendTo: 'inline',\n  header: undefined,\n  caption: undefined,\n  'aria-label': undefined,\n  gridBreakPoint: TableGridBreakpoint.gridMd,\n  role: 'grid',\n  canSelectAll: true,\n  canCollapseAll: false,\n  isHeaderSelectDisabled: false,\n  selectVariant: 'checkbox',\n  collapseAllAriaLabel: '',\n  ouiaSafe: true,\n  isStickyHeader: false,\n  canSortFavorites: true,\n  isTreeTable: false,\n  isNested: false\n};","map":{"version":3,"sources":["../../../../src/components/Table/Table.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { getDefaultOUIAId } from '@patternfly/react-core/dist/esm/helpers';\nimport { DropdownDirection, DropdownPosition } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { Provider } from './base';\nimport { BodyCell } from './BodyCell';\nimport { HeaderCell } from './HeaderCell';\nimport { RowWrapper } from './RowWrapper';\nimport { BodyWrapper } from './BodyWrapper';\nimport { calculateColumns } from './utils/headerUtils';\nimport { RowSelectVariant } from './SelectColumn';\nimport { TableContext } from './TableContext';\nimport { TableGridBreakpoint } from './TableTypes';\nimport { TreeRowWrapper } from './TreeRowWrapper';\nexport class Table extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            ouiaStateId: getDefaultOUIAId(Table.displayName)\n        };\n        this.isSelected = (row) => row.selected === true;\n        this.areAllRowsSelected = (rows) => {\n            if (rows === undefined || rows.length === 0) {\n                return false;\n            }\n            return rows.every(row => this.isSelected(row) || row.disableSelection || (row.hasOwnProperty('parent') && !row.showSelect));\n        };\n        this.areAllExpanded = (rows) => {\n            if (rows === undefined || rows.length === 0) {\n                return false;\n            }\n            return rows.every(row => row.isOpen === undefined || row.isOpen);\n        };\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, caption, header, onSort, onSelect, canSelectAll, canCollapseAll, isHeaderSelectDisabled, selectVariant, collapseAllAriaLabel, sortBy, children, actions, actionResolver, areActionsDisabled, onCollapse, onExpand, onRowEdit, rowLabeledBy, dropdownPosition, dropdownDirection, actionsMenuAppendTo: menuAppendTo, actionsToggle, contentId, expandId, variant, rows, cells, bodyWrapper, rowWrapper, role, borders, onFavorite, canSortFavorites } = _a, props = __rest(_a, ['aria-label', \"caption\", \"header\", \"onSort\", \"onSelect\", \"canSelectAll\", \"canCollapseAll\", \"isHeaderSelectDisabled\", \"selectVariant\", \"collapseAllAriaLabel\", \"sortBy\", \"children\", \"actions\", \"actionResolver\", \"areActionsDisabled\", \"onCollapse\", \"onExpand\", \"onRowEdit\", \"rowLabeledBy\", \"dropdownPosition\", \"dropdownDirection\", \"actionsMenuAppendTo\", \"actionsToggle\", \"contentId\", \"expandId\", \"variant\", \"rows\", \"cells\", \"bodyWrapper\", \"rowWrapper\", \"role\", \"borders\", \"onFavorite\", \"canSortFavorites\"]);\n        if (!ariaLabel && !caption && !header && role !== 'presentation') {\n            // eslint-disable-next-line no-console\n            console.error('Table: Specify at least one of: header, caption, aria-label');\n        }\n        const headerData = calculateColumns(cells, {\n            sortBy,\n            onSort,\n            onSelect,\n            canSelectAll: selectVariant === RowSelectVariant.radio ? false : canSelectAll,\n            canCollapseAll,\n            isHeaderSelectDisabled,\n            selectVariant,\n            collapseAllAriaLabel,\n            allRowsSelected: onSelect ? this.areAllRowsSelected(rows) : false,\n            allRowsExpanded: onCollapse ? this.areAllExpanded(rows) : false,\n            actions,\n            actionResolver,\n            areActionsDisabled,\n            onCollapse,\n            onRowEdit,\n            onExpand,\n            rowLabeledBy,\n            expandId,\n            contentId,\n            dropdownPosition,\n            dropdownDirection,\n            menuAppendTo,\n            actionsToggle,\n            onFavorite,\n            canSortFavorites,\n            // order of columns: Collapsible | Selectable | Favoritable\n            firstUserColumnIndex: [onCollapse, onSelect, onFavorite].filter(callback => callback).length\n        });\n        const table = (React.createElement(TableContext.Provider, { value: {\n                headerData,\n                headerRows: null,\n                rows\n            } },\n            header,\n            React.createElement(Provider, Object.assign({}, props, { \"aria-label\": ariaLabel, renderers: {\n                    body: {\n                        wrapper: bodyWrapper || BodyWrapper,\n                        row: rowWrapper || (this.props.isTreeTable ? TreeRowWrapper : RowWrapper),\n                        cell: BodyCell\n                    },\n                    header: {\n                        cell: HeaderCell\n                    }\n                }, columns: headerData, role: role, variant: variant, borders: borders }),\n                caption && React.createElement(\"caption\", null, caption),\n                children)));\n        if (onRowEdit) {\n            return React.createElement(\"form\", { className: css(inlineStyles.inlineEdit) }, table);\n        }\n        return table;\n    }\n}\nTable.displayName = 'Table';\nTable.hasWarnBeta = false;\nTable.defaultProps = {\n    children: null,\n    className: '',\n    variant: null,\n    borders: true,\n    rowLabeledBy: 'simple-node',\n    expandId: 'expandable-toggle',\n    contentId: 'expanded-content',\n    dropdownPosition: DropdownPosition.right,\n    dropdownDirection: DropdownDirection.down,\n    actionsMenuAppendTo: 'inline',\n    header: undefined,\n    caption: undefined,\n    'aria-label': undefined,\n    gridBreakPoint: TableGridBreakpoint.gridMd,\n    role: 'grid',\n    canSelectAll: true,\n    canCollapseAll: false,\n    isHeaderSelectDisabled: false,\n    selectVariant: 'checkbox',\n    collapseAllAriaLabel: '',\n    ouiaSafe: true,\n    isStickyHeader: false,\n    canSortFavorites: true,\n    isTreeTable: false,\n    isNested: false\n};\n//# sourceMappingURL=Table.js.map"]},"metadata":{},"sourceType":"module"}