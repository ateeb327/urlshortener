{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\nconst flagVisibility = rows => {\n  const visibleRows = rows.filter(oneRow => !oneRow.parent || oneRow.isExpanded);\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\nclass ContextBody extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.onRow = (row, rowProps) => {\n      const {\n        onRowClick,\n        onRow\n      } = this.props;\n      const extendedRowProps = Object.assign(Object.assign({}, rowProps), onRow ? onRow(row, rowProps) : {});\n      return {\n        row,\n        rowProps: extendedRowProps,\n        onClick: event => {\n          const tagName = event.target.tagName;\n          const computedData = {\n            isInput: tagName === 'INPUT',\n            isButton: tagName === 'BUTTON'\n          };\n          onRowClick(event, row, rowProps, computedData);\n        },\n        onKeyDown: event => {\n          const targetElement = event.target;\n          const tagName = targetElement.tagName;\n          const computedData = {\n            isInput: tagName === 'INPUT',\n            isButton: tagName === 'BUTTON'\n          };\n          if (event.key === 'Enter' || event.key === ' ') {\n            onRowClick(event, row, rowProps, computedData);\n            // prevent event default if space is typed while focusing on a hoverable row\n            // so that the page does not scroll when trying to use spacebar to select a row\n            if (event.key === ' ' && !!targetElement.closest('.pf-m-hoverable')) {\n              event.preventDefault();\n            }\n          }\n        }\n      };\n    };\n    this.mapCells = (headerData, row, rowKey) => {\n      // column indexes start after generated optional columns like collapsible or select column(s)\n      const {\n        firstUserColumnIndex\n      } = headerData[0].extraParams;\n      const isFullWidth = row && row.fullWidth;\n      // typically you'd want to map each cell to its column header, but in the case of fullWidth\n      // the first column could be the Select and/or Expandable column\n      let additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n      return Object.assign({}, row && (row.cells || row).reduce((acc, cell, cellIndex) => {\n        const isCellObject = cell === Object(cell);\n        const isCellFunction = cell && typeof cell.title === 'function';\n        let formatters = [];\n        if (isCellObject && cell.formatters) {\n          // give priority to formatters specified on the cell object\n          // expandable example:\n          // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n          formatters = cell.formatters;\n        } else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n          // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n          // to the first user column's header formatters\n          formatters = headerData[firstUserColumnIndex].cell.formatters;\n        }\n        let mappedCellTitle = cell;\n        if (isCellObject && isCellFunction) {\n          mappedCellTitle = cell.title(cell.props.value, rowKey, cellIndex, cell.props);\n        } else if (isCellObject) {\n          mappedCellTitle = cell.title;\n        }\n        const mappedCell = {\n          [headerData[cellIndex + additionalColsIndexShift].property]: {\n            title: mappedCellTitle,\n            formatters,\n            props: Object.assign({\n              isVisible: true\n            }, isCellObject ? cell.props : null)\n          }\n        };\n        // increment the shift index when a cell spans multiple columns\n        if (isCellObject && cell.props && cell.props.colSpan) {\n          additionalColsIndexShift += cell.props.colSpan - 1;\n        }\n        return Object.assign(Object.assign({}, acc), mappedCell);\n      }, {\n        secretTableRowKeyId: row.id !== undefined ? row.id : rowKey\n      }));\n    };\n  }\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n      {\n        className,\n        headerData,\n        rows,\n        rowKey,\n        children,\n        onRowClick\n      } = _a,\n      props = __rest(_a, [\"className\", \"headerData\", \"rows\", \"rowKey\", \"children\", \"onRowClick\"]);\n    let mappedRows;\n    if (headerData.length > 0) {\n      mappedRows = rows.map((oneRow, oneRowKey) => Object.assign(Object.assign(Object.assign({}, oneRow), this.mapCells(headerData, oneRow, oneRowKey)), {\n        isExpanded: isRowExpanded(oneRow, rows),\n        isHeightAuto: oneRow.heightAuto || false,\n        isFirst: oneRowKey === 0,\n        isLast: oneRowKey === rows.length - 1,\n        isFirstVisible: false,\n        isLastVisible: false\n      }));\n      flagVisibility(mappedRows);\n    }\n    return React.createElement(React.Fragment, null, mappedRows && React.createElement(BaseBody, Object.assign({}, props, {\n      mappedRows: mappedRows,\n      rows: mappedRows,\n      onRow: this.onRow,\n      rowKey: rowKey,\n      className: className\n    })));\n  }\n}\nexport const TableBody = _a => {\n  var {\n      className = '',\n      children = null,\n      rowKey = 'secretTableRowKeyId',\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onRow = (...args) => ({}),\n      onRowClick = (event, row, rowProps, computedData) => /* eslint-enable @typescript-eslint/no-unused-vars */\n      undefined\n    } = _a,\n    props = __rest(_a, [\"className\", \"children\", \"rowKey\", \"onRow\", \"onRowClick\"]);\n  return React.createElement(TableContext.Consumer, null, _a => {\n    var {\n        headerData = [],\n        rows = []\n      } = _a,\n      rest = __rest(_a, [\"headerData\", \"rows\"]);\n    return React.createElement(ContextBody, Object.assign({\n      headerData: headerData,\n      rows: rows,\n      onRow: onRow,\n      className: className,\n      rowKey: rowKey,\n      onRowClick: onRowClick\n    }, props, rest), children);\n  });\n};","map":{"version":3,"sources":["../../../../src/components/Table/Body.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,IAAI,IAAI,QAAQ,QAAQ,QAAQ;AAGzC,SAAS,YAAY,QAAQ,gBAAgB;AAC7C,SAAS,aAAa,QAAQ,SAAS;AAmCvC,MAAM,cAAc,GAAI,IAAY,IAAI;EACtC,MAAM,WAAW,GAAI,IAAe,CAAC,MAAM,CAAE,MAAY,IAAK,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAW;EAC5G,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;IAC1B,WAAW,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,IAAI;IACpC,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,aAAa,GAAG,IAAI;EACzD;AACH,CAAC;AAMD,MAAM,WAAY,SAAQ,KAAK,CAAC,SAA6B,CAAA;EAA7D,WAAA,CAAA,EAAA;;IACE,IAAA,CAAA,KAAK,GAAG,CAAC,GAAS,EAAE,QAAa,KAAI;MACnC,MAAM;QAAE,UAAU;QAAE;MAAK,CAAE,GAAG,IAAI,CAAC,KAAK;MACxC,MAAM,gBAAgB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACjB,QAAQ,CAAA,EACP,KAAK,GAAG,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAA,CAAG,CACvC;MACD,OAAO;QACL,GAAG;QACH,QAAQ,EAAE,gBAAgB;QAC1B,OAAO,EAAG,KAAuB,IAAI;UACnC,MAAM,OAAO,GAAI,KAAK,CAAC,MAAsB,CAAC,OAAO;UACrD,MAAM,YAAY,GAAG;YACnB,OAAO,EAAE,OAAO,KAAK,OAAO;YAC5B,QAAQ,EAAE,OAAO,KAAK;WACvB;UAED,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC;QAChD,CAAC;QACD,SAAS,EAAG,KAA0B,IAAI;UACxC,MAAM,aAAa,GAAG,KAAK,CAAC,MAAqB;UACjD,MAAM,OAAO,GAAG,aAAa,CAAC,OAAO;UACrC,MAAM,YAAY,GAAG;YACnB,OAAO,EAAE,OAAO,KAAK,OAAO;YAC5B,QAAQ,EAAE,OAAO,KAAK;WACvB;UACD,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE;YAC9C,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC;YAE9C;YACA;YACA,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;cACnE,KAAK,CAAC,cAAc,CAAA,CAAE;YACvB;UACF;QACH;OACD;IACH,CAAC;IAED,IAAA,CAAA,QAAQ,GAAG,CAAC,UAAkB,EAAE,GAAS,EAAE,MAAc,KAAI;MAC3D;MACA,MAAM;QAAE;MAAoB,CAAE,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW;MAC1D,MAAM,WAAW,GAAG,GAAG,IAAI,GAAG,CAAC,SAAS;MACxC;MACA;MACA,IAAI,wBAAwB,GAAG,WAAW,GAAG,CAAC,GAAG,oBAAoB;MACrE,OAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACM,GAAG,IACL,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,EAAE,MAAM,CACvB,CAAC,GAAW,EAAE,IAAc,EAAE,SAAiB,KAAI;QACjD,MAAM,YAAY,GAAG,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC;QAC1C,MAAM,cAAc,GAAG,IAAI,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,UAAU;QAC/D,IAAI,UAAU,GAAQ,EAAE;QACxB,IAAI,YAAY,IAAI,IAAI,CAAC,UAAU,EAAE;UACnC;UACA;UACA;UACA,UAAU,GAAG,IAAI,CAAC,UAAU;SAC7B,MAAM,IAAI,WAAW,IAAI,SAAS,GAAG,oBAAoB,EAAE;UAC1D;UACA;UACA,UAAU,GAAG,UAAU,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU;QAC9D;QACD,IAAI,eAAe,GAA4C,IAAI;QACnE,IAAI,YAAY,IAAI,cAAc,EAAE;UAClC,eAAe,GAAI,IAAI,CAAC,KAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC;SAC5F,MAAM,IAAI,YAAY,EAAE;UACvB,eAAe,GAAG,IAAI,CAAC,KAAK;QAC7B;QACD,MAAM,UAAU,GAAgB;UAC9B,CAAC,UAAU,CAAC,SAAS,GAAG,wBAAwB,CAAC,CAAC,QAAQ,GAAG;YAC3D,KAAK,EAAE,eAAkC;YACzC,UAAU;YACV,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA;cACH,SAAS,EAAE;YAAI,CAAA,EACX,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAK;UAExC;SACF;QAED;QACA,IAAI,YAAY,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;UACpD,wBAAwB,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC;QACnD;QACD,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACK,GAAG,CAAA,EACH,UAAU,CAAA;MAEjB,CAAC,EACD;QAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,KAAK,SAAS,GAAG,GAAG,CAAC,EAAE,GAAG;MAAM,CAAE,CAC/D,CAAA;IAER,CAAC;EAoCH;EAlCE,MAAM,CAAA,EAAA;IACJ;IACA,MAAM,EAAA,GAA0E,IAAI,CAAC,KAAK;MAApF;QAAE,SAAS;QAAE,UAAU;QAAE,IAAI;QAAE,MAAM;QAAE,QAAQ;QAAE;MAAU,CAAA,GAAA,EAAyB;MAApB,KAAK,GAAA,MAAA,CAAA,EAAA,EAArE,CAAA,WAAA,EAAA,YAAA,EAAA,MAAA,EAAA,QAAA,EAAA,UAAA,EAAA,YAAA,CAAuE,CAAa;IAE1F,IAAI,UAAkB;IACtB,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;MACzB,UAAU,GAAI,IAAe,CAAC,GAAG,CAAC,CAAC,MAAY,EAAE,SAAiB,KAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAClE,MAAM,CAAA,EACN,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,CAAC,CAAA,EAAA;QAC/C,UAAU,EAAE,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC;QACvC,YAAY,EAAE,MAAM,CAAC,UAAU,IAAI,KAAK;QACxC,OAAO,EAAE,SAAS,KAAK,CAAC;QACxB,MAAM,EAAE,SAAS,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC;QACrC,cAAc,EAAE,KAAK;QACrB,aAAa,EAAE;MAAK,CAAA,CACpB,CAAW;MACb,cAAc,CAAC,UAAU,CAAC;IAC3B;IAED,OACE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAQ,EAAA,IAAA,EACZ,UAAU,IACT,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACH,KAAK,EAAA;MACT,UAAU,EAAE,UAAU;MACtB,IAAI,EAAE,UAAuB;MAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,MAAM,EAAE,MAAM;MACd,SAAS,EAAE;IAAS,CAAA,CAAA,CAEvB,CACc;EAErB;AACD;AAED,OAAO,MAAM,SAAS,GAAI,EAeT,IAAI;MAfK;MACxB,SAAS,GAAG,EAAY;MACxB,QAAQ,GAAG,IAAuB;MAClC,MAAM,GAAG,qBAA+B;MACxC;MACA,KAAK,GAAG,CAAC,GAAG,IAAS,MAAM,CAAA,CAAE,CAAC;MAC9B,UAAU,GAAG,CACX,KAA6C,EAC7C,GAAS,EACT,QAAuB,EACvB,YAA2B,KAE3B;MACA;IAAuB,CAAA,GAAA,EAEV;IADZ,KAAK,GAAA,MAAA,CAAA,EAAA,EAdgB,CAAA,WAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,YAAA,CAezB,CADS;EACY,OACpB,KAAA,CAAA,aAAA,CAAC,YAAY,CAAC,QAAQ,EAAA,IAAA,EAClB,EAAuC,IAAI;QAA3C;QAAE,UAAU,GAAG,EAAE;QAAE,IAAI,GAAG;MAAE,CAAA,GAAA,EAAW;MAAN,IAAI,GAAA,MAAA,CAAA,EAAA,EAArC,CAAA,YAAA,EAAA,MAAA,CAAuC,CAAF;IAAO,OAC5C,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA,MAAA,CAAA,MAAA,CAAA;MACV,UAAU,EAAE,UAAU;MACtB,IAAI,EAAE,IAAc;MACpB,KAAK,EAAE,KAAK;MACZ,SAAS,EAAE,SAAS;MACpB,MAAM,EAAE,MAAM;MACd,UAAU,EAAE;IAAU,CAAA,EAClB,KAAK,EACL,IAAI,CAAA,EAEP,QAAQ,CACG;GACf,CACqB;CACzB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\nconst flagVisibility = (rows) => {\n    const visibleRows = rows.filter((oneRow) => !oneRow.parent || oneRow.isExpanded);\n    if (visibleRows.length > 0) {\n        visibleRows[0].isFirstVisible = true;\n        visibleRows[visibleRows.length - 1].isLastVisible = true;\n    }\n};\nclass ContextBody extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onRow = (row, rowProps) => {\n            const { onRowClick, onRow } = this.props;\n            const extendedRowProps = Object.assign(Object.assign({}, rowProps), (onRow ? onRow(row, rowProps) : {}));\n            return {\n                row,\n                rowProps: extendedRowProps,\n                onClick: (event) => {\n                    const tagName = event.target.tagName;\n                    const computedData = {\n                        isInput: tagName === 'INPUT',\n                        isButton: tagName === 'BUTTON'\n                    };\n                    onRowClick(event, row, rowProps, computedData);\n                },\n                onKeyDown: (event) => {\n                    const targetElement = event.target;\n                    const tagName = targetElement.tagName;\n                    const computedData = {\n                        isInput: tagName === 'INPUT',\n                        isButton: tagName === 'BUTTON'\n                    };\n                    if (event.key === 'Enter' || event.key === ' ') {\n                        onRowClick(event, row, rowProps, computedData);\n                        // prevent event default if space is typed while focusing on a hoverable row\n                        // so that the page does not scroll when trying to use spacebar to select a row\n                        if (event.key === ' ' && !!targetElement.closest('.pf-m-hoverable')) {\n                            event.preventDefault();\n                        }\n                    }\n                }\n            };\n        };\n        this.mapCells = (headerData, row, rowKey) => {\n            // column indexes start after generated optional columns like collapsible or select column(s)\n            const { firstUserColumnIndex } = headerData[0].extraParams;\n            const isFullWidth = row && row.fullWidth;\n            // typically you'd want to map each cell to its column header, but in the case of fullWidth\n            // the first column could be the Select and/or Expandable column\n            let additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n            return Object.assign({}, (row &&\n                (row.cells || row).reduce((acc, cell, cellIndex) => {\n                    const isCellObject = cell === Object(cell);\n                    const isCellFunction = cell && typeof cell.title === 'function';\n                    let formatters = [];\n                    if (isCellObject && cell.formatters) {\n                        // give priority to formatters specified on the cell object\n                        // expandable example:\n                        // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n                        formatters = cell.formatters;\n                    }\n                    else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n                        // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n                        // to the first user column's header formatters\n                        formatters = headerData[firstUserColumnIndex].cell.formatters;\n                    }\n                    let mappedCellTitle = cell;\n                    if (isCellObject && isCellFunction) {\n                        mappedCellTitle = cell.title(cell.props.value, rowKey, cellIndex, cell.props);\n                    }\n                    else if (isCellObject) {\n                        mappedCellTitle = cell.title;\n                    }\n                    const mappedCell = {\n                        [headerData[cellIndex + additionalColsIndexShift].property]: {\n                            title: mappedCellTitle,\n                            formatters,\n                            props: Object.assign({ isVisible: true }, (isCellObject ? cell.props : null))\n                        }\n                    };\n                    // increment the shift index when a cell spans multiple columns\n                    if (isCellObject && cell.props && cell.props.colSpan) {\n                        additionalColsIndexShift += cell.props.colSpan - 1;\n                    }\n                    return Object.assign(Object.assign({}, acc), mappedCell);\n                }, { secretTableRowKeyId: row.id !== undefined ? row.id : rowKey })));\n        };\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { className, headerData, rows, rowKey, children, onRowClick } = _a, props = __rest(_a, [\"className\", \"headerData\", \"rows\", \"rowKey\", \"children\", \"onRowClick\"]);\n        let mappedRows;\n        if (headerData.length > 0) {\n            mappedRows = rows.map((oneRow, oneRowKey) => (Object.assign(Object.assign(Object.assign({}, oneRow), this.mapCells(headerData, oneRow, oneRowKey)), { isExpanded: isRowExpanded(oneRow, rows), isHeightAuto: oneRow.heightAuto || false, isFirst: oneRowKey === 0, isLast: oneRowKey === rows.length - 1, isFirstVisible: false, isLastVisible: false })));\n            flagVisibility(mappedRows);\n        }\n        return (React.createElement(React.Fragment, null, mappedRows && (React.createElement(BaseBody, Object.assign({}, props, { mappedRows: mappedRows, rows: mappedRows, onRow: this.onRow, rowKey: rowKey, className: className })))));\n    }\n}\nexport const TableBody = (_a) => {\n    var { className = '', children = null, rowKey = 'secretTableRowKeyId', \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    onRow = (...args) => ({}), onRowClick = (event, row, rowProps, computedData) => \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    undefined } = _a, props = __rest(_a, [\"className\", \"children\", \"rowKey\", \"onRow\", \"onRowClick\"]);\n    return (React.createElement(TableContext.Consumer, null, (_a) => {\n        var { headerData = [], rows = [] } = _a, rest = __rest(_a, [\"headerData\", \"rows\"]);\n        return (React.createElement(ContextBody, Object.assign({ headerData: headerData, rows: rows, onRow: onRow, className: className, rowKey: rowKey, onRowClick: onRowClick }, props, rest), children));\n    }));\n};\n//# sourceMappingURL=Body.js.map"]},"metadata":{},"sourceType":"module"}