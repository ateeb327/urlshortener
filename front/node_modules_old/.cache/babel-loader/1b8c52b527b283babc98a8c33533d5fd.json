{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SimpleList/simple-list';\nimport { SimpleListGroup } from './SimpleListGroup';\nexport const SimpleListContext = React.createContext({});\nexport class SimpleList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      currentRef: null\n    };\n    this.handleCurrentUpdate = (newCurrentRef, itemProps) => {\n      this.setState({\n        currentRef: newCurrentRef\n      });\n      const {\n        onSelect\n      } = this.props;\n      onSelect && onSelect(newCurrentRef, itemProps);\n    };\n  }\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n      {\n        children,\n        className,\n        onSelect,\n        isControlled,\n        'aria-label': ariaLabel\n      } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"onSelect\", \"isControlled\", 'aria-label']);\n    let isGrouped = false;\n    if (children) {\n      isGrouped = React.Children.toArray(children)[0].type === SimpleListGroup;\n    }\n    return React.createElement(SimpleListContext.Provider, {\n      value: {\n        currentRef: this.state.currentRef,\n        updateCurrentRef: this.handleCurrentUpdate,\n        isControlled\n      }\n    }, React.createElement(\"div\", Object.assign({\n      className: css(styles.simpleList, className)\n    }, props), isGrouped && children, !isGrouped && React.createElement(\"ul\", {\n      \"aria-label\": ariaLabel\n    }, children)));\n  }\n}\nSimpleList.displayName = 'SimpleList';\nSimpleList.defaultProps = {\n  children: null,\n  className: '',\n  isControlled: true\n};","map":{"version":3,"sources":["../../../../src/components/SimpleList/SimpleList.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,gEAAgE;AACnF,SAAS,eAAe,QAAQ,mBAAmB;AAiCnD,OAAO,MAAM,iBAAiB,GAAG,KAAK,CAAC,aAAa,CAAkC,CAAA,CAAE,CAAC;AAEzF,OAAM,MAAO,UAAW,SAAQ,KAAK,CAAC,SAA2C,CAAA;EAAjF,WAAA,CAAA,EAAA;;IAEE,IAAA,CAAA,KAAK,GAAG;MACN,UAAU,EAAE;KACb;IAQD,IAAA,CAAA,mBAAmB,GAAG,CACpB,aAAsF,EACtF,SAA8B,KAC5B;MACF,IAAI,CAAC,QAAQ,CAAC;QAAE,UAAU,EAAE;MAAa,CAAE,CAAC;MAC5C,MAAM;QAAE;MAAQ,CAAE,GAAG,IAAI,CAAC,KAAK;MAC/B,QAAQ,IAAI,QAAQ,CAAC,aAAa,EAAE,SAAS,CAAC;IAChD,CAAC;EA0BH;EAxBE,MAAM,CAAA,EAAA;IACJ;IACA,MAAM,EAAA,GAAqF,IAAI,CAAC,KAAK;MAA/F;QAAE,QAAQ;QAAE,SAAS;QAAE,QAAQ;QAAE,YAAY;QAAE,YAAY,EAAE;MAAS,CAAA,GAAA,EAAyB;MAApB,KAAK,GAAA,MAAA,CAAA,EAAA,EAAhF,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,cAAA,EAAA,YAAA,CAAkF,CAAa;IAErG,IAAI,SAAS,GAAG,KAAK;IACrB,IAAI,QAAQ,EAAE;MACZ,SAAS,GAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAwB,CAAC,IAAI,KAAK,eAAe;IACjG;IAED,OACE,KAAA,CAAA,aAAA,CAAC,iBAAiB,CAAC,QAAQ,EAAA;MACzB,KAAK,EAAE;QACL,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;QACjC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB;QAC1C;MACD;IAAA,CAAA,EAED,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS;IAAC,CAAA,EAAM,KAAK,CAAA,EACzD,SAAS,IAAI,QAAQ,EACrB,CAAC,SAAS,IAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MAAA,YAAA,EAAgB;IAAS,CAAA,EAAG,QAAQ,CAAM,CACrD,CACqB;EAEjC;;AA3CO,UAAA,CAAA,WAAW,GAAG,YAAY;AAK1B,UAAA,CAAA,YAAY,GAAoB;EACrC,QAAQ,EAAE,IAAuB;EACjC,SAAS,EAAE,EAAE;EACb,YAAY,EAAE;CACf","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SimpleList/simple-list';\nimport { SimpleListGroup } from './SimpleListGroup';\nexport const SimpleListContext = React.createContext({});\nexport class SimpleList extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            currentRef: null\n        };\n        this.handleCurrentUpdate = (newCurrentRef, itemProps) => {\n            this.setState({ currentRef: newCurrentRef });\n            const { onSelect } = this.props;\n            onSelect && onSelect(newCurrentRef, itemProps);\n        };\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, className, onSelect, isControlled, 'aria-label': ariaLabel } = _a, props = __rest(_a, [\"children\", \"className\", \"onSelect\", \"isControlled\", 'aria-label']);\n        let isGrouped = false;\n        if (children) {\n            isGrouped = React.Children.toArray(children)[0].type === SimpleListGroup;\n        }\n        return (React.createElement(SimpleListContext.Provider, { value: {\n                currentRef: this.state.currentRef,\n                updateCurrentRef: this.handleCurrentUpdate,\n                isControlled\n            } },\n            React.createElement(\"div\", Object.assign({ className: css(styles.simpleList, className) }, props),\n                isGrouped && children,\n                !isGrouped && React.createElement(\"ul\", { \"aria-label\": ariaLabel }, children))));\n    }\n}\nSimpleList.displayName = 'SimpleList';\nSimpleList.defaultProps = {\n    children: null,\n    className: '',\n    isControlled: true\n};\n//# sourceMappingURL=SimpleList.js.map"]},"metadata":{},"sourceType":"module"}