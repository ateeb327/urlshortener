{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\nexport const selectable = (label, {\n  rowIndex,\n  columnIndex,\n  rowData,\n  column,\n  property\n}) => {\n  const {\n    extraParams: {\n      onSelect,\n      selectVariant,\n      allRowsSelected,\n      isHeaderSelectDisabled\n    }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n    return {\n      component: 'td',\n      isVisible: true\n    };\n  }\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n  /**\n   * @param {React.FormEvent} event - React form event\n   */\n  function selectClick(event) {\n    const selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected;\n    // tslint:disable-next-line:no-unused-expression\n    onSelect && onSelect(event, selected, rowId, rowData, extraData);\n  }\n  const customProps = Object.assign(Object.assign(Object.assign({}, rowId !== -1 ? {\n    checked: rowData && !!rowData.selected,\n    'aria-label': `Select row ${rowIndex}`\n  } : {\n    checked: allRowsSelected,\n    'aria-label': 'Select all rows'\n  }), rowData && (rowData.disableCheckbox || rowData.disableSelection) && {\n    disabled: true,\n    className: checkStyles.checkInput\n  }), !rowData && isHeaderSelectDisabled && {\n    disabled: true\n  });\n  let selectName = 'check-all';\n  if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n    selectName = `checkrow${rowIndex}`;\n  } else if (rowId !== -1) {\n    selectName = 'radioGroup';\n  }\n  return {\n    className: css(styles.tableCheck),\n    component: 'td',\n    isVisible: !rowData || !rowData.fullWidth,\n    children: React.createElement(SelectColumn, Object.assign({}, customProps, {\n      selectVariant: selectVariant,\n      onSelect: selectClick,\n      name: selectName\n    }), label)\n  };\n};","map":{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/selectable.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,qDAAqD;AAExE,SAAS,YAAY,EAAE,gBAAgB,QAAQ,oBAAoB;AACnE,OAAO,WAAW,MAAM,qDAAqD;AAE7E,OAAO,MAAM,UAAU,GAAe,CACpC,KAA0B,EAC1B;EAAE,QAAQ;EAAE,WAAW;EAAE,OAAO;EAAE,MAAM;EAAE;AAAQ,CAAU,KAC1D;EACF,MAAM;IACJ,WAAW,EAAE;MAAE,QAAQ;MAAE,aAAa;MAAE,eAAe;MAAE;IAAsB;EAAE,CAClF,GAAG,MAAM;EACV,MAAM,SAAS,GAAG;IAChB,QAAQ;IACR,WAAW;IACX,MAAM;IACN;GACD;EAED,IAAI,OAAO,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;IAC5F,OAAO;MACL,SAAS,EAAE,IAAI;MACf,SAAS,EAAE;KACZ;EACF;EACD,MAAM,KAAK,GAAG,QAAQ,KAAK,SAAS,GAAG,QAAQ,GAAG,CAAC,CAAC;EAEpD;;AAEG;EACH,SAAS,WAAW,CAAC,KAAwC,EAAA;IAC3D,MAAM,QAAQ,GAAG,QAAQ,KAAK,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,GAAG,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ;IACpG;IACA,QAAQ,IAAI,QAAQ,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;EAClE;EACA,MAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACX,KAAK,KAAK,CAAC,CAAC,GACZ;IACE,OAAO,EAAE,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ;IACtC,YAAY,EAAE,cAAc,QAAQ;GACrC,GACD;IACE,OAAO,EAAE,eAAe;IACxB,YAAY,EAAE;EACf,CAAC,CAAA,EACF,OAAO,KACR,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,gBAAgB,CAAC,IAAI;IACvD,QAAQ,EAAE,IAAI;IACd,SAAS,EAAE,WAAW,CAAC;EACxB,CAAC,CAAA,EACA,CAAC,OAAO,IAAI,sBAAsB,IAAI;IAAE,QAAQ,EAAE;EAAI,CAAG,CAC9D;EACD,IAAI,UAAU,GAAG,WAAW;EAC5B,IAAI,KAAK,KAAK,CAAC,CAAC,IAAI,aAAa,KAAK,gBAAgB,CAAC,QAAQ,EAAE;IAC/D,UAAU,GAAG,WAAW,QAAQ,EAAE;GACnC,MAAM,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;IACvB,UAAU,GAAG,YAAY;EAC1B;EAED,OAAO;IACL,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;IACjC,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS;IACzC,QAAQ,EACN,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACP,WAAW,EAAA;MACf,aAAa,EAAE,aAAiC;MAChD,QAAQ,EAAE,WAAW;MACrB,IAAI,EAAE;IAAU,CAAA,CAAA,EAEf,KAAwB;GAG9B;AACH,CAAC","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\nexport const selectable = (label, { rowIndex, columnIndex, rowData, column, property }) => {\n    const { extraParams: { onSelect, selectVariant, allRowsSelected, isHeaderSelectDisabled } } = column;\n    const extraData = {\n        rowIndex,\n        columnIndex,\n        column,\n        property\n    };\n    if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n        return {\n            component: 'td',\n            isVisible: true\n        };\n    }\n    const rowId = rowIndex !== undefined ? rowIndex : -1;\n    /**\n     * @param {React.FormEvent} event - React form event\n     */\n    function selectClick(event) {\n        const selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected;\n        // tslint:disable-next-line:no-unused-expression\n        onSelect && onSelect(event, selected, rowId, rowData, extraData);\n    }\n    const customProps = Object.assign(Object.assign(Object.assign({}, (rowId !== -1\n        ? {\n            checked: rowData && !!rowData.selected,\n            'aria-label': `Select row ${rowIndex}`\n        }\n        : {\n            checked: allRowsSelected,\n            'aria-label': 'Select all rows'\n        })), (rowData &&\n        (rowData.disableCheckbox || rowData.disableSelection) && {\n        disabled: true,\n        className: checkStyles.checkInput\n    })), (!rowData && isHeaderSelectDisabled && { disabled: true }));\n    let selectName = 'check-all';\n    if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n        selectName = `checkrow${rowIndex}`;\n    }\n    else if (rowId !== -1) {\n        selectName = 'radioGroup';\n    }\n    return {\n        className: css(styles.tableCheck),\n        component: 'td',\n        isVisible: !rowData || !rowData.fullWidth,\n        children: (React.createElement(SelectColumn, Object.assign({}, customProps, { selectVariant: selectVariant, onSelect: selectClick, name: selectName }), label))\n    };\n};\n//# sourceMappingURL=selectable.js.map"]},"metadata":{},"sourceType":"module"}