{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton } from './DataListDragButton';\nfunction findDataListDragButton(node) {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node;\n  }\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n      if (button) {\n        return button;\n      }\n    }\n  }\n  return null;\n}\nexport class DataListItem extends React.Component {\n  render() {\n    const _a = this.props,\n      {\n        children,\n        isExpanded,\n        className,\n        id,\n        'aria-labelledby': ariaLabelledBy,\n        selectableInputAriaLabel\n      } = _a,\n      props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby', \"selectableInputAriaLabel\"]);\n    return React.createElement(DataListContext.Consumer, null, ({\n      isSelectable,\n      selectedDataListItemId,\n      updateSelectedDataListItem,\n      selectableRow,\n      isDraggable,\n      dragStart,\n      dragEnd,\n      drop\n    }) => {\n      const selectDataListItem = event => {\n        let target = event.target;\n        while (event.currentTarget !== target) {\n          if ('onclick' in target && target.onclick || target.parentNode.classList.contains(styles.dataListItemAction) || target.parentNode.classList.contains(styles.dataListItemControl)) {\n            // check other event handlers are not present.\n            return;\n          } else {\n            target = target.parentNode;\n          }\n        }\n        updateSelectedDataListItem(id);\n      };\n      const onKeyDown = event => {\n        if (event.key === KeyTypes.Enter) {\n          updateSelectedDataListItem(id);\n        }\n      };\n      // We made the DataListDragButton determine if the entire item is draggable instead of\n      // DataListItem like we should have.\n      // Recursively search children for the DataListDragButton and see if it's disabled...\n      const dragButton = findDataListDragButton(children);\n      const dragProps = isDraggable && {\n        draggable: dragButton ? !dragButton.props.isDisabled : true,\n        onDrop: drop,\n        onDragEnd: dragEnd,\n        onDragStart: dragStart\n      };\n      const isSelected = selectedDataListItemId === id;\n      const selectableInputAriaProps = selectableInputAriaLabel ? {\n        'aria-label': selectableInputAriaLabel\n      } : {\n        'aria-labelledby': ariaLabelledBy\n      };\n      return React.createElement(\"li\", Object.assign({\n        id: id,\n        className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && isSelected && styles.modifiers.selected, className),\n        \"aria-labelledby\": ariaLabelledBy\n      }, isSelectable && {\n        tabIndex: 0,\n        onClick: selectDataListItem,\n        onKeyDown\n      }, isSelectable && isSelected && {\n        'aria-selected': true\n      }, props, dragProps), selectableRow && React.createElement(\"input\", Object.assign({\n        className: \"pf-screen-reader\",\n        type: \"radio\",\n        checked: isSelected,\n        onChange: event => selectableRow.onChange(id, event),\n        tabIndex: -1\n      }, selectableInputAriaProps)), React.Children.map(children, child => React.isValidElement(child) && React.cloneElement(child, {\n        rowid: ariaLabelledBy\n      })));\n    });\n  }\n}\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n  isExpanded: false,\n  className: '',\n  id: '',\n  children: null,\n  'aria-labelledby': ''\n};","map":{"version":3,"sources":["../../../../src/components/DataList/DataListItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton } from './DataListDragButton';\nfunction findDataListDragButton(node) {\n    if (!React.isValidElement(node)) {\n        return null;\n    }\n    if (node.type === DataListDragButton) {\n        return node;\n    }\n    if (node.props.children) {\n        for (const child of React.Children.toArray(node.props.children)) {\n            const button = findDataListDragButton(child);\n            if (button) {\n                return button;\n            }\n        }\n    }\n    return null;\n}\nexport class DataListItem extends React.Component {\n    render() {\n        const _a = this.props, { children, isExpanded, className, id, 'aria-labelledby': ariaLabelledBy, selectableInputAriaLabel } = _a, props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby', \"selectableInputAriaLabel\"]);\n        return (React.createElement(DataListContext.Consumer, null, ({ isSelectable, selectedDataListItemId, updateSelectedDataListItem, selectableRow, isDraggable, dragStart, dragEnd, drop }) => {\n            const selectDataListItem = (event) => {\n                let target = event.target;\n                while (event.currentTarget !== target) {\n                    if (('onclick' in target && target.onclick) ||\n                        target.parentNode.classList.contains(styles.dataListItemAction) ||\n                        target.parentNode.classList.contains(styles.dataListItemControl)) {\n                        // check other event handlers are not present.\n                        return;\n                    }\n                    else {\n                        target = target.parentNode;\n                    }\n                }\n                updateSelectedDataListItem(id);\n            };\n            const onKeyDown = (event) => {\n                if (event.key === KeyTypes.Enter) {\n                    updateSelectedDataListItem(id);\n                }\n            };\n            // We made the DataListDragButton determine if the entire item is draggable instead of\n            // DataListItem like we should have.\n            // Recursively search children for the DataListDragButton and see if it's disabled...\n            const dragButton = findDataListDragButton(children);\n            const dragProps = isDraggable && {\n                draggable: dragButton ? !dragButton.props.isDisabled : true,\n                onDrop: drop,\n                onDragEnd: dragEnd,\n                onDragStart: dragStart\n            };\n            const isSelected = selectedDataListItemId === id;\n            const selectableInputAriaProps = selectableInputAriaLabel\n                ? { 'aria-label': selectableInputAriaLabel }\n                : { 'aria-labelledby': ariaLabelledBy };\n            return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && isSelected && styles.modifiers.selected, className), \"aria-labelledby\": ariaLabelledBy }, (isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown }), (isSelectable && isSelected && { 'aria-selected': true }), props, dragProps),\n                selectableRow && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", type: \"radio\", checked: isSelected, onChange: event => selectableRow.onChange(id, event), tabIndex: -1 }, selectableInputAriaProps))),\n                React.Children.map(children, child => React.isValidElement(child) &&\n                    React.cloneElement(child, {\n                        rowid: ariaLabelledBy\n                    }))));\n        }));\n    }\n}\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n    isExpanded: false,\n    className: '',\n    id: '',\n    children: null,\n    'aria-labelledby': ''\n};\n//# sourceMappingURL=DataListItem.js.map"]},"metadata":{},"sourceType":"module"}