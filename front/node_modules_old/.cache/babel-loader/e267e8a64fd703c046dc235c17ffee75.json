{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Skeleton/skeleton';\nimport { css } from '@patternfly/react-styles';\nexport const Skeleton = _a => {\n  var {\n      className,\n      width,\n      height,\n      fontSize,\n      shape,\n      screenreaderText\n    } = _a,\n    props = __rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n  const fontHeightClassName = fontSize ? Object.values(styles.modifiers).find(key => key === `pf-m-text-${fontSize}`) : undefined;\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.skeleton, fontSize && fontHeightClassName, shape === 'circle' && styles.modifiers.circle, shape === 'square' && styles.modifiers.square, className)\n  }, (width || height) && {\n    style: Object.assign({\n      '--pf-c-skeleton--Width': width ? width : undefined,\n      '--pf-c-skeleton--Height': height ? height : undefined\n    }, props.style)\n  }), React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, screenreaderText));\n};\nSkeleton.displayName = 'Skeleton';","map":{"version":3,"sources":["../../../../src/components/Skeleton/Skeleton.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,2DAA2D;AAC9E,SAAS,GAAG,QAAQ,0BAA0B;AAiB9C,OAAO,MAAM,QAAQ,GAA4C,EAQjD,IAAI;MAR6C;MAC/D,SAAS;MACT,KAAK;MACL,MAAM;MACN,QAAQ;MACR,KAAK;MACL;IAAgB,CAAA,GAAA,EAEF;IADX,KAAK,GAAA,MAAA,CAAA,EAAA,EAPuD,CAAA,WAAA,EAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAA,kBAAA,CAQhE,CADS;EAER,MAAM,mBAAmB,GAAG,QAAQ,GAChC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,KAAK,aAAa,QAAQ,EAAE,CAAC,GAC5E,SAAS;EAEb,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACM,KAAK,EAAA;IACT,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,QAAQ,EACf,QAAQ,IAAI,mBAAmB,EAC/B,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,EAC7C,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,EAC7C,SAAS;EACV,CAAA,EACI,CAAC,KAAK,IAAI,MAAM,KAAK;IACxB,KAAK,EAAE,MAAA,CAAA,MAAA,CAAA;MACL,wBAAwB,EAAE,KAAK,GAAG,KAAK,GAAG,SAAS;MACnD,yBAAyB,EAAE,MAAM,GAAG,MAAM,GAAG;IAAS,CAAA,EACnD,KAAK,CAAC,KAAK;EAEjB,CAAC,CAAA,EAEF,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAoB,CAAA,EAAE,gBAAgB,CAAQ,CAC1D;AAEV,CAAC;AACD,QAAQ,CAAC,WAAW,GAAG,UAAU","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Skeleton/skeleton';\nimport { css } from '@patternfly/react-styles';\nexport const Skeleton = (_a) => {\n    var { className, width, height, fontSize, shape, screenreaderText } = _a, props = __rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n    const fontHeightClassName = fontSize\n        ? Object.values(styles.modifiers).find(key => key === `pf-m-text-${fontSize}`)\n        : undefined;\n    return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.skeleton, fontSize && fontHeightClassName, shape === 'circle' && styles.modifiers.circle, shape === 'square' && styles.modifiers.square, className) }, ((width || height) && {\n        style: Object.assign({ '--pf-c-skeleton--Width': width ? width : undefined, '--pf-c-skeleton--Height': height ? height : undefined }, props.style)\n    })),\n        React.createElement(\"span\", { className: \"pf-u-screen-reader\" }, screenreaderText)));\n};\nSkeleton.displayName = 'Skeleton';\n//# sourceMappingURL=Skeleton.js.map"]},"metadata":{},"sourceType":"module"}