{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport const collapsible = (value, {\n  rowIndex,\n  columnIndex,\n  rowData,\n  column,\n  property\n}) => {\n  const {\n    extraParams: {\n      onCollapse,\n      rowLabeledBy = 'simple-node',\n      expandId = 'expand-toggle',\n      allRowsExpanded,\n      collapseAllAriaLabel\n    }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n  const customProps = Object.assign({}, rowId !== -1 ? {\n    isOpen: rowData === null || rowData === void 0 ? void 0 : rowData.isOpen,\n    'aria-labelledby': `${rowLabeledBy}${rowId} ${expandId}${rowId}`\n  } : {\n    isOpen: allRowsExpanded,\n    'aria-label': collapseAllAriaLabel || 'Expand all rows'\n  });\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n  function onToggle(event) {\n    const open = rowData ? !rowData.isOpen : !allRowsExpanded;\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n  }\n  return {\n    className: ((rowData === null || rowData === void 0 ? void 0 : rowData.isOpen) !== undefined || rowId === -1) && css(styles.tableToggle),\n    isVisible: !(rowData === null || rowData === void 0 ? void 0 : rowData.fullWidth),\n    children: React.createElement(CollapseColumn, Object.assign({\n      \"aria-labelledby\": `${rowLabeledBy}${rowId} ${expandId}${rowId}`,\n      onToggle: onToggle,\n      id: expandId + rowId\n    }, customProps), value)\n  };\n};\nexport const expandable = (value, {\n  rowData\n}) => rowData && rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\nexport const expandedRow = (colSpan, additionalColSpan = 0) => {\n  const expandedRowFormatter = (value, {\n    columnIndex,\n    rowIndex,\n    rowData,\n    column: {\n      extraParams: {\n        contentId = 'expanded-content'\n      }\n    }\n  }) => value && rowData.hasOwnProperty('parent') && {\n    colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + (rowData.fullWidth ? additionalColSpan + 1 : 0) : 1,\n    id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n    className: rowData.noPadding && css(styles.modifiers.noPadding)\n  };\n  return expandedRowFormatter;\n};","map":{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/collapsible.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport const collapsible = (value, { rowIndex, columnIndex, rowData, column, property }) => {\n    const { extraParams: { onCollapse, rowLabeledBy = 'simple-node', expandId = 'expand-toggle', allRowsExpanded, collapseAllAriaLabel } } = column;\n    const extraData = {\n        rowIndex,\n        columnIndex,\n        column,\n        property\n    };\n    const rowId = rowIndex !== undefined ? rowIndex : -1;\n    const customProps = Object.assign({}, (rowId !== -1\n        ? {\n            isOpen: rowData === null || rowData === void 0 ? void 0 : rowData.isOpen,\n            'aria-labelledby': `${rowLabeledBy}${rowId} ${expandId}${rowId}`\n        }\n        : {\n            isOpen: allRowsExpanded,\n            'aria-label': collapseAllAriaLabel || 'Expand all rows'\n        }));\n    /**\n     * @param {React.MouseEvent} event - Mouse event\n     */\n    function onToggle(event) {\n        const open = rowData ? !rowData.isOpen : !allRowsExpanded;\n        // tslint:disable-next-line:no-unused-expression\n        onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n    }\n    return {\n        className: ((rowData === null || rowData === void 0 ? void 0 : rowData.isOpen) !== undefined || rowId === -1) && css(styles.tableToggle),\n        isVisible: !(rowData === null || rowData === void 0 ? void 0 : rowData.fullWidth),\n        children: (React.createElement(CollapseColumn, Object.assign({ \"aria-labelledby\": `${rowLabeledBy}${rowId} ${expandId}${rowId}`, onToggle: onToggle, id: expandId + rowId }, customProps), value))\n    };\n};\nexport const expandable = (value, { rowData }) => rowData && rowData.hasOwnProperty('parent') ? (React.createElement(ExpandableRowContent, null, value)) : (value);\nexport const expandedRow = (colSpan, additionalColSpan = 0) => {\n    const expandedRowFormatter = (value, { columnIndex, rowIndex, rowData, column: { extraParams: { contentId = 'expanded-content' } } }) => value &&\n        rowData.hasOwnProperty('parent') && {\n        colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + (rowData.fullWidth ? additionalColSpan + 1 : 0) : 1,\n        id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n        className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n    return expandedRowFormatter;\n};\n//# sourceMappingURL=collapsible.js.map"]},"metadata":{},"sourceType":"module"}