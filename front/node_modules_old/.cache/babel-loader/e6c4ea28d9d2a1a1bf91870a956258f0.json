{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\nexport const ToggleGroupItem = _a => {\n  var {\n      text,\n      icon,\n      className,\n      isDisabled = false,\n      isSelected = false,\n      'aria-label': ariaLabel = '',\n      onChange = () => {},\n      buttonId = ''\n    } = _a,\n    props = __rest(_a, [\"text\", \"icon\", \"className\", \"isDisabled\", \"isSelected\", 'aria-label', \"onChange\", \"buttonId\"]);\n  const handleChange = event => {\n    onChange(!isSelected, event);\n  };\n  if (!ariaLabel && icon && !text) {\n    /* eslint-disable no-console */\n    console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n  }\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.toggleGroupItem, className)\n  }, props), React.createElement(\"button\", Object.assign({\n    type: \"button\",\n    className: css(styles.toggleGroupButton, isSelected && styles.modifiers.selected),\n    \"aria-pressed\": isSelected,\n    onClick: handleChange\n  }, ariaLabel && {\n    'aria-label': ariaLabel\n  }, isDisabled && {\n    disabled: true\n  }, buttonId && {\n    id: buttonId\n  }), icon ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.icon\n  }, icon) : null, text ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.text\n  }, text) : null));\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';","map":{"version":3,"sources":["../../../../src/components/ToggleGroup/ToggleGroupItem.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,kEAAkE;AACrF,SAAS,sBAAsB,EAAE,sBAAsB,QAAQ,0BAA0B;AAqBzF,OAAO,MAAM,eAAe,GAAmD,EAUxD,IAAI;MAVoD;MAC7E,IAAI;MACJ,IAAI;MACJ,SAAS;MACT,UAAU,GAAG,KAAK;MAClB,UAAU,GAAG,KAAK;MAClB,YAAY,EAAE,SAAS,GAAG,EAAE;MAC5B,QAAQ,GAAG,CAAA,KAAK,CAAE,CAAC;MACnB,QAAQ,GAAG;IAAE,CAAA,GAAA,EAEQ;IADlB,KAAK,GAAA,MAAA,CAAA,EAAA,EATqE,CAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,CAU9E,CADS;EAER,MAAM,YAAY,GAAI,KAAU,IAAU;IACxC,QAAQ,CAAC,CAAC,UAAU,EAAE,KAAK,CAAC;EAC9B,CAAC;EAED,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;IAC/B;IACA,OAAO,CAAC,IAAI,CAAC,qFAAqF,CAAC;EACpG;EAED,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS;EAAC,CAAA,EAAM,KAAK,CAAA,EAC/D,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IACE,IAAI,EAAC,QAAQ;IACb,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,iBAAiB,EAAE,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;IAAA,cAAA,EACnE,UAAU;IACxB,OAAO,EAAE;EAAY,CAAA,EAChB,SAAS,IAAI;IAAE,YAAY,EAAE;EAAS,CAAE,EACxC,UAAU,IAAI;IAAE,QAAQ,EAAE;EAAI,CAAE,EAChC,QAAQ,IAAI;IAAE,EAAE,EAAE;EAAQ,CAAG,CAAA,EAEjC,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,sBAAsB,EAAA;IAAC,OAAO,EAAE,sBAAsB,CAAC;EAAI,CAAA,EAAG,IAAI,CAA0B,GAAG,IAAI,EAC3G,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,sBAAsB,EAAA;IAAC,OAAO,EAAE,sBAAsB,CAAC;EAAI,CAAA,EAAG,IAAI,CAA0B,GAAG,IAAI,CACrG,CACL;AAEV,CAAC;AACD,eAAe,CAAC,WAAW,GAAG,iBAAiB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\nexport const ToggleGroupItem = (_a) => {\n    var { text, icon, className, isDisabled = false, isSelected = false, 'aria-label': ariaLabel = '', onChange = () => { }, buttonId = '' } = _a, props = __rest(_a, [\"text\", \"icon\", \"className\", \"isDisabled\", \"isSelected\", 'aria-label', \"onChange\", \"buttonId\"]);\n    const handleChange = (event) => {\n        onChange(!isSelected, event);\n    };\n    if (!ariaLabel && icon && !text) {\n        /* eslint-disable no-console */\n        console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n    }\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.toggleGroupItem, className) }, props),\n        React.createElement(\"button\", Object.assign({ type: \"button\", className: css(styles.toggleGroupButton, isSelected && styles.modifiers.selected), \"aria-pressed\": isSelected, onClick: handleChange }, (ariaLabel && { 'aria-label': ariaLabel }), (isDisabled && { disabled: true }), (buttonId && { id: buttonId })),\n            icon ? React.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.icon }, icon) : null,\n            text ? React.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.text }, text) : null)));\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';\n//# sourceMappingURL=ToggleGroupItem.js.map"]},"metadata":{},"sourceType":"module"}