{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport { debounce } from '../../helpers/util';\nimport { globalWidthBreakpoints } from '../../helpers/constants';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport class OverflowMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.observer = () => {};\n    this.handleResize = () => {\n      const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];\n      if (!breakpointWidth) {\n        // eslint-disable-next-line no-console\n        console.error('OverflowMenu will not be visible without a valid breakpoint.');\n        return;\n      }\n      const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;\n      const isBelowBreakpoint = relativeWidth < breakpointWidth;\n      if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {\n        this.setState({\n          isBelowBreakpoint\n        });\n      }\n    };\n    this.handleResizeWithDelay = debounce(this.handleResize, 250);\n    this.state = {\n      isBelowBreakpoint: false,\n      breakpointRef: undefined\n    };\n  }\n  getBreakpointRef() {\n    const {\n      breakpointReference\n    } = this.props;\n    if (breakpointReference.current) {\n      return breakpointReference.current;\n    } else if (typeof breakpointReference === 'function') {\n      return breakpointReference();\n    }\n  }\n  componentDidMount() {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n    this.setState({\n      breakpointRef: reference\n    });\n    this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n    this.handleResize();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n    if (prevState.breakpointRef !== reference) {\n      // To remove any previous observer/event listener from componentDidMount before adding a new one\n      this.observer();\n      this.setState({\n        breakpointRef: reference\n      });\n      this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n      this.handleResize();\n    }\n  }\n  componentWillUnmount() {\n    this.observer();\n  }\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n      {\n        className,\n        breakpoint,\n        children,\n        breakpointReference\n      } = _a,\n      props = __rest(_a, [\"className\", \"breakpoint\", \"children\", \"breakpointReference\"]);\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: css(styles.overflowMenu, className)\n    }), React.createElement(OverflowMenuContext.Provider, {\n      value: {\n        isBelowBreakpoint: this.state.isBelowBreakpoint\n      }\n    }, children));\n  }\n}\nOverflowMenu.displayName = 'OverflowMenu';\nOverflowMenu.contextType = OverflowMenuContext;","map":{"version":3,"sources":["../../../../src/components/OverflowMenu/OverflowMenu.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport { debounce } from '../../helpers/util';\nimport { globalWidthBreakpoints } from '../../helpers/constants';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport class OverflowMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.observer = () => { };\n        this.handleResize = () => {\n            const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];\n            if (!breakpointWidth) {\n                // eslint-disable-next-line no-console\n                console.error('OverflowMenu will not be visible without a valid breakpoint.');\n                return;\n            }\n            const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;\n            const isBelowBreakpoint = relativeWidth < breakpointWidth;\n            if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {\n                this.setState({ isBelowBreakpoint });\n            }\n        };\n        this.handleResizeWithDelay = debounce(this.handleResize, 250);\n        this.state = {\n            isBelowBreakpoint: false,\n            breakpointRef: undefined\n        };\n    }\n    getBreakpointRef() {\n        const { breakpointReference } = this.props;\n        if (breakpointReference.current) {\n            return breakpointReference.current;\n        }\n        else if (typeof breakpointReference === 'function') {\n            return breakpointReference();\n        }\n    }\n    componentDidMount() {\n        const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n        this.setState({ breakpointRef: reference });\n        this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n        if (prevState.breakpointRef !== reference) {\n            // To remove any previous observer/event listener from componentDidMount before adding a new one\n            this.observer();\n            this.setState({ breakpointRef: reference });\n            this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n            this.handleResize();\n        }\n    }\n    componentWillUnmount() {\n        this.observer();\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { className, breakpoint, children, breakpointReference } = _a, props = __rest(_a, [\"className\", \"breakpoint\", \"children\", \"breakpointReference\"]);\n        return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.overflowMenu, className) }),\n            React.createElement(OverflowMenuContext.Provider, { value: { isBelowBreakpoint: this.state.isBelowBreakpoint } }, children)));\n    }\n}\nOverflowMenu.displayName = 'OverflowMenu';\nOverflowMenu.contextType = OverflowMenuContext;\n//# sourceMappingURL=OverflowMenu.js.map"]},"metadata":{},"sourceType":"module"}