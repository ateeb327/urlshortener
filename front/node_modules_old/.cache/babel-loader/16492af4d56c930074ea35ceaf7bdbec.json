{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n/**\n * This component wraps any ReactNode and finds its ref\n * It has to be a class for findDOMNode to work\n * Ideally, all components used as triggers/toggles are either:\n * - class based components we can assign our own ref to\n * - functional components that have forwardRef implemented\n * However, there is no guarantee that is what will get passed in as trigger/toggle in the case of tooltips and popovers\n */\nexport class FindRefWrapper extends React.Component {\n  componentDidMount() {\n    // eslint-disable-next-line react/no-find-dom-node\n    const root = ReactDOM.findDOMNode(this);\n    this.props.onFoundRef(root);\n  }\n  render() {\n    return this.props.children || null;\n  }\n}\nFindRefWrapper.displayName = 'FindRefWrapper';","map":{"version":3,"sources":["../../../../src/helpers/Popper/FindRefWrapper.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAK,QAAQ,MAAM,WAAW;AAOrC;;;;;;;AAOG;AACH,OAAM,MAAO,cAAe,SAAQ,KAAK,CAAC,SAA8B,CAAA;EAEtE,iBAAiB,CAAA,EAAA;IACf;IACA,MAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC;EAC7B;EAEA,MAAM,CAAA,EAAA;IACJ,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI;EACpC;;AATO,cAAA,CAAA,WAAW,GAAG,gBAAgB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n/**\n * This component wraps any ReactNode and finds its ref\n * It has to be a class for findDOMNode to work\n * Ideally, all components used as triggers/toggles are either:\n * - class based components we can assign our own ref to\n * - functional components that have forwardRef implemented\n * However, there is no guarantee that is what will get passed in as trigger/toggle in the case of tooltips and popovers\n */\nexport class FindRefWrapper extends React.Component {\n    componentDidMount() {\n        // eslint-disable-next-line react/no-find-dom-node\n        const root = ReactDOM.findDOMNode(this);\n        this.props.onFoundRef(root);\n    }\n    render() {\n        return this.props.children || null;\n    }\n}\nFindRefWrapper.displayName = 'FindRefWrapper';\n//# sourceMappingURL=FindRefWrapper.js.map"]},"metadata":{},"sourceType":"module"}