{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nlet isResizing = null;\nlet newSize = 0;\nexport const DrawerPanelContent = _a => {\n  var {\n      className = '',\n      id,\n      children,\n      hasNoBorder = false,\n      isResizable = false,\n      onResize,\n      minSize,\n      defaultSize,\n      maxSize,\n      increment = 5,\n      resizeAriaLabel = 'Resize',\n      widths,\n      colorVariant = DrawerColorVariant.default\n    } = _a,\n    props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"widths\", \"colorVariant\"]);\n  const panel = React.useRef();\n  const splitterRef = React.useRef();\n  const [separatorValue, setSeparatorValue] = React.useState(0);\n  const {\n    position,\n    isExpanded,\n    isStatic,\n    onExpand,\n    drawerRef,\n    drawerContentRef,\n    isInline\n  } = React.useContext(DrawerContext);\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth = 0;\n  let panelRect;\n  let right;\n  let left;\n  let bottom;\n  let setInitialVals = true;\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n  const calcValueNow = () => {\n    let splitterPos;\n    let drawerSize;\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n    const newSplitterPos = splitterPos / drawerSize * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n  const handleTouchStart = e => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n  const handleMousedown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n  const handleMouseMove = e => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n  const handleTouchMove = e => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n  const handleControlMove = (e, controlPosition) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n    const mousePos = controlPosition;\n    let newSize = 0;\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n  const handleTouchEnd = e => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n  const handleKeys = e => {\n    const key = e.key;\n    if (key !== 'Escape' && key !== 'Enter' && key !== 'ArrowUp' && key !== 'ArrowDown' && key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      if (isResizing) {\n        e.preventDefault();\n      }\n      return;\n    }\n    e.preventDefault();\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n    const panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    let delta = 0;\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n    newSize = newSize + delta;\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const boundaryCssVars = {};\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n  return React.createElement(GenerateId, {\n    prefix: \"pf-drawer-panel-\"\n  }, panelId => React.createElement(\"div\", Object.assign({\n    id: id || panelId,\n    className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className),\n    ref: panel,\n    onTransitionEnd: ev => {\n      if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n        onExpand();\n      }\n      setIsExpandedInternal(!hidden);\n    },\n    hidden: hidden\n  }, (defaultSize || minSize || maxSize) && {\n    style: boundaryCssVars\n  }, props), isExpandedInternal && React.createElement(React.Fragment, null, isResizable && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical),\n    role: \"separator\",\n    tabIndex: 0,\n    \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical',\n    \"aria-label\": resizeAriaLabel,\n    \"aria-valuenow\": separatorValue,\n    \"aria-valuemin\": 0,\n    \"aria-valuemax\": 100,\n    \"aria-controls\": id || panelId,\n    onMouseDown: handleMousedown,\n    onKeyDown: handleKeys,\n    onTouchStart: handleTouchStart,\n    ref: splitterRef\n  }, React.createElement(\"div\", {\n    className: css(styles.drawerSplitterHandle),\n    \"aria-hidden\": true\n  })), React.createElement(\"div\", {\n    className: css(styles.drawerPanelMain)\n  }, children)), !isResizable && children)));\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';","map":{"version":3,"sources":["../../../../src/components/Drawer/DrawerPanelContent.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nlet isResizing = null;\nlet newSize = 0;\nexport const DrawerPanelContent = (_a) => {\n    var { className = '', id, children, hasNoBorder = false, isResizable = false, onResize, minSize, defaultSize, maxSize, increment = 5, resizeAriaLabel = 'Resize', widths, colorVariant = DrawerColorVariant.default } = _a, props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"widths\", \"colorVariant\"]);\n    const panel = React.useRef();\n    const splitterRef = React.useRef();\n    const [separatorValue, setSeparatorValue] = React.useState(0);\n    const { position, isExpanded, isStatic, onExpand, drawerRef, drawerContentRef, isInline } = React.useContext(DrawerContext);\n    const hidden = isStatic ? false : !isExpanded;\n    const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n    let currWidth = 0;\n    let panelRect;\n    let right;\n    let left;\n    let bottom;\n    let setInitialVals = true;\n    React.useEffect(() => {\n        if (!isStatic && isExpanded) {\n            setIsExpandedInternal(isExpanded);\n        }\n    }, [isStatic, isExpanded]);\n    const calcValueNow = () => {\n        let splitterPos;\n        let drawerSize;\n        if (isInline && position === 'right') {\n            splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n            drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n        }\n        else if (isInline && position === 'left') {\n            splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n            drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n        }\n        else if (position === 'right') {\n            splitterPos =\n                drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n            drawerSize =\n                drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n        }\n        else if (position === 'left') {\n            splitterPos =\n                splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n            drawerSize =\n                drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n        }\n        else if (position === 'bottom') {\n            splitterPos =\n                drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n            drawerSize =\n                drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n        }\n        const newSplitterPos = (splitterPos / drawerSize) * 100;\n        return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n    };\n    const handleTouchStart = (e) => {\n        e.stopPropagation();\n        document.addEventListener('touchmove', callbackTouchMove, { passive: false });\n        document.addEventListener('touchend', callbackTouchEnd);\n        isResizing = true;\n    };\n    const handleMousedown = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        document.addEventListener('mousemove', callbackMouseMove);\n        document.addEventListener('mouseup', callbackMouseUp);\n        drawerRef.current.classList.add(css(styles.modifiers.resizing));\n        isResizing = true;\n        setInitialVals = true;\n    };\n    const handleMouseMove = (e) => {\n        const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n        handleControlMove(e, mousePos);\n    };\n    const handleTouchMove = (e) => {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n        handleControlMove(e, touchPos);\n    };\n    const handleControlMove = (e, controlPosition) => {\n        e.stopPropagation();\n        if (!isResizing) {\n            return;\n        }\n        if (setInitialVals) {\n            panelRect = panel.current.getBoundingClientRect();\n            right = panelRect.right;\n            left = panelRect.left;\n            bottom = panelRect.bottom;\n            setInitialVals = false;\n        }\n        const mousePos = controlPosition;\n        let newSize = 0;\n        if (position === 'right') {\n            newSize = right - mousePos;\n        }\n        else if (position === 'left') {\n            newSize = mousePos - left;\n        }\n        else {\n            newSize = bottom - mousePos;\n        }\n        if (position === 'bottom') {\n            panel.current.style.overflowAnchor = 'none';\n        }\n        panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n        currWidth = newSize;\n        setSeparatorValue(calcValueNow());\n    };\n    const handleMouseup = () => {\n        if (!isResizing) {\n            return;\n        }\n        drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n        isResizing = false;\n        onResize && onResize(currWidth, id);\n        setInitialVals = true;\n        document.removeEventListener('mousemove', callbackMouseMove);\n        document.removeEventListener('mouseup', callbackMouseUp);\n    };\n    const handleTouchEnd = (e) => {\n        e.stopPropagation();\n        if (!isResizing) {\n            return;\n        }\n        isResizing = false;\n        onResize && onResize(currWidth, id);\n        document.removeEventListener('touchmove', callbackTouchMove);\n        document.removeEventListener('touchend', callbackTouchEnd);\n    };\n    const callbackMouseMove = React.useCallback(handleMouseMove, []);\n    const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n    const callbackTouchMove = React.useCallback(handleTouchMove, []);\n    const callbackMouseUp = React.useCallback(handleMouseup, []);\n    const handleKeys = (e) => {\n        const key = e.key;\n        if (key !== 'Escape' &&\n            key !== 'Enter' &&\n            key !== 'ArrowUp' &&\n            key !== 'ArrowDown' &&\n            key !== 'ArrowLeft' &&\n            key !== 'ArrowRight') {\n            if (isResizing) {\n                e.preventDefault();\n            }\n            return;\n        }\n        e.preventDefault();\n        if (key === 'Escape' || key === 'Enter') {\n            onResize && onResize(currWidth, id);\n        }\n        const panelRect = panel.current.getBoundingClientRect();\n        newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n        let delta = 0;\n        if (key === 'ArrowRight') {\n            delta = position === 'left' ? increment : -increment;\n        }\n        else if (key === 'ArrowLeft') {\n            delta = position === 'left' ? -increment : increment;\n        }\n        else if (key === 'ArrowUp') {\n            delta = increment;\n        }\n        else if (key === 'ArrowDown') {\n            delta = -increment;\n        }\n        newSize = newSize + delta;\n        if (position === 'bottom') {\n            panel.current.style.overflowAnchor = 'none';\n        }\n        panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n        currWidth = newSize;\n        setSeparatorValue(calcValueNow());\n    };\n    const boundaryCssVars = {};\n    if (defaultSize) {\n        boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n    }\n    if (minSize) {\n        boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n    }\n    if (maxSize) {\n        boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n    }\n    return (React.createElement(GenerateId, { prefix: \"pf-drawer-panel-\" }, panelId => (React.createElement(\"div\", Object.assign({ id: id || panelId, className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className), ref: panel, onTransitionEnd: ev => {\n            if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n                onExpand();\n            }\n            setIsExpandedInternal(!hidden);\n        }, hidden: hidden }, ((defaultSize || minSize || maxSize) && {\n        style: boundaryCssVars\n    }), props), isExpandedInternal && (React.createElement(React.Fragment, null,\n        isResizable && (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical), role: \"separator\", tabIndex: 0, \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical', \"aria-label\": resizeAriaLabel, \"aria-valuenow\": separatorValue, \"aria-valuemin\": 0, \"aria-valuemax\": 100, \"aria-controls\": id || panelId, onMouseDown: handleMousedown, onKeyDown: handleKeys, onTouchStart: handleTouchStart, ref: splitterRef },\n                React.createElement(\"div\", { className: css(styles.drawerSplitterHandle), \"aria-hidden\": true })),\n            React.createElement(\"div\", { className: css(styles.drawerPanelMain) }, children))),\n        !isResizable && children))))));\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';\n//# sourceMappingURL=DrawerPanelContent.js.map"]},"metadata":{},"sourceType":"module"}