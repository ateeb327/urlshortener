{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesGrid from '@patternfly/react-styles/css/components/Table/table-grid';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { css } from '@patternfly/react-styles';\nimport { toCamel } from '../Table/utils/utils';\nimport { useOUIAProps, handleArrows, setTabIndex } from '@patternfly/react-core/dist/esm/helpers';\nimport { TableGridBreakpoint } from '../Table/TableTypes';\nexport const TableComposableContext = React.createContext({\n  registerSelectableRow: () => {}\n});\nconst TableComposableBase = _a => {\n  var _b, _c;\n  var {\n      children,\n      className,\n      variant,\n      borders = true,\n      isStickyHeader = false,\n      gridBreakPoint = TableGridBreakpoint.gridMd,\n      'aria-label': ariaLabel,\n      role = 'grid',\n      innerRef,\n      ouiaId,\n      ouiaSafe = true,\n      isTreeTable = false,\n      isNested = false,\n      isStriped = false,\n      isExpandable = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      nestedHeaderColumnSpans,\n      hasSelectableRowCaption,\n      selectableRowCaptionText\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"variant\", \"borders\", \"isStickyHeader\", \"gridBreakPoint\", 'aria-label', \"role\", \"innerRef\", \"ouiaId\", \"ouiaSafe\", \"isTreeTable\", \"isNested\", \"isStriped\", \"isExpandable\", \"nestedHeaderColumnSpans\", \"hasSelectableRowCaption\", \"selectableRowCaptionText\"]);\n  const ref = React.useRef(null);\n  const tableRef = innerRef || ref;\n  const [hasSelectableRows, setHasSelectableRows] = React.useState(false);\n  const [tableCaption, setTableCaption] = React.useState();\n  React.useEffect(() => {\n    document.addEventListener('keydown', handleKeys);\n    // sets up roving tab-index to tree tables only\n    if (tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) {\n      const tbody = tableRef.current.querySelector('tbody');\n      tbody && setTabIndex(Array.from(tbody.querySelectorAll('button, a, input')));\n    }\n    return function cleanup() {\n      document.removeEventListener('keydown', handleKeys);\n    };\n  }, [tableRef, tableRef.current]);\n  React.useEffect(() => {\n    if (selectableRowCaptionText) {\n      setTableCaption(React.createElement(\"caption\", null, selectableRowCaptionText, React.createElement(\"div\", {\n        className: \"pf-screen-reader\"\n      }, \"This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.\")));\n    } else {\n      setTableCaption(React.createElement(\"caption\", {\n        className: \"pf-screen-reader\"\n      }, \"This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.\"));\n    }\n  }, [selectableRowCaptionText]);\n  const ouiaProps = useOUIAProps('Table', ouiaId, ouiaSafe);\n  const grid = (_b = stylesGrid.modifiers) === null || _b === void 0 ? void 0 : _b[toCamel(gridBreakPoint || '').replace(/-?2xl/, '_2xl')];\n  const breakPointPrefix = `treeView${gridBreakPoint.charAt(0).toUpperCase() + gridBreakPoint.slice(1)}`;\n  const treeGrid = (_c = stylesTreeView.modifiers) === null || _c === void 0 ? void 0 : _c[toCamel(breakPointPrefix || '').replace(/-?2xl/, '_2xl')];\n  const handleKeys = event => {\n    if (isNested || !(tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) ||\n    // implements roving tab-index to tree tables only\n    tableRef && tableRef.current !== event.target.closest('.pf-c-table:not(.pf-m-nested)')) {\n      return;\n    }\n    const activeElement = document.activeElement;\n    const key = event.key;\n    const rows = Array.from(tableRef.current.querySelectorAll('tbody tr')).filter(el => !el.classList.contains('pf-m-disabled') && !el.hidden);\n    if (key === 'Space' || key === 'Enter') {\n      activeElement.click();\n      event.preventDefault();\n    }\n    const getFocusableElement = element => element.querySelectorAll('button:not(:disabled), input:not(:disabled), a:not(:disabled)')[0];\n    handleArrows(event, rows, element => element === activeElement.closest('tr'), getFocusableElement, ['button', 'input', 'a'], undefined, false, true, false);\n  };\n  const registerSelectableRow = () => {\n    !hasSelectableRows && setHasSelectableRows(true);\n  };\n  return React.createElement(TableComposableContext.Provider, {\n    value: {\n      registerSelectableRow\n    }\n  }, React.createElement(\"table\", Object.assign({\n    \"aria-label\": ariaLabel,\n    role: role,\n    className: css(className, styles.table, isTreeTable ? treeGrid : grid, styles.modifiers[variant], !borders && styles.modifiers.noBorderRows, isStickyHeader && styles.modifiers.stickyHeader, isTreeTable && stylesTreeView.modifiers.treeView, isStriped && styles.modifiers.striped, isExpandable && styles.modifiers.expandable, isNested && 'pf-m-nested'),\n    ref: tableRef\n  }, isTreeTable && {\n    role: 'treegrid'\n  }, ouiaProps, props), hasSelectableRowCaption && hasSelectableRows && tableCaption, children));\n};\nexport const TableComposable = React.forwardRef((props, ref) => React.createElement(TableComposableBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTableComposable.displayName = 'TableComposable';","map":{"version":3,"sources":["../../../../src/components/TableComposable/TableComposable.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesGrid from '@patternfly/react-styles/css/components/Table/table-grid';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { css } from '@patternfly/react-styles';\nimport { toCamel } from '../Table/utils/utils';\nimport { useOUIAProps, handleArrows, setTabIndex } from '@patternfly/react-core/dist/esm/helpers';\nimport { TableGridBreakpoint } from '../Table/TableTypes';\nexport const TableComposableContext = React.createContext({\n    registerSelectableRow: () => { }\n});\nconst TableComposableBase = (_a) => {\n    var _b, _c;\n    var { children, className, variant, borders = true, isStickyHeader = false, gridBreakPoint = TableGridBreakpoint.gridMd, 'aria-label': ariaLabel, role = 'grid', innerRef, ouiaId, ouiaSafe = true, isTreeTable = false, isNested = false, isStriped = false, isExpandable = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nestedHeaderColumnSpans, hasSelectableRowCaption, selectableRowCaptionText } = _a, props = __rest(_a, [\"children\", \"className\", \"variant\", \"borders\", \"isStickyHeader\", \"gridBreakPoint\", 'aria-label', \"role\", \"innerRef\", \"ouiaId\", \"ouiaSafe\", \"isTreeTable\", \"isNested\", \"isStriped\", \"isExpandable\", \"nestedHeaderColumnSpans\", \"hasSelectableRowCaption\", \"selectableRowCaptionText\"]);\n    const ref = React.useRef(null);\n    const tableRef = innerRef || ref;\n    const [hasSelectableRows, setHasSelectableRows] = React.useState(false);\n    const [tableCaption, setTableCaption] = React.useState();\n    React.useEffect(() => {\n        document.addEventListener('keydown', handleKeys);\n        // sets up roving tab-index to tree tables only\n        if (tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) {\n            const tbody = tableRef.current.querySelector('tbody');\n            tbody && setTabIndex(Array.from(tbody.querySelectorAll('button, a, input')));\n        }\n        return function cleanup() {\n            document.removeEventListener('keydown', handleKeys);\n        };\n    }, [tableRef, tableRef.current]);\n    React.useEffect(() => {\n        if (selectableRowCaptionText) {\n            setTableCaption(React.createElement(\"caption\", null,\n                selectableRowCaptionText,\n                React.createElement(\"div\", { className: \"pf-screen-reader\" }, \"This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.\")));\n        }\n        else {\n            setTableCaption(React.createElement(\"caption\", { className: \"pf-screen-reader\" }, \"This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.\"));\n        }\n    }, [selectableRowCaptionText]);\n    const ouiaProps = useOUIAProps('Table', ouiaId, ouiaSafe);\n    const grid = (_b = stylesGrid.modifiers) === null || _b === void 0 ? void 0 : _b[toCamel(gridBreakPoint || '').replace(/-?2xl/, '_2xl')];\n    const breakPointPrefix = `treeView${gridBreakPoint.charAt(0).toUpperCase() + gridBreakPoint.slice(1)}`;\n    const treeGrid = (_c = stylesTreeView.modifiers) === null || _c === void 0 ? void 0 : _c[toCamel(breakPointPrefix || '').replace(/-?2xl/, '_2xl')];\n    const handleKeys = (event) => {\n        if (isNested ||\n            !(tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) || // implements roving tab-index to tree tables only\n            (tableRef && tableRef.current !== event.target.closest('.pf-c-table:not(.pf-m-nested)'))) {\n            return;\n        }\n        const activeElement = document.activeElement;\n        const key = event.key;\n        const rows = Array.from(tableRef.current.querySelectorAll('tbody tr')).filter(el => !el.classList.contains('pf-m-disabled') && !el.hidden);\n        if (key === 'Space' || key === 'Enter') {\n            activeElement.click();\n            event.preventDefault();\n        }\n        const getFocusableElement = (element) => element.querySelectorAll('button:not(:disabled), input:not(:disabled), a:not(:disabled)')[0];\n        handleArrows(event, rows, (element) => element === activeElement.closest('tr'), getFocusableElement, ['button', 'input', 'a'], undefined, false, true, false);\n    };\n    const registerSelectableRow = () => {\n        !hasSelectableRows && setHasSelectableRows(true);\n    };\n    return (React.createElement(TableComposableContext.Provider, { value: { registerSelectableRow } },\n        React.createElement(\"table\", Object.assign({ \"aria-label\": ariaLabel, role: role, className: css(className, styles.table, isTreeTable ? treeGrid : grid, styles.modifiers[variant], !borders && styles.modifiers.noBorderRows, isStickyHeader && styles.modifiers.stickyHeader, isTreeTable && stylesTreeView.modifiers.treeView, isStriped && styles.modifiers.striped, isExpandable && styles.modifiers.expandable, isNested && 'pf-m-nested'), ref: tableRef }, (isTreeTable && { role: 'treegrid' }), ouiaProps, props),\n            hasSelectableRowCaption && hasSelectableRows && tableCaption,\n            children)));\n};\nexport const TableComposable = React.forwardRef((props, ref) => (React.createElement(TableComposableBase, Object.assign({}, props, { innerRef: ref }))));\nTableComposable.displayName = 'TableComposable';\n//# sourceMappingURL=TableComposable.js.map"]},"metadata":{},"sourceType":"module"}