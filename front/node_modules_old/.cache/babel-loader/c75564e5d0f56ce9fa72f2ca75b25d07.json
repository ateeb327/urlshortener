{"ast":null,"code":"import { modifierPhases } from '../enums';\n// source: https://stackoverflow.com/questions/49875255\n/**\n * @param modifiers\n */\nfunction order(modifiers) {\n  const map = new Map();\n  const visited = new Set();\n  const result = [];\n  modifiers.forEach(modifier => {\n    map.set(modifier.name, modifier);\n  });\n  // On visiting object, check for its dependencies and visit them recursively\n  /**\n   * @param modifier\n   */\n  function sort(modifier) {\n    visited.add(modifier.name);\n    const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n    requires.forEach(dep => {\n      if (!visited.has(dep)) {\n        const depModifier = map.get(dep);\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n  modifiers.forEach(modifier => {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n/**\n * @param modifiers\n */\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  const orderedModifiers = order(modifiers);\n  // order based on phase\n  return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)), []);\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.ts"],"names":[],"mappings":"AAEA,SAAS,cAAc,QAAQ,UAAU;AAEzC;AACA;;AAEG;AACH,SAAS,KAAK,CAAC,SAAS,EAAA;EACtB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAA,CAAE;EACrB,MAAM,OAAO,GAAG,IAAI,GAAG,CAAA,CAAE;EACzB,MAAM,MAAM,GAAG,EAAE;EAEjB,SAAS,CAAC,OAAO,CAAC,QAAQ,IAAG;IAC3B,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC;EAClC,CAAC,CAAC;EAEF;EACA;;AAEG;EACH,SAAS,IAAI,CAAC,QAA4B,EAAA;IACxC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;IAE1B,MAAM,QAAQ,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,IAAI,QAAQ,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC;IAErF,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAG;MACrB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACrB,MAAM,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QAEhC,IAAI,WAAW,EAAE;UACf,IAAI,CAAC,WAAW,CAAC;QAClB;MACF;IACH,CAAC,CAAC;IAEF,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;EACvB;EAEA,SAAS,CAAC,OAAO,CAAC,QAAQ,IAAG;IAC3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;MAC/B;MACA,IAAI,CAAC,QAAQ,CAAC;IACf;EACH,CAAC,CAAC;EAEF,OAAO,MAAM;AACf;AAEA;;AAEG;AACH,eAAc,SAAU,cAAc,CAAC,SAA+B,EAAA;EACpE;EACA,MAAM,gBAAgB,GAAG,KAAK,CAAC,SAAS,CAAC;EAEzC;EACA,OAAO,cAAc,CAAC,MAAM,CAC1B,CAAC,GAAG,EAAE,KAAK,KAAK,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,EACzF,EAAE,CACH;AACH","sourceRoot":"","sourcesContent":["import { modifierPhases } from '../enums';\n// source: https://stackoverflow.com/questions/49875255\n/**\n * @param modifiers\n */\nfunction order(modifiers) {\n    const map = new Map();\n    const visited = new Set();\n    const result = [];\n    modifiers.forEach(modifier => {\n        map.set(modifier.name, modifier);\n    });\n    // On visiting object, check for its dependencies and visit them recursively\n    /**\n     * @param modifier\n     */\n    function sort(modifier) {\n        visited.add(modifier.name);\n        const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n        requires.forEach(dep => {\n            if (!visited.has(dep)) {\n                const depModifier = map.get(dep);\n                if (depModifier) {\n                    sort(depModifier);\n                }\n            }\n        });\n        result.push(modifier);\n    }\n    modifiers.forEach(modifier => {\n        if (!visited.has(modifier.name)) {\n            // check for visited object\n            sort(modifier);\n        }\n    });\n    return result;\n}\n/**\n * @param modifiers\n */\nexport default function orderModifiers(modifiers) {\n    // order based on dependencies\n    const orderedModifiers = order(modifiers);\n    // order based on phase\n    return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)), []);\n}\n//# sourceMappingURL=orderModifiers.js.map"]},"metadata":{},"sourceType":"module"}