{"ast":null,"code":"import * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KeyTypes } from '../../helpers';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\nexport const AdvancedSearchMenu = ({\n  className,\n  parentRef,\n  parentInputRef,\n  value = '',\n  attributes = [],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  getAttrValueMap,\n  onChange,\n  onSearch,\n  onClear,\n  resetButtonLabel = 'Reset',\n  submitSearchButtonLabel = 'Search',\n  isSearchMenuOpen,\n  onToggleAdvancedMenu\n}) => {\n  const firstAttrRef = React.useRef(null);\n  const [putFocusBackOnInput, setPutFocusBackOnInput] = React.useState(false);\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(() => {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n  const onDocClick = event => {\n    const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n  const onEscPress = event => {\n    if (isSearchMenuOpen && event.key === KeyTypes.Escape && parentRef && parentRef.current.contains(event.target)) {\n      onToggleAdvancedMenu(event);\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n  const onSearchHandler = event => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n  const handleValueChange = (attribute, newValue, event) => {\n    const newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    let updatedValue = '';\n    Object.entries(newMap).forEach(([k, v]) => {\n      if (v.trim() !== '') {\n        /* Wrap the value in quotes if it contains spaces */\n        const quoteWrappedValue = v.includes(' ') ? `'${v.replace(/(^'|'$)/g, '')}'` : v;\n        if (k !== 'haswords') {\n          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;\n        } else {\n          updatedValue = `${updatedValue} ${quoteWrappedValue}`;\n        }\n      }\n    });\n    if (onChange) {\n      onChange(event, updatedValue.replace(/^\\s+/g, ''));\n    }\n  };\n  const getValue = attribute => {\n    const map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n  const buildFormGroups = () => {\n    const formGroups = [];\n    attributes.forEach((attribute, index) => {\n      const display = typeof attribute === 'string' ? attribute : attribute.display;\n      const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n      if (index === 0) {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: `${queryAttr}_${index}`,\n          key: `${attribute}_${index}`\n        }, React.createElement(TextInput, {\n          ref: firstAttrRef,\n          type: \"text\",\n          id: `${queryAttr}_${index}`,\n          value: getValue(queryAttr),\n          onChange: (value, evt) => handleValueChange(queryAttr, value, evt)\n        })));\n      } else {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: `${queryAttr}_${index}`,\n          key: `${attribute}_${index}`\n        }, React.createElement(TextInput, {\n          type: \"text\",\n          id: `${queryAttr}_${index}`,\n          value: getValue(queryAttr),\n          onChange: (value, evt) => handleValueChange(queryAttr, value, evt)\n        })));\n      }\n    });\n    formGroups.push(React.createElement(GenerateId, {\n      key: 'hasWords'\n    }, randomId => React.createElement(FormGroup, {\n      label: hasWordsAttrLabel,\n      fieldId: randomId\n    }, React.createElement(TextInput, {\n      type: \"text\",\n      id: randomId,\n      value: getValue('haswords'),\n      onChange: (value, evt) => handleValueChange('haswords', value, evt)\n    }))));\n    return formGroups;\n  };\n  return isSearchMenuOpen ? React.createElement(Panel, {\n    variant: \"raised\",\n    className: css(className)\n  }, React.createElement(PanelMain, null, React.createElement(PanelMainBody, null, React.createElement(Form, null, buildFormGroups(), formAdditionalItems ? formAdditionalItems : null, React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onSearchHandler,\n    isDisabled: !value\n  }, submitSearchButtonLabel), !!onClear && React.createElement(Button, {\n    variant: \"link\",\n    type: \"reset\",\n    onClick: onClear\n  }, resetButtonLabel)))))) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';","map":{"version":3,"sources":["../../../../src/components/SearchInput/AdvancedSearchMenu.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KeyTypes } from '../../helpers';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\nexport const AdvancedSearchMenu = ({ className, parentRef, parentInputRef, value = '', attributes = [], formAdditionalItems, hasWordsAttrLabel = 'Has words', advancedSearchDelimiter, getAttrValueMap, onChange, onSearch, onClear, resetButtonLabel = 'Reset', submitSearchButtonLabel = 'Search', isSearchMenuOpen, onToggleAdvancedMenu }) => {\n    const firstAttrRef = React.useRef(null);\n    const [putFocusBackOnInput, setPutFocusBackOnInput] = React.useState(false);\n    React.useEffect(() => {\n        if (attributes.length > 0 && !advancedSearchDelimiter) {\n            // eslint-disable-next-line no-console\n            console.error('AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n        }\n    });\n    React.useEffect(() => {\n        if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n            firstAttrRef.current.focus();\n            setPutFocusBackOnInput(true);\n        }\n        else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n            parentInputRef.current.focus();\n        }\n    }, [isSearchMenuOpen]);\n    React.useEffect(() => {\n        document.addEventListener('mousedown', onDocClick);\n        document.addEventListener('touchstart', onDocClick);\n        document.addEventListener('keydown', onEscPress);\n        return function cleanup() {\n            document.removeEventListener('mousedown', onDocClick);\n            document.removeEventListener('touchstart', onDocClick);\n            document.removeEventListener('keydown', onEscPress);\n        };\n    });\n    const onDocClick = (event) => {\n        const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);\n        if (isSearchMenuOpen && !clickedWithinSearchInput) {\n            onToggleAdvancedMenu(event);\n        }\n    };\n    const onEscPress = (event) => {\n        if (isSearchMenuOpen &&\n            event.key === KeyTypes.Escape &&\n            parentRef &&\n            parentRef.current.contains(event.target)) {\n            onToggleAdvancedMenu(event);\n            if (parentInputRef) {\n                parentInputRef.current.focus();\n            }\n        }\n    };\n    const onSearchHandler = (event) => {\n        event.preventDefault();\n        if (onSearch) {\n            onSearch(event, value, getAttrValueMap());\n        }\n        if (isSearchMenuOpen) {\n            onToggleAdvancedMenu(event);\n        }\n    };\n    const handleValueChange = (attribute, newValue, event) => {\n        const newMap = getAttrValueMap();\n        newMap[attribute] = newValue;\n        let updatedValue = '';\n        Object.entries(newMap).forEach(([k, v]) => {\n            if (v.trim() !== '') {\n                /* Wrap the value in quotes if it contains spaces */\n                const quoteWrappedValue = v.includes(' ') ? `'${v.replace(/(^'|'$)/g, '')}'` : v;\n                if (k !== 'haswords') {\n                    updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;\n                }\n                else {\n                    updatedValue = `${updatedValue} ${quoteWrappedValue}`;\n                }\n            }\n        });\n        if (onChange) {\n            onChange(event, updatedValue.replace(/^\\s+/g, ''));\n        }\n    };\n    const getValue = (attribute) => {\n        const map = getAttrValueMap();\n        return map.hasOwnProperty(attribute) ? map[attribute] : '';\n    };\n    const buildFormGroups = () => {\n        const formGroups = [];\n        attributes.forEach((attribute, index) => {\n            const display = typeof attribute === 'string' ? attribute : attribute.display;\n            const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n            if (index === 0) {\n                formGroups.push(React.createElement(FormGroup, { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },\n                    React.createElement(TextInput, { ref: firstAttrRef, type: \"text\", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (value, evt) => handleValueChange(queryAttr, value, evt) })));\n            }\n            else {\n                formGroups.push(React.createElement(FormGroup, { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },\n                    React.createElement(TextInput, { type: \"text\", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (value, evt) => handleValueChange(queryAttr, value, evt) })));\n            }\n        });\n        formGroups.push(React.createElement(GenerateId, { key: 'hasWords' }, randomId => (React.createElement(FormGroup, { label: hasWordsAttrLabel, fieldId: randomId },\n            React.createElement(TextInput, { type: \"text\", id: randomId, value: getValue('haswords'), onChange: (value, evt) => handleValueChange('haswords', value, evt) })))));\n        return formGroups;\n    };\n    return isSearchMenuOpen ? (React.createElement(Panel, { variant: \"raised\", className: css(className) },\n        React.createElement(PanelMain, null,\n            React.createElement(PanelMainBody, null,\n                React.createElement(Form, null,\n                    buildFormGroups(),\n                    formAdditionalItems ? formAdditionalItems : null,\n                    React.createElement(ActionGroup, null,\n                        React.createElement(Button, { variant: \"primary\", type: \"submit\", onClick: onSearchHandler, isDisabled: !value }, submitSearchButtonLabel),\n                        !!onClear && (React.createElement(Button, { variant: \"link\", type: \"reset\", onClick: onClear }, resetButtonLabel)))))))) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';\n//# sourceMappingURL=AdvancedSearchMenu.js.map"]},"metadata":{},"sourceType":"module"}