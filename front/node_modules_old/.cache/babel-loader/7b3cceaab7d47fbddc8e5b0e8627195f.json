{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = _a => {\n  var {\n      data,\n      isNested = false,\n      hasChecks = false,\n      hasBadges = false,\n      hasGuides = false,\n      hasSelectableNodes = false,\n      variant = 'default',\n      defaultAllExpanded = false,\n      allExpanded,\n      icon,\n      expandedIcon,\n      parentItem,\n      onSelect,\n      onCheck,\n      toolbar,\n      activeItems,\n      compareItems = (item, itemToCheck) => item.id === itemToCheck.id,\n      className,\n      useMemo\n    } = _a,\n    props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n  const treeViewList = React.createElement(TreeViewList, {\n    isNested: isNested,\n    toolbar: toolbar\n  }, data.map(item => {\n    var _a, _b;\n    return React.createElement(TreeViewListItem, Object.assign({\n      key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()),\n      name: item.name,\n      title: item.title,\n      id: item.id,\n      isExpanded: allExpanded,\n      isSelectable: hasSelectableNodes,\n      defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n      onSelect: onSelect,\n      onCheck: onCheck,\n      hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks,\n      checkProps: item.checkProps,\n      hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n      customBadgeContent: item.customBadgeContent,\n      badgeProps: item.badgeProps,\n      activeItems: activeItems,\n      parentItem: parentItem,\n      itemData: item,\n      icon: item.icon !== undefined ? item.icon : icon,\n      expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon,\n      action: item.action,\n      compareItems: compareItems,\n      isCompact: variant === 'compact' || variant === 'compactNoBackground',\n      useMemo: useMemo\n    }, item.children && {\n      children: React.createElement(TreeView, {\n        data: item.children,\n        isNested: true,\n        parentItem: item,\n        hasChecks: hasChecks,\n        hasBadges: hasBadges,\n        hasGuides: hasGuides,\n        hasSelectableNodes: hasSelectableNodes,\n        variant: variant,\n        allExpanded: allExpanded,\n        defaultAllExpanded: defaultAllExpanded,\n        onSelect: onSelect,\n        onCheck: onCheck,\n        activeItems: activeItems,\n        icon: icon,\n        expandedIcon: expandedIcon\n      })\n    }));\n  }));\n  return React.createElement(React.Fragment, null, parentItem ? treeViewList : React.createElement(TreeViewRoot, Object.assign({\n    hasSelectableNodes: hasSelectableNodes,\n    hasChecks: hasChecks,\n    hasGuides: hasGuides,\n    variant: variant,\n    className: className\n  }, props), treeViewList));\n};\nTreeView.displayName = 'TreeView';","map":{"version":3,"sources":["../../../../src/components/TreeView/TreeView.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = (_a) => {\n    var { data, isNested = false, hasChecks = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = 'default', defaultAllExpanded = false, allExpanded, icon, expandedIcon, parentItem, onSelect, onCheck, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo } = _a, props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n    const treeViewList = (React.createElement(TreeViewList, { isNested: isNested, toolbar: toolbar }, data.map(item => {\n        var _a, _b;\n        return (React.createElement(TreeViewListItem, Object.assign({ key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems: activeItems, parentItem: parentItem, itemData: item, icon: item.icon !== undefined ? item.icon : icon, expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon, action: item.action, compareItems: compareItems, isCompact: variant === 'compact' || variant === 'compactNoBackground', useMemo: useMemo }, (item.children && {\n            children: (React.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasChecks: hasChecks, hasBadges: hasBadges, hasGuides: hasGuides, hasSelectableNodes: hasSelectableNodes, variant: variant, allExpanded: allExpanded, defaultAllExpanded: defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, activeItems: activeItems, icon: icon, expandedIcon: expandedIcon }))\n        }))));\n    })));\n    return (React.createElement(React.Fragment, null, parentItem ? (treeViewList) : (React.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes: hasSelectableNodes, hasChecks: hasChecks, hasGuides: hasGuides, variant: variant, className: className }, props), treeViewList))));\n};\nTreeView.displayName = 'TreeView';\n//# sourceMappingURL=TreeView.js.map"]},"metadata":{},"sourceType":"module"}