{"ast":null,"code":"import { __rest } from \"tslib\";\n/**\n * header.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { ProviderContext } from './provider';\nimport { HeaderRow } from './header-row';\nclass BaseHeader extends React.Component {\n  render() {\n    const _a = this.props,\n      {\n        children,\n        headerRows,\n        onRow,\n        renderers,\n        columns\n      } = _a,\n      props = __rest(_a, [\"children\", \"headerRows\", \"onRow\", \"renderers\", \"columns\"]);\n    // If headerRows aren't passed, default to bodyColumns as header rows\n    return React.createElement(renderers.header.wrapper, props, [(headerRows || [columns]).map((rowData, rowIndex) => React.createElement(HeaderRow, {\n      key: `${rowIndex}-header-row`,\n      renderers: renderers.header,\n      onRow,\n      rowData,\n      rowIndex\n    }))].concat(children));\n  }\n}\nexport const Header = props => React.createElement(ProviderContext.Consumer, null, ({\n  columns,\n  renderers\n}) => React.createElement(BaseHeader, Object.assign({\n  columns: columns,\n  renderers: renderers\n}, props)));","map":{"version":3,"sources":["../../../../../src/components/Table/base/header.tsx"],"names":[],"mappings":";AAAA;;;;;AAKG;AACH,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B,SAAS,eAAe,QAAQ,YAAY;AAC5C,SAAS,SAAS,QAAQ,cAAc;AAWxC,MAAM,UAAW,SAAQ,KAAK,CAAC,SAA0B,CAAA;EACvD,MAAM,CAAA,EAAA;IACJ,MAAM,EAAA,GAAgE,IAAI,CAAC,KAAK;MAA1E;QAAE,QAAQ;QAAE,UAAU;QAAE,KAAK;QAAE,SAAS;QAAE;MAAO,CAAA,GAAA,EAAyB;MAApB,KAAK,GAAA,MAAA,CAAA,EAAA,EAA3D,CAAA,UAAA,EAAA,YAAA,EAAA,OAAA,EAAA,WAAA,EAAA,SAAA,CAA6D,CAAa;IAEhF;IACA,OAAO,KAAK,CAAC,aAAa,CACxB,SAAS,CAAC,MAAM,CAAC,OAA4B,EAC7C,KAAK,EACL,CACE,CAAC,UAAU,IAAK,CAAC,OAAO,CAAiB,EAAE,GAAG,CAAC,CAAC,OAAO,EAAE,QAAQ,KAC/D,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE;MAC7B,GAAG,EAAE,GAAG,QAAQ,aAAa;MAC7B,SAAS,EAAE,SAAS,CAAC,MAAM;MAC3B,KAAK;MACL,OAAO;MACP;KACD,CAAC,CACH,CACF,CAAC,MAAM,CAAC,QAAe,CAAC,CAC1B;EACH;AACD;AAED,OAAO,MAAM,MAAM,GAAI,KAAkB,IACvC,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAQ,EAAA,IAAA,EACtB,CAAC;EAAE,OAAO;EAAE;AAAS,CAAE,KAAK,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA,MAAA,CAAA,MAAA,CAAA;EAAC,OAAO,EAAE,OAAO;EAAE,SAAS,EAAE;AAAS,CAAA,EAAM,KAAK,CAAA,CAAI,CAEjG","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\n/**\n * header.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { ProviderContext } from './provider';\nimport { HeaderRow } from './header-row';\nclass BaseHeader extends React.Component {\n    render() {\n        const _a = this.props, { children, headerRows, onRow, renderers, columns } = _a, props = __rest(_a, [\"children\", \"headerRows\", \"onRow\", \"renderers\", \"columns\"]);\n        // If headerRows aren't passed, default to bodyColumns as header rows\n        return React.createElement(renderers.header.wrapper, props, [\n            (headerRows || [columns]).map((rowData, rowIndex) => React.createElement(HeaderRow, {\n                key: `${rowIndex}-header-row`,\n                renderers: renderers.header,\n                onRow,\n                rowData,\n                rowIndex\n            }))\n        ].concat(children));\n    }\n}\nexport const Header = (props) => (React.createElement(ProviderContext.Consumer, null, ({ columns, renderers }) => React.createElement(BaseHeader, Object.assign({ columns: columns, renderers: renderers }, props))));\n//# sourceMappingURL=header.js.map"]},"metadata":{},"sourceType":"module"}