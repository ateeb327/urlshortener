{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util';\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children, res) => {\n  React.Children.forEach(children, child => {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)));\n        } else {\n          res.push(document.querySelector(scrollNode));\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\nfunction isResponsive(jumpLinks) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(cssToggleDisplayVar.name).includes('block');\n}\nexport const JumpLinks = _a => {\n  var {\n      isCentered,\n      isVertical,\n      children,\n      label,\n      'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n      scrollableSelector,\n      activeIndex: activeIndexProp = 0,\n      offset = 0,\n      expandable,\n      isExpanded: isExpandedProp = false,\n      alwaysShowLabel = true,\n      toggleAriaLabel = 'Toggle jump links',\n      className\n    } = _a,\n    props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n  // Boolean to disable scroll listener from overriding active state of clicked jumplink\n  const isLinkClicked = React.useRef(false);\n  // Allow expanding to be controlled for a niche use case\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef();\n  let scrollableElement;\n  const scrollSpy = React.useCallback(() => {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(() => {\n      let newScrollItems = scrollItems;\n      // Items might have rendered after this component. Do a quick refresh.\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n      const scrollElements = newScrollItems.map((e, index) => ({\n        y: e ? e.offsetTop : null,\n        index\n      })).filter(({\n        y\n      }) => y !== null).sort((e1, e2) => e2.y - e1.y);\n      for (const {\n        y,\n        index\n      } of scrollElements) {\n        if (scrollPosition >= y) {\n          return setActiveIndex(index);\n        }\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n  React.useEffect(() => {\n    scrollableElement = document.querySelector(scrollableSelector);\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    scrollableElement.addEventListener('scroll', scrollSpy);\n    return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n  }, [scrollableSelector, scrollSpy]);\n  React.useEffect(() => {\n    scrollSpy();\n  }, []);\n  let jumpLinkIndex = 0;\n  const cloneChildren = children => !hasScrollSpy ? children : React.Children.map(children, child => {\n    if (child.type === JumpLinksItem) {\n      const {\n        onClick: onClickProp,\n        isActive: isActiveProp\n      } = child.props;\n      const itemIndex = jumpLinkIndex++;\n      const scrollItem = scrollItems[itemIndex];\n      return React.cloneElement(child, {\n        onClick(ev) {\n          isLinkClicked.current = true;\n          // Items might have rendered after this component. Do a quick refresh.\n          let newScrollItems;\n          if (!scrollItem) {\n            newScrollItems = getScrollItems(children, []);\n            setScrollItems(newScrollItems);\n          }\n          const newScrollItem = scrollItem || newScrollItems[itemIndex];\n          if (newScrollItem) {\n            // we have to support scrolling to an offset due to sticky sidebar\n            const scrollableElement = document.querySelector(scrollableSelector);\n            if (scrollableElement instanceof HTMLElement) {\n              if (isResponsive(navRef.current)) {\n                // Remove class immediately so we can get collapsed height\n                if (navRef.current) {\n                  navRef.current.classList.remove(styles.modifiers.expanded);\n                }\n                let stickyParent = navRef.current && navRef.current.parentElement;\n                while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                  stickyParent = stickyParent.parentElement;\n                }\n                setIsExpanded(false);\n                if (stickyParent) {\n                  offset += stickyParent.scrollHeight;\n                }\n              }\n              scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n            }\n            newScrollItem.focus();\n            ev.preventDefault();\n            setActiveIndex(itemIndex);\n          }\n          if (onClickProp) {\n            onClickProp(ev);\n          }\n        },\n        isActive: isActiveProp || activeIndex === itemIndex,\n        children: cloneChildren(child.props.children)\n      });\n    } else if (child.type === React.Fragment) {\n      return cloneChildren(child.props.children);\n    } else if (child.type === JumpLinksList) {\n      return React.cloneElement(child, {\n        children: cloneChildren(child.props.children)\n      });\n    }\n    return child;\n  });\n  return React.createElement(\"nav\", Object.assign({\n    className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className),\n    \"aria-label\": ariaLabel,\n    ref: navRef\n  }, props), React.createElement(\"div\", {\n    className: styles.jumpLinksMain\n  }, React.createElement(\"div\", {\n    className: css('pf-c-jump-links__header')\n  }, expandable && React.createElement(\"div\", {\n    className: styles.jumpLinksToggle\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    onClick: () => setIsExpanded(!isExpanded),\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"span\", {\n    className: styles.jumpLinksToggleIcon\n  }, React.createElement(AngleRightIcon, null)), label && React.createElement(\"span\", {\n    className: css(styles.jumpLinksToggleText)\n  }, \" \", label, \" \"))), label && alwaysShowLabel && React.createElement(\"div\", {\n    className: css(styles.jumpLinksLabel)\n  }, label)), React.createElement(\"ul\", {\n    className: styles.jumpLinksList\n  }, cloneChildren(children))));\n};\nJumpLinks.displayName = 'JumpLinks';","map":{"version":3,"sources":["../../../../src/components/JumpLinks/JumpLinks.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util';\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children, res) => {\n    React.Children.forEach(children, (child) => {\n        if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n            const scrollNode = child.props.node || child.props.href;\n            if (typeof scrollNode === 'string') {\n                if (scrollNode.startsWith('#')) {\n                    // Allow spaces and other special characters as `id`s to be nicer to consumers\n                    // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n                    res.push(document.getElementById(scrollNode.substr(1)));\n                }\n                else {\n                    res.push(document.querySelector(scrollNode));\n                }\n            }\n            else if (scrollNode instanceof HTMLElement) {\n                res.push(scrollNode);\n            }\n        }\n        if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n            getScrollItems(child.props.children, res);\n        }\n    });\n    return res;\n};\nfunction isResponsive(jumpLinks) {\n    // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n    return (jumpLinks &&\n        getComputedStyle(jumpLinks)\n            .getPropertyValue(cssToggleDisplayVar.name)\n            .includes('block'));\n}\nexport const JumpLinks = (_a) => {\n    var { isCentered, isVertical, children, label, 'aria-label': ariaLabel = typeof label === 'string' ? label : null, scrollableSelector, activeIndex: activeIndexProp = 0, offset = 0, expandable, isExpanded: isExpandedProp = false, alwaysShowLabel = true, toggleAriaLabel = 'Toggle jump links', className } = _a, props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n    const hasScrollSpy = Boolean(scrollableSelector);\n    const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n    const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n    const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n    // Boolean to disable scroll listener from overriding active state of clicked jumplink\n    const isLinkClicked = React.useRef(false);\n    // Allow expanding to be controlled for a niche use case\n    React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n    const navRef = React.useRef();\n    let scrollableElement;\n    const scrollSpy = React.useCallback(() => {\n        if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n            return;\n        }\n        if (isLinkClicked.current) {\n            isLinkClicked.current = false;\n            return;\n        }\n        const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n        window.requestAnimationFrame(() => {\n            let newScrollItems = scrollItems;\n            // Items might have rendered after this component. Do a quick refresh.\n            if (!newScrollItems[0] || newScrollItems.includes(null)) {\n                newScrollItems = getScrollItems(children, []);\n                setScrollItems(newScrollItems);\n            }\n            const scrollElements = newScrollItems\n                .map((e, index) => ({\n                y: e ? e.offsetTop : null,\n                index\n            }))\n                .filter(({ y }) => y !== null)\n                .sort((e1, e2) => e2.y - e1.y);\n            for (const { y, index } of scrollElements) {\n                if (scrollPosition >= y) {\n                    return setActiveIndex(index);\n                }\n            }\n        });\n    }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n    React.useEffect(() => {\n        scrollableElement = document.querySelector(scrollableSelector);\n        if (!(scrollableElement instanceof HTMLElement)) {\n            return;\n        }\n        scrollableElement.addEventListener('scroll', scrollSpy);\n        return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n    }, [scrollableSelector, scrollSpy]);\n    React.useEffect(() => {\n        scrollSpy();\n    }, []);\n    let jumpLinkIndex = 0;\n    const cloneChildren = (children) => !hasScrollSpy\n        ? children\n        : React.Children.map(children, (child) => {\n            if (child.type === JumpLinksItem) {\n                const { onClick: onClickProp, isActive: isActiveProp } = child.props;\n                const itemIndex = jumpLinkIndex++;\n                const scrollItem = scrollItems[itemIndex];\n                return React.cloneElement(child, {\n                    onClick(ev) {\n                        isLinkClicked.current = true;\n                        // Items might have rendered after this component. Do a quick refresh.\n                        let newScrollItems;\n                        if (!scrollItem) {\n                            newScrollItems = getScrollItems(children, []);\n                            setScrollItems(newScrollItems);\n                        }\n                        const newScrollItem = scrollItem || newScrollItems[itemIndex];\n                        if (newScrollItem) {\n                            // we have to support scrolling to an offset due to sticky sidebar\n                            const scrollableElement = document.querySelector(scrollableSelector);\n                            if (scrollableElement instanceof HTMLElement) {\n                                if (isResponsive(navRef.current)) {\n                                    // Remove class immediately so we can get collapsed height\n                                    if (navRef.current) {\n                                        navRef.current.classList.remove(styles.modifiers.expanded);\n                                    }\n                                    let stickyParent = navRef.current && navRef.current.parentElement;\n                                    while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                                        stickyParent = stickyParent.parentElement;\n                                    }\n                                    setIsExpanded(false);\n                                    if (stickyParent) {\n                                        offset += stickyParent.scrollHeight;\n                                    }\n                                }\n                                scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n                            }\n                            newScrollItem.focus();\n                            ev.preventDefault();\n                            setActiveIndex(itemIndex);\n                        }\n                        if (onClickProp) {\n                            onClickProp(ev);\n                        }\n                    },\n                    isActive: isActiveProp || activeIndex === itemIndex,\n                    children: cloneChildren(child.props.children)\n                });\n            }\n            else if (child.type === React.Fragment) {\n                return cloneChildren(child.props.children);\n            }\n            else if (child.type === JumpLinksList) {\n                return React.cloneElement(child, { children: cloneChildren(child.props.children) });\n            }\n            return child;\n        });\n    return (React.createElement(\"nav\", Object.assign({ className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className), \"aria-label\": ariaLabel, ref: navRef }, props),\n        React.createElement(\"div\", { className: styles.jumpLinksMain },\n            React.createElement(\"div\", { className: css('pf-c-jump-links__header') },\n                expandable && (React.createElement(\"div\", { className: styles.jumpLinksToggle },\n                    React.createElement(Button, { variant: \"plain\", onClick: () => setIsExpanded(!isExpanded), \"aria-label\": toggleAriaLabel, \"aria-expanded\": isExpanded },\n                        React.createElement(\"span\", { className: styles.jumpLinksToggleIcon },\n                            React.createElement(AngleRightIcon, null)),\n                        label && React.createElement(\"span\", { className: css(styles.jumpLinksToggleText) },\n                            \" \",\n                            label,\n                            \" \")))),\n                label && alwaysShowLabel && React.createElement(\"div\", { className: css(styles.jumpLinksLabel) }, label)),\n            React.createElement(\"ul\", { className: styles.jumpLinksList }, cloneChildren(children)))));\n};\nJumpLinks.displayName = 'JumpLinks';\n//# sourceMappingURL=JumpLinks.js.map"]},"metadata":{},"sourceType":"module"}