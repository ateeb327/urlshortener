{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggleWithText = _a => {\n  var {\n      parentId = '',\n      toggleText,\n      toggleTextClassName = '',\n      toggleButtonContents,\n      toggleButtonContentsClassName = '',\n      onToggle = () => null,\n      isOpen = false,\n      isPlain = false,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isText = true,\n      isDisabled = false,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive = false,\n      'aria-haspopup': ariaHasPopup,\n      parentRef,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      getMenuRef,\n      onEnter,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      'aria-label': ariaLabel = 'Options menu'\n    } = _a,\n    props = __rest(_a, [\"parentId\", \"toggleText\", \"toggleTextClassName\", \"toggleButtonContents\", \"toggleButtonContentsClassName\", \"onToggle\", \"isOpen\", \"isPlain\", \"isText\", \"isDisabled\", \"isActive\", 'aria-haspopup', \"parentRef\", \"getMenuRef\", \"onEnter\", 'aria-label']);\n  const buttonRef = React.useRef();\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return () => {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n  const onDocClick = event => {\n    if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n  const onKeyDown = event => {\n    if (event.key === 'Tab' && !isOpen) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n      onToggle(!isOpen);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n      onToggle(!isOpen);\n      onEnter(event);\n    }\n  };\n  const onEscPress = event => {\n    if (isOpen && (event.key === KeyTypes.Escape || event.key === 'Tab') && parentRef && parentRef.current && parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n  return React.createElement(DropdownContext.Consumer, null, ({\n    id: contextId\n  }) => React.createElement(\"div\", Object.assign({\n    className: css(styles.optionsMenuToggle, styles.modifiers.text, isPlain && styles.modifiers.plain, isDisabled && styles.modifiers.disabled, isActive && styles.modifiers.active)\n  }, props), React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText, toggleTextClassName)\n  }, toggleText), React.createElement(\"button\", {\n    className: css(styles.optionsMenuToggleButton, toggleButtonContentsClassName),\n    id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isOpen,\n    ref: buttonRef,\n    disabled: isDisabled,\n    onClick: () => onToggle(!isOpen),\n    onKeyDown: onKeyDown\n  }, React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleButtonIcon)\n  }, toggleButtonContents))));\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';","map":{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenuToggleWithText.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggleWithText = (_a) => {\n    var { parentId = '', toggleText, toggleTextClassName = '', toggleButtonContents, toggleButtonContentsClassName = '', onToggle = () => null, isOpen = false, isPlain = false, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    isText = true, isDisabled = false, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    isActive = false, 'aria-haspopup': ariaHasPopup, parentRef, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    getMenuRef, onEnter, \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    'aria-label': ariaLabel = 'Options menu' } = _a, props = __rest(_a, [\"parentId\", \"toggleText\", \"toggleTextClassName\", \"toggleButtonContents\", \"toggleButtonContentsClassName\", \"onToggle\", \"isOpen\", \"isPlain\", \"isText\", \"isDisabled\", \"isActive\", 'aria-haspopup', \"parentRef\", \"getMenuRef\", \"onEnter\", 'aria-label']);\n    const buttonRef = React.useRef();\n    React.useEffect(() => {\n        document.addEventListener('mousedown', onDocClick);\n        document.addEventListener('touchstart', onDocClick);\n        document.addEventListener('keydown', onEscPress);\n        return () => {\n            document.removeEventListener('mousedown', onDocClick);\n            document.removeEventListener('touchstart', onDocClick);\n            document.removeEventListener('keydown', onEscPress);\n        };\n    });\n    const onDocClick = (event) => {\n        if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target)) {\n            onToggle(false);\n            buttonRef.current.focus();\n        }\n    };\n    const onKeyDown = (event) => {\n        if (event.key === 'Tab' && !isOpen) {\n            return;\n        }\n        event.preventDefault();\n        if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n            onToggle(!isOpen);\n        }\n        else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n            onToggle(!isOpen);\n            onEnter(event);\n        }\n    };\n    const onEscPress = (event) => {\n        if (isOpen &&\n            (event.key === KeyTypes.Escape || event.key === 'Tab') &&\n            parentRef &&\n            parentRef.current &&\n            parentRef.current.contains(event.target)) {\n            onToggle(false);\n            buttonRef.current.focus();\n        }\n    };\n    return (React.createElement(DropdownContext.Consumer, null, ({ id: contextId }) => (React.createElement(\"div\", Object.assign({ className: css(styles.optionsMenuToggle, styles.modifiers.text, isPlain && styles.modifiers.plain, isDisabled && styles.modifiers.disabled, isActive && styles.modifiers.active) }, props),\n        React.createElement(\"span\", { className: css(styles.optionsMenuToggleText, toggleTextClassName) }, toggleText),\n        React.createElement(\"button\", { className: css(styles.optionsMenuToggleButton, toggleButtonContentsClassName), id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`, \"aria-haspopup\": \"listbox\", \"aria-label\": ariaLabel, \"aria-expanded\": isOpen, ref: buttonRef, disabled: isDisabled, onClick: () => onToggle(!isOpen), onKeyDown: onKeyDown },\n            React.createElement(\"span\", { className: css(styles.optionsMenuToggleButtonIcon) }, toggleButtonContents))))));\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';\n//# sourceMappingURL=OptionsMenuToggleWithText.js.map"]},"metadata":{},"sourceType":"module"}