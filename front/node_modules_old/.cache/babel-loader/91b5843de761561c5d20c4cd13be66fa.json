{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/PageContext';\nexport class Toolbar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.chipGroupContentRef = React.createRef();\n    this.staticFilterInfo = {};\n    this.state = {\n      isManagedToggleExpanded: false,\n      filterInfo: {},\n      windowWidth: canUseDOM ? window.innerWidth : 1200,\n      ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n    };\n    this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n    this.toggleIsExpanded = () => {\n      this.setState(prevState => ({\n        isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n      }));\n    };\n    this.closeExpandableContent = e => {\n      if (e.target.innerWidth !== this.state.windowWidth) {\n        this.setState(() => ({\n          isManagedToggleExpanded: false,\n          windowWidth: e.target.innerWidth\n        }));\n      }\n    };\n    this.updateNumberFilters = (categoryName, numberOfFilters) => {\n      const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);\n      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n        filterInfoToUpdate[categoryName] = numberOfFilters;\n        this.staticFilterInfo = filterInfoToUpdate;\n        this.setState({\n          filterInfo: filterInfoToUpdate\n        });\n      }\n    };\n    this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);\n    this.renderToolbar = randomId => {\n      const _a = this.props,\n        {\n          clearAllFilters,\n          clearFiltersButtonText,\n          collapseListedFiltersBreakpoint,\n          isExpanded: isExpandedProp,\n          toggleIsExpanded,\n          className,\n          children,\n          isFullHeight,\n          isStatic,\n          inset,\n          usePageInsets,\n          isSticky,\n          ouiaId,\n          numberOfFiltersText,\n          customChipGroupContent\n        } = _a,\n        props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"isFullHeight\", \"isStatic\", \"inset\", \"usePageInsets\", \"isSticky\", \"ouiaId\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n      const {\n        isManagedToggleExpanded\n      } = this.state;\n      const isToggleManaged = this.isToggleManaged();\n      const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n      const numberOfFilters = this.getNumberOfFilters();\n      const showClearFiltersButton = numberOfFilters > 0;\n      return React.createElement(PageContext.Consumer, null, ({\n        width,\n        getBreakpoint\n      }) => React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbar, isFullHeight && styles.modifiers.fullHeight, isStatic && styles.modifiers.static, usePageInsets && styles.modifiers.pageInsets, isSticky && styles.modifiers.sticky, formatBreakpointMods(inset, styles, '', getBreakpoint(width)), className),\n        id: randomId\n      }, getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId), props), React.createElement(ToolbarContext.Provider, {\n        value: {\n          isExpanded,\n          toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n          chipGroupContentRef: this.chipGroupContentRef,\n          updateNumberFilters: this.updateNumberFilters,\n          numberOfFilters,\n          clearAllFilters,\n          clearFiltersButtonText,\n          showClearFiltersButton,\n          toolbarId: randomId,\n          customChipGroupContent\n        }\n      }, children, React.createElement(ToolbarChipGroupContent, {\n        isExpanded: isExpanded,\n        chipGroupContentRef: this.chipGroupContentRef,\n        clearAllFilters: clearAllFilters,\n        showClearFiltersButton: showClearFiltersButton,\n        clearFiltersButtonText: clearFiltersButtonText,\n        numberOfFilters: numberOfFilters,\n        numberOfFiltersText: numberOfFiltersText,\n        collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint,\n        customChipGroupContent: customChipGroupContent\n      }))));\n    };\n  }\n  componentDidMount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n  componentWillUnmount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n  render() {\n    return this.props.id ? this.renderToolbar(this.props.id) : React.createElement(GenerateId, null, randomId => this.renderToolbar(randomId));\n  }\n}\nToolbar.displayName = 'Toolbar';","map":{"version":3,"sources":["../../../../src/components/Toolbar/Toolbar.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/PageContext';\nexport class Toolbar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.chipGroupContentRef = React.createRef();\n        this.staticFilterInfo = {};\n        this.state = {\n            isManagedToggleExpanded: false,\n            filterInfo: {},\n            windowWidth: canUseDOM ? window.innerWidth : 1200,\n            ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n        };\n        this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n        this.toggleIsExpanded = () => {\n            this.setState(prevState => ({\n                isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n            }));\n        };\n        this.closeExpandableContent = (e) => {\n            if (e.target.innerWidth !== this.state.windowWidth) {\n                this.setState(() => ({\n                    isManagedToggleExpanded: false,\n                    windowWidth: e.target.innerWidth\n                }));\n            }\n        };\n        this.updateNumberFilters = (categoryName, numberOfFilters) => {\n            const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);\n            if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n                filterInfoToUpdate[categoryName] = numberOfFilters;\n                this.staticFilterInfo = filterInfoToUpdate;\n                this.setState({ filterInfo: filterInfoToUpdate });\n            }\n        };\n        this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);\n        this.renderToolbar = (randomId) => {\n            const _a = this.props, { clearAllFilters, clearFiltersButtonText, collapseListedFiltersBreakpoint, isExpanded: isExpandedProp, toggleIsExpanded, className, children, isFullHeight, isStatic, inset, usePageInsets, isSticky, ouiaId, numberOfFiltersText, customChipGroupContent } = _a, props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"isFullHeight\", \"isStatic\", \"inset\", \"usePageInsets\", \"isSticky\", \"ouiaId\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n            const { isManagedToggleExpanded } = this.state;\n            const isToggleManaged = this.isToggleManaged();\n            const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n            const numberOfFilters = this.getNumberOfFilters();\n            const showClearFiltersButton = numberOfFilters > 0;\n            return (React.createElement(PageContext.Consumer, null, ({ width, getBreakpoint }) => (React.createElement(\"div\", Object.assign({ className: css(styles.toolbar, isFullHeight && styles.modifiers.fullHeight, isStatic && styles.modifiers.static, usePageInsets && styles.modifiers.pageInsets, isSticky && styles.modifiers.sticky, formatBreakpointMods(inset, styles, '', getBreakpoint(width)), className), id: randomId }, getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId), props),\n                React.createElement(ToolbarContext.Provider, { value: {\n                        isExpanded,\n                        toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n                        chipGroupContentRef: this.chipGroupContentRef,\n                        updateNumberFilters: this.updateNumberFilters,\n                        numberOfFilters,\n                        clearAllFilters,\n                        clearFiltersButtonText,\n                        showClearFiltersButton,\n                        toolbarId: randomId,\n                        customChipGroupContent\n                    } },\n                    children,\n                    React.createElement(ToolbarChipGroupContent, { isExpanded: isExpanded, chipGroupContentRef: this.chipGroupContentRef, clearAllFilters: clearAllFilters, showClearFiltersButton: showClearFiltersButton, clearFiltersButtonText: clearFiltersButtonText, numberOfFilters: numberOfFilters, numberOfFiltersText: numberOfFiltersText, collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint, customChipGroupContent: customChipGroupContent }))))));\n        };\n    }\n    componentDidMount() {\n        if (this.isToggleManaged() && canUseDOM) {\n            window.addEventListener('resize', this.closeExpandableContent);\n        }\n    }\n    componentWillUnmount() {\n        if (this.isToggleManaged() && canUseDOM) {\n            window.removeEventListener('resize', this.closeExpandableContent);\n        }\n    }\n    render() {\n        return this.props.id ? (this.renderToolbar(this.props.id)) : (React.createElement(GenerateId, null, randomId => this.renderToolbar(randomId)));\n    }\n}\nToolbar.displayName = 'Toolbar';\n//# sourceMappingURL=Toolbar.js.map"]},"metadata":{},"sourceType":"module"}