{"ast":null,"code":"// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { top, right, bottom, left, start, end } from '../enums';\n/**\n *\n */\nexport default function computeOffsets({\n  reference,\n  element,\n  placement\n}) {\n  const basePlacement = placement ? getBasePlacement(placement) : null;\n  const variation = placement ? getVariation(placement) : null;\n  const commonX = reference.x + reference.width / 2 - element.width / 2;\n  const commonY = reference.y + reference.height / 2 - element.height / 2;\n  let offsets;\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n  if (mainAxis != null) {\n    const len = mainAxis === 'y' ? 'height' : 'width';\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n      case end:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n      default:\n    }\n  }\n  return offsets;\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.ts"],"names":[],"mappings":"AAAA;AACA,OAAO,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,YAAY,MAAM,gBAAgB;AACzC,OAAO,wBAAwB,MAAM,4BAA4B;AAEjE,SAAS,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,QAAmB,UAAU;AAE1E;;AAEG;AACH,eAAc,SAAU,cAAc,CAAC;EACrC,SAAS;EACT,OAAO;EACP;AAAS,CAMV,EAAA;EACC,MAAM,aAAa,GAAG,SAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC,GAAG,IAAI;EACpE,MAAM,SAAS,GAAG,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,IAAI;EAC5D,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC;EACrE,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC;EAEvE,IAAI,OAAO;EACX,QAAQ,aAAa;IACnB,KAAK,GAAG;MACN,OAAO,GAAG;QACR,CAAC,EAAE,OAAO;QACV,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,OAAO,CAAC;OAC1B;MACD;IACF,KAAK,MAAM;MACT,OAAO,GAAG;QACR,CAAC,EAAE,OAAO;QACV,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC;OAC5B;MACD;IACF,KAAK,KAAK;MACR,OAAO,GAAG;QACR,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK;QAChC,CAAC,EAAE;OACJ;MACD;IACF,KAAK,IAAI;MACP,OAAO,GAAG;QACR,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK;QAC9B,CAAC,EAAE;OACJ;MACD;IACF;MACE,OAAO,GAAG;QACR,CAAC,EAAE,SAAS,CAAC,CAAC;QACd,CAAC,EAAE,SAAS,CAAC;OACd;EACJ;EAED,MAAM,QAAQ,GAAG,aAAa,GAAG,wBAAwB,CAAC,aAAa,CAAC,GAAG,IAAI;EAE/E,IAAI,QAAQ,IAAI,IAAI,EAAE;IACpB,MAAM,GAAG,GAAG,QAAQ,KAAK,GAAG,GAAG,QAAQ,GAAG,OAAO;IAEjD,QAAQ,SAAS;MACf,KAAK,KAAK;QACR,OAAO,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrG;MACF,KAAK,GAAG;QACN,OAAO,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpG;MACF;IACD;EACF;EAED,OAAO,OAAO;AAChB","sourceRoot":"","sourcesContent":["// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { top, right, bottom, left, start, end } from '../enums';\n/**\n *\n */\nexport default function computeOffsets({ reference, element, placement }) {\n    const basePlacement = placement ? getBasePlacement(placement) : null;\n    const variation = placement ? getVariation(placement) : null;\n    const commonX = reference.x + reference.width / 2 - element.width / 2;\n    const commonY = reference.y + reference.height / 2 - element.height / 2;\n    let offsets;\n    switch (basePlacement) {\n        case top:\n            offsets = {\n                x: commonX,\n                y: reference.y - element.height\n            };\n            break;\n        case bottom:\n            offsets = {\n                x: commonX,\n                y: reference.y + reference.height\n            };\n            break;\n        case right:\n            offsets = {\n                x: reference.x + reference.width,\n                y: commonY\n            };\n            break;\n        case left:\n            offsets = {\n                x: reference.x - element.width,\n                y: commonY\n            };\n            break;\n        default:\n            offsets = {\n                x: reference.x,\n                y: reference.y\n            };\n    }\n    const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n    if (mainAxis != null) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        switch (variation) {\n            case start:\n                offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n                break;\n            case end:\n                offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n                break;\n            default:\n        }\n    }\n    return offsets;\n}\n//# sourceMappingURL=computeOffsets.js.map"]},"metadata":{},"sourceType":"module"}