{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select } from '@patternfly/react-core/dist/esm/components/Select';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nexport const EditableSelectInputCell = ({\n  value,\n  rowIndex,\n  cellIndex,\n  onSelect = () => {},\n  clearSelection,\n  isOpen = false,\n  onToggle = () => {},\n  selections = [''],\n  options = [],\n  props\n}) => {\n  const onSelectHandler = (event, newValue, isPlaceholder) => {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n  const onClear = event => {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n  const select = React.createElement(Select, Object.assign({}, props.editableSelectProps, {\n    onSelect: onSelectHandler\n  }, clearSelection && {\n    onClear\n  }, {\n    isOpen: isOpen,\n    onToggle: onToggle,\n    selections: selections\n  }), options);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, Array.isArray(value) ? value.join(', ') : value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, select, React.createElement(\"div\", {\n    className: css(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';","map":{"version":3,"sources":["../../../../src/components/Table/EditableSelectInputCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,SAAS,MAAM,QAA4B,mDAAmD;AAC9F,OAAO,YAAY,MAAM,gEAAgE;AACzF,OAAO,UAAU,MAAM,mDAAmD;AAgC1E,OAAO,MAAM,uBAAuB,GAAsD,CAAC;EACzF,KAAK;EACL,QAAQ;EACR,SAAS;EACT,QAAQ,GAAG,CAAA,KAAK,CAAE,CAAC;EACnB,cAAc;EACd,MAAM,GAAG,KAAK;EACd,QAAQ,GAAG,CAAA,KAAK,CAAE,CAAC;EACnB,UAAU,GAAG,CAAC,EAAE,CAAC;EACjB,OAAO,GAAG,EAA0B;EACpC;AAAK,CACoB,KAAI;EAC7B,MAAM,eAAe,GAAG,CACtB,KAA2C,EAC3C,QAAqC,EACrC,aAAsB,KACpB;IACF,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC;EAC/D,CAAC;EAED,MAAM,OAAO,GAAI,KAAuB,IAAI;IAC1C,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC;EAC5C,CAAC;EAED,MAAM,MAAM,GACV,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACD,KAAK,CAAC,mBAAmB,EAAA;IAC7B,QAAQ,EAAE;EAAe,CAAA,EACpB,cAAc,IAAI;IAAE;EAAO,CAAE,EAAC;IACnC,MAAM,EAAE,MAAM;IACd,QAAQ,EAAE,QAAQ;IAClB,UAAU,EAAE;EAAU,CAAA,CAAA,EAErB,OAAO,CAEX;EAED,OACE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAQ,EAAA,IAAA,EACb,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,YAAY,CAAC;EAAe,CAAA,EAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAO,EACrG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,YAAY,CAAC;EAAe,CAAA,EACzC,MAAM,EACP,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,GAAG,CAAC,UAAU,CAAC,cAAc,EAAE,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC;IAAA,WAAA,EAAY;EAAQ,CAAA,EAC3F,KAAK,CAAC,SAAS,CACZ,CACF,CACS;AAErB,CAAC;AACD,uBAAuB,CAAC,WAAW,GAAG,yBAAyB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select } from '@patternfly/react-core/dist/esm/components/Select';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nexport const EditableSelectInputCell = ({ value, rowIndex, cellIndex, onSelect = () => { }, clearSelection, isOpen = false, onToggle = () => { }, selections = [''], options = [], props }) => {\n    const onSelectHandler = (event, newValue, isPlaceholder) => {\n        onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n    };\n    const onClear = (event) => {\n        clearSelection(rowIndex, cellIndex, event);\n    };\n    const select = (React.createElement(Select, Object.assign({}, props.editableSelectProps, { onSelect: onSelectHandler }, (clearSelection && { onClear }), { isOpen: isOpen, onToggle: onToggle, selections: selections }), options));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: inlineStyles.inlineEditValue }, Array.isArray(value) ? value.join(', ') : value),\n        React.createElement(\"div\", { className: inlineStyles.inlineEditInput },\n            select,\n            React.createElement(\"div\", { className: css(formStyles.formHelperText, formStyles.modifiers.error), \"aria-live\": \"polite\" }, props.errorText))));\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';\n//# sourceMappingURL=EditableSelectInputCell.js.map"]},"metadata":{},"sourceType":"module"}