{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\nexport const DualListSelectorListWrapperBase = _a => {\n  var {\n      className,\n      children,\n      'aria-labelledby': ariaLabelledBy,\n      innerRef,\n      options = [],\n      selectedOptions = [],\n      onOptionSelect,\n      displayOption,\n      id = getUniqueId('dual-list-selector-list'),\n      isDisabled = false\n    } = _a,\n    props = __rest(_a, [\"className\", \"children\", 'aria-labelledby', \"innerRef\", \"options\", \"selectedOptions\", \"onOptionSelect\", \"displayOption\", \"id\", \"isDisabled\"]);\n  const [focusedOption, setFocusedOption] = React.useState('');\n  const ref = React.useRef(null);\n  const menuRef = innerRef || ref;\n  const {\n    isTree\n  } = React.useContext(DualListSelectorContext);\n  // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n  const handleKeys = event => {\n    if (!menuRef.current || menuRef.current !== event.target.closest('.pf-c-dual-list-selector__menu') && !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(event.target.closest('.pf-c-dual-list-selector__menu'))) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const validOptions = isTree ? Array.from(menuRef.current.querySelectorAll('.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input')) : Array.from(menuRef.current.getElementsByTagName('LI')).filter(el => !el.classList.contains('pf-m-disabled'));\n    const activeElement = document.activeElement;\n    handleArrows(event, validOptions, element => activeElement.contains(element), element => {\n      if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n        setFocusedOption(element.id);\n      } else {\n        setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n      }\n      return element;\n    }, ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'], undefined, false, false, false);\n  };\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorMenu, className),\n    ref: menuRef,\n    tabIndex: 0\n  }, props), React.createElement(DualListSelectorListContext.Provider, {\n    value: {\n      setFocusedOption,\n      isTree,\n      focusedOption,\n      ariaLabelledBy,\n      displayOption,\n      selectedOptions,\n      id,\n      options,\n      onOptionSelect,\n      isDisabled\n    }\n  }, children ? children : React.createElement(DualListSelectorList, null)));\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\nexport const DualListSelectorListWrapper = React.forwardRef((props, ref) => React.createElement(DualListSelectorListWrapperBase, Object.assign({\n  innerRef: ref\n}, props)));\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorListWrapper.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\nexport const DualListSelectorListWrapperBase = (_a) => {\n    var { className, children, 'aria-labelledby': ariaLabelledBy, innerRef, options = [], selectedOptions = [], onOptionSelect, displayOption, id = getUniqueId('dual-list-selector-list'), isDisabled = false } = _a, props = __rest(_a, [\"className\", \"children\", 'aria-labelledby', \"innerRef\", \"options\", \"selectedOptions\", \"onOptionSelect\", \"displayOption\", \"id\", \"isDisabled\"]);\n    const [focusedOption, setFocusedOption] = React.useState('');\n    const ref = React.useRef(null);\n    const menuRef = innerRef || ref;\n    const { isTree } = React.useContext(DualListSelectorContext);\n    // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n    // handling is applied whether the pane is dynamically built or passed via the children prop.\n    const handleKeys = (event) => {\n        if (!menuRef.current ||\n            (menuRef.current !== event.target.closest('.pf-c-dual-list-selector__menu') &&\n                !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(event.target.closest('.pf-c-dual-list-selector__menu')))) {\n            return;\n        }\n        event.stopImmediatePropagation();\n        const validOptions = isTree\n            ? Array.from(menuRef.current.querySelectorAll('.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input'))\n            : Array.from(menuRef.current.getElementsByTagName('LI')).filter(el => !el.classList.contains('pf-m-disabled'));\n        const activeElement = document.activeElement;\n        handleArrows(event, validOptions, (element) => activeElement.contains(element), (element) => {\n            if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n                setFocusedOption(element.id);\n            }\n            else {\n                setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n            }\n            return element;\n        }, ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'], undefined, false, false, false);\n    };\n    React.useEffect(() => {\n        window.addEventListener('keydown', handleKeys);\n        return () => {\n            window.removeEventListener('keydown', handleKeys);\n        };\n    }, [menuRef.current]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.dualListSelectorMenu, className), ref: menuRef, tabIndex: 0 }, props),\n        React.createElement(DualListSelectorListContext.Provider, { value: {\n                setFocusedOption,\n                isTree,\n                focusedOption,\n                ariaLabelledBy,\n                displayOption,\n                selectedOptions,\n                id,\n                options,\n                onOptionSelect,\n                isDisabled\n            } }, children ? children : React.createElement(DualListSelectorList, null))));\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\nexport const DualListSelectorListWrapper = React.forwardRef((props, ref) => (React.createElement(DualListSelectorListWrapperBase, Object.assign({ innerRef: ref }, props))));\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';\n//# sourceMappingURL=DualListSelectorListWrapper.js.map"]},"metadata":{},"sourceType":"module"}