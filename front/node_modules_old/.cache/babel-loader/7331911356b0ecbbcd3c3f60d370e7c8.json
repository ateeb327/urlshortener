{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport const ExpandableSectionToggle = _a => {\n  var {\n      children,\n      className = '',\n      isExpanded = false,\n      onToggle,\n      contentId,\n      direction = 'down',\n      hasTruncatedContent = false\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"onToggle\", \"contentId\", \"direction\", \"hasTruncatedContent\"]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.expandableSection, isExpanded && styles.modifiers.expanded, styles.modifiers.detached, hasTruncatedContent && styles.modifiers.truncate, className)\n  }, props), React.createElement(\"button\", {\n    className: css(styles.expandableSectionToggle),\n    type: \"button\",\n    \"aria-expanded\": isExpanded,\n    \"aria-controls\": contentId,\n    onClick: () => onToggle(!isExpanded)\n  }, !hasTruncatedContent && React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleIcon, isExpanded && direction === 'up' && styles.modifiers.expandTop)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  })), React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleText)\n  }, children)));\n};\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';","map":{"version":3,"sources":["../../../../src/components/ExpandableSection/ExpandableSectionToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,8EAA8E;AACjG,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,cAAc,MAAM,yDAAyD;AAyBpF,OAAO,MAAM,uBAAuB,GAA2D,EAShE,IAAI;MAT4D;MAC7F,QAAQ;MACR,SAAS,GAAG,EAAE;MACd,UAAU,GAAG,KAAK;MAClB,QAAQ;MACR,SAAS;MACT,SAAS,GAAG,MAAM;MAClB,mBAAmB,GAAG;IAAK,CAAA,GAAA,EAEE;IAD1B,KAAK,GAAA,MAAA,CAAA,EAAA,EARqF,CAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,qBAAA,CAS9F,CADS;EAC0B,OAClC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IACE,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,iBAAiB,EACxB,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,EACvC,MAAM,CAAC,SAAS,CAAC,QAAQ,EACzB,mBAAmB,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,EAChD,SAAS;EACV,CAAA,EACG,KAAK,CAAA,EAET,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IACE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,uBAAuB,CAAC;IAC9C,IAAI,EAAC,QAAQ;IAAA,eAAA,EACE,UAAU;IAAA,eAAA,EACV,SAAS;IACxB,OAAO,EAAE,CAAA,KAAM,QAAQ,CAAC,CAAC,UAAU;EAAC,CAAA,EAEnC,CAAC,mBAAmB,IACnB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IACE,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,2BAA2B,EAClC,UAAU,IAAI,SAAS,KAAK,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS;EAC/D,CAAA,EAED,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA;IAAA,aAAA,EAAA;EAAA,CAAA,CAAe,CAEjC,EACD,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,2BAA2B;EAAC,CAAA,EAAG,QAAQ,CAAQ,CACpE,CACL;CACP;AAED,uBAAuB,CAAC,WAAW,GAAG,yBAAyB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport const ExpandableSectionToggle = (_a) => {\n    var { children, className = '', isExpanded = false, onToggle, contentId, direction = 'down', hasTruncatedContent = false } = _a, props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"onToggle\", \"contentId\", \"direction\", \"hasTruncatedContent\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.expandableSection, isExpanded && styles.modifiers.expanded, styles.modifiers.detached, hasTruncatedContent && styles.modifiers.truncate, className) }, props),\n        React.createElement(\"button\", { className: css(styles.expandableSectionToggle), type: \"button\", \"aria-expanded\": isExpanded, \"aria-controls\": contentId, onClick: () => onToggle(!isExpanded) },\n            !hasTruncatedContent && (React.createElement(\"span\", { className: css(styles.expandableSectionToggleIcon, isExpanded && direction === 'up' && styles.modifiers.expandTop) },\n                React.createElement(AngleRightIcon, { \"aria-hidden\": true }))),\n            React.createElement(\"span\", { className: css(styles.expandableSectionToggleText) }, children))));\n};\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';\n//# sourceMappingURL=ExpandableSectionToggle.js.map"]},"metadata":{},"sourceType":"module"}