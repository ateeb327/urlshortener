{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport var TextAreaReadOnlyVariant;\n(function (TextAreaReadOnlyVariant) {\n  TextAreaReadOnlyVariant[\"default\"] = \"default\";\n  TextAreaReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));\nexport class TextAreaBase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.setAutoHeight = field => {\n      field.style.setProperty(heightToken.name, 'inherit');\n      const computed = window.getComputedStyle(field);\n      // Calculate the height\n      const height = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));\n      field.style.setProperty(heightToken.name, `${height}px`);\n    };\n    this.handleChange = event => {\n      // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n      const field = event.currentTarget;\n      if (this.props.autoResize && canUseDOM) {\n        this.setAutoHeight(field);\n      }\n      if (this.props.onChange) {\n        this.props.onChange(field.value, event);\n      }\n    };\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n  componentDidMount() {\n    const inputRef = this.props.innerRef || this.inputRef;\n    if (this.props.autoResize && canUseDOM) {\n      const field = inputRef.current;\n      this.setAutoHeight(field);\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        value,\n        validated,\n        isRequired,\n        isDisabled,\n        isIconSprite,\n        isReadOnly,\n        readOnlyVariant,\n        resizeOrientation,\n        innerRef,\n        disabled,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        autoResize,\n        onChange\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"isReadOnly\", \"readOnlyVariant\", \"resizeOrientation\", \"innerRef\", \"disabled\", \"autoResize\", \"onChange\"]);\n    const orientation = `resize${capitalize(resizeOrientation)}`;\n    return React.createElement(\"textarea\", Object.assign({\n      className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, readOnlyVariant === 'plain' && styles.modifiers.plain, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n      onChange: this.handleChange\n    }, typeof this.props.defaultValue !== 'string' && {\n      value\n    }, {\n      \"aria-invalid\": validated === ValidatedOptions.error,\n      required: isRequired,\n      disabled: isDisabled || disabled,\n      readOnly: !!readOnlyVariant || isReadOnly,\n      ref: innerRef || this.inputRef\n    }, props));\n  }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  isDisabled: false,\n  isIconSprite: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => React.createElement(TextAreaBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextArea.displayName = 'TextArea';","map":{"version":3,"sources":["../../../../src/components/TextArea/TextArea.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n    TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n    TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n    TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport var TextAreaReadOnlyVariant;\n(function (TextAreaReadOnlyVariant) {\n    TextAreaReadOnlyVariant[\"default\"] = \"default\";\n    TextAreaReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));\nexport class TextAreaBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n        this.setAutoHeight = (field) => {\n            field.style.setProperty(heightToken.name, 'inherit');\n            const computed = window.getComputedStyle(field);\n            // Calculate the height\n            const height = parseInt(computed.getPropertyValue('border-top-width')) +\n                parseInt(computed.getPropertyValue('padding-top')) +\n                field.scrollHeight +\n                parseInt(computed.getPropertyValue('padding-bottom')) +\n                parseInt(computed.getPropertyValue('border-bottom-width'));\n            field.style.setProperty(heightToken.name, `${height}px`);\n        };\n        this.handleChange = (event) => {\n            // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n            const field = event.currentTarget;\n            if (this.props.autoResize && canUseDOM) {\n                this.setAutoHeight(field);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(field.value, event);\n            }\n        };\n        if (!props.id && !props['aria-label']) {\n            // eslint-disable-next-line no-console\n            console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n        }\n    }\n    componentDidMount() {\n        const inputRef = this.props.innerRef || this.inputRef;\n        if (this.props.autoResize && canUseDOM) {\n            const field = inputRef.current;\n            this.setAutoHeight(field);\n        }\n    }\n    render() {\n        const _a = this.props, { className, value, validated, isRequired, isDisabled, isIconSprite, isReadOnly, readOnlyVariant, resizeOrientation, innerRef, disabled, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        autoResize, onChange } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"isReadOnly\", \"readOnlyVariant\", \"resizeOrientation\", \"innerRef\", \"disabled\", \"autoResize\", \"onChange\"]);\n        const orientation = `resize${capitalize(resizeOrientation)}`;\n        return (React.createElement(\"textarea\", Object.assign({ className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, readOnlyVariant === 'plain' && styles.modifiers.plain, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning), onChange: this.handleChange }, (typeof this.props.defaultValue !== 'string' && { value }), { \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant || isReadOnly, ref: innerRef || this.inputRef }, props)));\n    }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n    innerRef: React.createRef(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    isIconSprite: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => (React.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref }))));\nTextArea.displayName = 'TextArea';\n//# sourceMappingURL=TextArea.js.map"]},"metadata":{},"sourceType":"module"}