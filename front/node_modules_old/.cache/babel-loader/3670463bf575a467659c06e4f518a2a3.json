{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Dropdown, KebabToggle } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { DropdownSeparator } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { DropdownDirection, DropdownPosition } from '@patternfly/react-core/dist/esm/components/Dropdown';\nexport class ActionsColumn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleRef = React.createRef();\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onClick = (event, onClick) => {\n      const {\n        rowData,\n        extraData\n      } = this.props;\n      // Only prevent default if onClick is provided.  This allows href support.\n      if (onClick) {\n        event.preventDefault();\n        // tslint:disable-next-line:no-unused-expression\n        onClick(event, extraData && extraData.rowIndex, rowData, extraData);\n      }\n    };\n    this.state = {\n      isOpen: false\n    };\n  }\n  render() {\n    const {\n      isOpen\n    } = this.state;\n    const {\n      items,\n      children,\n      dropdownPosition,\n      dropdownDirection,\n      menuAppendTo,\n      isDisabled,\n      rowData,\n      actionsToggle\n    } = this.props;\n    const actionsToggleClone = actionsToggle ? actionsToggle({\n      onToggle: this.onToggle,\n      isOpen,\n      isDisabled\n    }) : React.createElement(KebabToggle, {\n      isDisabled: isDisabled,\n      onToggle: this.onToggle\n    });\n    return React.createElement(React.Fragment, null, items.filter(item => item.isOutsideDropdown)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .map((_a, key) => {\n      var {\n          title,\n          itemKey,\n          onClick,\n          isOutsideDropdown\n        } = _a,\n        props = __rest(_a, [\"title\", \"itemKey\", \"onClick\", \"isOutsideDropdown\"]);\n      return typeof title === 'string' ? React.createElement(Button, Object.assign({\n        onClick: event => this.onClick(event, onClick)\n      }, props, {\n        isDisabled: isDisabled,\n        key: itemKey || `outside_dropdown_${key}`,\n        \"data-key\": itemKey || `outside_dropdown_${key}`\n      }), title) : React.cloneElement(title, Object.assign({\n        onClick,\n        isDisabled\n      }, props));\n    }), React.createElement(Dropdown, Object.assign({\n      toggle: actionsToggleClone,\n      position: dropdownPosition,\n      direction: dropdownDirection,\n      menuAppendTo: menuAppendTo,\n      isOpen: isOpen,\n      dropdownItems: items.filter(item => !item.isOutsideDropdown).map((_a, key) => {\n        var {\n            title,\n            itemKey,\n            onClick,\n            isSeparator\n          } = _a,\n          props = __rest(_a, [\"title\", \"itemKey\", \"onClick\", \"isSeparator\"]);\n        return isSeparator ? React.createElement(DropdownSeparator, Object.assign({}, props, {\n          key: itemKey || key,\n          \"data-key\": itemKey || key\n        })) : React.createElement(DropdownItem, Object.assign({\n          component: \"button\",\n          onClick: event => {\n            this.onClick(event, onClick);\n            this.onToggle(!isOpen);\n          }\n        }, props, {\n          key: itemKey || key,\n          \"data-key\": itemKey || key\n        }), title);\n      }),\n      isPlain: true\n    }, rowData && rowData.actionProps)), children);\n  }\n}\nActionsColumn.displayName = 'ActionsColumn';\nActionsColumn.defaultProps = {\n  children: null,\n  items: [],\n  dropdownPosition: DropdownPosition.right,\n  dropdownDirection: DropdownDirection.down,\n  menuAppendTo: 'inline',\n  rowData: {},\n  extraData: {}\n};","map":{"version":3,"sources":["../../../../src/components/Table/ActionsColumn.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Dropdown, KebabToggle } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { DropdownSeparator } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { DropdownDirection, DropdownPosition } from '@patternfly/react-core/dist/esm/components/Dropdown';\nexport class ActionsColumn extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleRef = React.createRef();\n        this.onToggle = (isOpen) => {\n            this.setState({\n                isOpen\n            });\n        };\n        this.onClick = (event, onClick) => {\n            const { rowData, extraData } = this.props;\n            // Only prevent default if onClick is provided.  This allows href support.\n            if (onClick) {\n                event.preventDefault();\n                // tslint:disable-next-line:no-unused-expression\n                onClick(event, extraData && extraData.rowIndex, rowData, extraData);\n            }\n        };\n        this.state = {\n            isOpen: false\n        };\n    }\n    render() {\n        const { isOpen } = this.state;\n        const { items, children, dropdownPosition, dropdownDirection, menuAppendTo, isDisabled, rowData, actionsToggle } = this.props;\n        const actionsToggleClone = actionsToggle ? (actionsToggle({ onToggle: this.onToggle, isOpen, isDisabled })) : (React.createElement(KebabToggle, { isDisabled: isDisabled, onToggle: this.onToggle }));\n        return (React.createElement(React.Fragment, null,\n            items\n                .filter(item => item.isOutsideDropdown)\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                .map((_a, key) => {\n                var { title, itemKey, onClick, isOutsideDropdown } = _a, props = __rest(_a, [\"title\", \"itemKey\", \"onClick\", \"isOutsideDropdown\"]);\n                return typeof title === 'string' ? (React.createElement(Button, Object.assign({ onClick: event => this.onClick(event, onClick) }, props, { isDisabled: isDisabled, key: itemKey || `outside_dropdown_${key}`, \"data-key\": itemKey || `outside_dropdown_${key}` }), title)) : (React.cloneElement(title, Object.assign({ onClick, isDisabled }, props)));\n            }),\n            React.createElement(Dropdown, Object.assign({ toggle: actionsToggleClone, position: dropdownPosition, direction: dropdownDirection, menuAppendTo: menuAppendTo, isOpen: isOpen, dropdownItems: items\n                    .filter(item => !item.isOutsideDropdown)\n                    .map((_a, key) => {\n                    var { title, itemKey, onClick, isSeparator } = _a, props = __rest(_a, [\"title\", \"itemKey\", \"onClick\", \"isSeparator\"]);\n                    return isSeparator ? (React.createElement(DropdownSeparator, Object.assign({}, props, { key: itemKey || key, \"data-key\": itemKey || key }))) : (React.createElement(DropdownItem, Object.assign({ component: \"button\", onClick: event => {\n                            this.onClick(event, onClick);\n                            this.onToggle(!isOpen);\n                        } }, props, { key: itemKey || key, \"data-key\": itemKey || key }), title));\n                }), isPlain: true }, (rowData && rowData.actionProps))),\n            children));\n    }\n}\nActionsColumn.displayName = 'ActionsColumn';\nActionsColumn.defaultProps = {\n    children: null,\n    items: [],\n    dropdownPosition: DropdownPosition.right,\n    dropdownDirection: DropdownDirection.down,\n    menuAppendTo: 'inline',\n    rowData: {},\n    extraData: {}\n};\n//# sourceMappingURL=ActionsColumn.js.map"]},"metadata":{},"sourceType":"module"}