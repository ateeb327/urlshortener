{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Button, ButtonVariant } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nexport var NotificationBadgeVariant;\n(function (NotificationBadgeVariant) {\n  NotificationBadgeVariant[\"read\"] = \"read\";\n  NotificationBadgeVariant[\"unread\"] = \"unread\";\n  NotificationBadgeVariant[\"attention\"] = \"attention\";\n})(NotificationBadgeVariant || (NotificationBadgeVariant = {}));\nexport const NotificationBadge = _a => {\n  var {\n      isRead,\n      children,\n      variant = isRead ? 'read' : 'unread',\n      count = 0,\n      attentionIcon = React.createElement(AttentionBellIcon, null),\n      icon = React.createElement(BellIcon, null),\n      className,\n      isExpanded = false\n    } = _a,\n    props = __rest(_a, [\"isRead\", \"children\", \"variant\", \"count\", \"attentionIcon\", \"icon\", \"className\", \"isExpanded\"]);\n  let notificationChild = icon;\n  if (children !== undefined) {\n    notificationChild = children;\n  } else if (variant === NotificationBadgeVariant.attention) {\n    notificationChild = attentionIcon;\n  }\n  return React.createElement(Button, Object.assign({\n    variant: ButtonVariant.plain,\n    className: className,\n    \"aria-expanded\": isExpanded\n  }, props), React.createElement(\"span\", {\n    className: css(styles.notificationBadge, styles.modifiers[variant], isExpanded && styles.modifiers.expanded)\n  }, notificationChild, count > 0 && React.createElement(\"span\", {\n    className: css(styles.notificationBadgeCount)\n  }, count)));\n};\nNotificationBadge.displayName = 'NotificationBadge';","map":{"version":3,"sources":["../../../../src/components/NotificationBadge/NotificationBadge.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,MAAM,EAAE,aAAa,QAAqB,WAAW;AAC9D,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,8EAA8E;AACjG,OAAO,iBAAiB,MAAM,4DAA4D;AAC1F,OAAO,QAAQ,MAAM,kDAAkD;AAEvE,OAAA,IAAY,wBAIX;AAJD,CAAA,UAAY,wBAAwB,EAAA;EAClC,wBAAA,CAAA,MAAA,CAAA,GAAA,MAAa;EACb,wBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,wBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;AACzB,CAAC,EAJW,wBAAwB,KAAxB,wBAAwB,GAAA,CAAA,CAAA,CAAA,CAAA;AA6BpC,OAAO,MAAM,iBAAiB,GAAqD,EAU1D,IAAI;MAVsD;MACjF,MAAM;MACN,QAAQ;MACR,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,QAAQ;MACpC,KAAK,GAAG,CAAC;MACT,aAAa,GAAG,KAAA,CAAA,aAAA,CAAC,iBAAiB,EAAA,IAAA,CAAG;MACrC,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA,IAAA,CAAG;MACnB,SAAS;MACT,UAAU,GAAG;IAAK,CAAA,GAAA,EAEK;IADpB,KAAK,GAAA,MAAA,CAAA,EAAA,EATyE,CAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,EAAA,eAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,CAUlF,CADS;EAER,IAAI,iBAAiB,GAAG,IAAI;EAC5B,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,iBAAiB,GAAG,QAAQ;GAC7B,MAAM,IAAI,OAAO,KAAK,wBAAwB,CAAC,SAAS,EAAE;IACzD,iBAAiB,GAAG,aAAa;EAClC;EACD,OACE,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA;IAAC,OAAO,EAAE,aAAa,CAAC,KAAK;IAAE,SAAS,EAAE,SAAS;IAAA,eAAA,EAAiB;EAAU,CAAA,EAAM,KAAK,CAAA,EAC9F,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IACE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ;EAAC,CAAA,EAE3G,iBAAiB,EACjB,KAAK,GAAG,CAAC,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,sBAAsB;EAAC,CAAA,EAAG,KAAK,CAAQ,CAC5E,CACA;AAEb,CAAC;AACD,iBAAiB,CAAC,WAAW,GAAG,mBAAmB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Button, ButtonVariant } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nexport var NotificationBadgeVariant;\n(function (NotificationBadgeVariant) {\n    NotificationBadgeVariant[\"read\"] = \"read\";\n    NotificationBadgeVariant[\"unread\"] = \"unread\";\n    NotificationBadgeVariant[\"attention\"] = \"attention\";\n})(NotificationBadgeVariant || (NotificationBadgeVariant = {}));\nexport const NotificationBadge = (_a) => {\n    var { isRead, children, variant = isRead ? 'read' : 'unread', count = 0, attentionIcon = React.createElement(AttentionBellIcon, null), icon = React.createElement(BellIcon, null), className, isExpanded = false } = _a, props = __rest(_a, [\"isRead\", \"children\", \"variant\", \"count\", \"attentionIcon\", \"icon\", \"className\", \"isExpanded\"]);\n    let notificationChild = icon;\n    if (children !== undefined) {\n        notificationChild = children;\n    }\n    else if (variant === NotificationBadgeVariant.attention) {\n        notificationChild = attentionIcon;\n    }\n    return (React.createElement(Button, Object.assign({ variant: ButtonVariant.plain, className: className, \"aria-expanded\": isExpanded }, props),\n        React.createElement(\"span\", { className: css(styles.notificationBadge, styles.modifiers[variant], isExpanded && styles.modifiers.expanded) },\n            notificationChild,\n            count > 0 && React.createElement(\"span\", { className: css(styles.notificationBadgeCount) }, count))));\n};\nNotificationBadge.displayName = 'NotificationBadge';\n//# sourceMappingURL=NotificationBadge.js.map"]},"metadata":{},"sourceType":"module"}