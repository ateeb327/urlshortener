{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { cellActions } from '../Table/utils/decorators/cellActions';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { compoundExpand } from '../Table/utils/decorators/compoundExpand';\nimport { cellWidth } from '../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { favoritable } from '../Table/utils/decorators/favoritable';\nimport { draggable } from '../Table/utils/decorators/draggable';\nimport { treeRow } from '../Table/utils/decorators/treeRow';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nconst TdBase = _a => {\n  var {\n      children,\n      className,\n      isActionCell = false,\n      component = 'td',\n      dataLabel,\n      textCenter = false,\n      modifier,\n      select = null,\n      actions = null,\n      expand = null,\n      treeRow: treeRowProp = null,\n      compoundExpand: compoundExpandProp = null,\n      noPadding,\n      width,\n      visibility,\n      innerRef,\n      favorites = null,\n      draggableRow: draggableRowProp = null,\n      tooltip = '',\n      onMouseEnter: onMouseEnterProp = () => {},\n      isStickyColumn = false,\n      hasRightBorder = false,\n      hasLeftBorder = false,\n      stickyMinWidth = '120px',\n      stickyLeftOffset,\n      stickyRightOffset\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"isActionCell\", \"component\", \"dataLabel\", \"textCenter\", \"modifier\", \"select\", \"actions\", \"expand\", \"treeRow\", \"compoundExpand\", \"noPadding\", \"width\", \"visibility\", \"innerRef\", \"favorites\", \"draggableRow\", \"tooltip\", \"onMouseEnter\", \"isStickyColumn\", \"hasRightBorder\", \"hasLeftBorder\", \"stickyMinWidth\", \"stickyLeftOffset\", \"stickyRightOffset\"]);\n  const [showTooltip, setShowTooltip] = React.useState(false);\n  const onMouseEnter = event => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      !showTooltip && setShowTooltip(true);\n    } else {\n      showTooltip && setShowTooltip(false);\n    }\n    onMouseEnterProp(event);\n  };\n  const selectParams = select ? selectable(children, {\n    rowIndex: select.rowIndex,\n    rowData: {\n      selected: select.isSelected,\n      disableSelection: select === null || select === void 0 ? void 0 : select.disable,\n      props: select === null || select === void 0 ? void 0 : select.props\n    },\n    column: {\n      extraParams: {\n        onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n        selectVariant: select.variant || 'checkbox'\n      }\n    }\n  }) : null;\n  const favoriteParams = favorites ? favoritable(null, {\n    rowIndex: favorites === null || favorites === void 0 ? void 0 : favorites.rowIndex,\n    rowData: {\n      favorited: favorites.isFavorited,\n      favoritesProps: favorites === null || favorites === void 0 ? void 0 : favorites.props\n    },\n    column: {\n      extraParams: {\n        onFavorite: favorites === null || favorites === void 0 ? void 0 : favorites.onFavorite\n      }\n    }\n  }) : null;\n  const draggableParams = draggableRowProp !== null ? draggable(null, {\n    rowData: {\n      id: draggableRowProp.id\n    }\n  }) : null;\n  const actionParamsFunc = actions ? cellActions(actions.items, null, null) : null;\n  const actionParams = actionParamsFunc ? actionParamsFunc(null, {\n    rowIndex: actions === null || actions === void 0 ? void 0 : actions.rowIndex,\n    rowData: {\n      disableActions: actions === null || actions === void 0 ? void 0 : actions.disable\n    },\n    column: {\n      extraParams: {\n        dropdownPosition: actions === null || actions === void 0 ? void 0 : actions.dropdownPosition,\n        dropdownDirection: actions === null || actions === void 0 ? void 0 : actions.dropdownDirection,\n        menuAppendTo: actions === null || actions === void 0 ? void 0 : actions.menuAppendTo,\n        actionsToggle: actions === null || actions === void 0 ? void 0 : actions.actionsToggle\n      }\n    }\n  }) : null;\n  const expandableParams = expand !== null ? collapsible(null, {\n    rowIndex: expand.rowIndex,\n    columnIndex: expand === null || expand === void 0 ? void 0 : expand.columnIndex,\n    rowData: {\n      isOpen: expand.isExpanded\n    },\n    column: {\n      extraParams: {\n        onCollapse: expand === null || expand === void 0 ? void 0 : expand.onToggle,\n        expandId: expand === null || expand === void 0 ? void 0 : expand.expandId\n      }\n    }\n  }) : null;\n  const compoundParams = compoundExpandProp !== null ? compoundExpand({\n    title: children,\n    props: {\n      isOpen: compoundExpandProp.isExpanded\n    }\n  }, {\n    rowIndex: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.rowIndex,\n    columnIndex: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.columnIndex,\n    column: {\n      extraParams: {\n        onExpand: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.onToggle,\n        expandId: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.expandId\n      }\n    }\n  }) : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility ? classNames(...visibility.map(vis => Visibility[vis]))() : null;\n  const treeRowParams = treeRowProp !== null ? treeRow(treeRowProp.onCollapse, treeRowProp.onCheckChange, treeRowProp.onToggleRowDetails)({\n    title: children\n  }, {\n    rowIndex: treeRowProp.rowIndex,\n    rowData: {\n      props: treeRowProp.props\n    }\n  }) : null;\n  const merged = mergeProps(selectParams, actionParams, expandableParams, compoundParams, widthParams, visibilityParams, favoriteParams, treeRowParams, draggableParams);\n  const {\n      // selectable adds this but we don't want it\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isVisible = null,\n      children: mergedChildren = null,\n      className: mergedClassName = '',\n      component: MergedComponent = component\n    } = merged,\n    mergedProps = __rest(merged, [\"isVisible\", \"children\", \"className\", \"component\"]);\n  const treeTableTitleCell = className && className.includes('pf-c-table__tree-view-title-cell') || mergedClassName && mergedClassName.includes('pf-c-table__tree-view-title-cell');\n  const cell = React.createElement(MergedComponent, Object.assign({}, !treeTableTitleCell && {\n    'data-label': dataLabel\n  }, {\n    onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp,\n    className: css(className, isActionCell && styles.tableAction, textCenter && styles.modifiers.center, noPadding && styles.modifiers.noPadding, isStickyColumn && scrollStyles.tableStickyColumn, hasRightBorder && scrollStyles.modifiers.borderRight, hasLeftBorder && scrollStyles.modifiers.borderLeft, styles.modifiers[modifier], draggableParams && styles.tableDraggable, mergedClassName),\n    ref: innerRef\n  }, mergedProps, props, isStickyColumn && {\n    style: Object.assign({\n      '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined,\n      '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined,\n      right: stickyRightOffset ? stickyRightOffset : 0\n    }, props.style)\n  }), mergedChildren || children);\n  const canMakeDefaultTooltip = tooltip === '' ? typeof children === 'string' : true;\n  return tooltip !== null && canMakeDefaultTooltip && showTooltip ? React.createElement(Tooltip, {\n    content: tooltip || tooltip === '' && children,\n    isVisible: true\n  }, cell) : cell;\n};\nexport const Td = React.forwardRef((props, ref) => React.createElement(TdBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTd.displayName = 'Td';","map":{"version":3,"sources":["../../../../src/components/TableComposable/Td.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { cellActions } from '../Table/utils/decorators/cellActions';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { compoundExpand } from '../Table/utils/decorators/compoundExpand';\nimport { cellWidth } from '../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { favoritable } from '../Table/utils/decorators/favoritable';\nimport { draggable } from '../Table/utils/decorators/draggable';\nimport { treeRow } from '../Table/utils/decorators/treeRow';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nconst TdBase = (_a) => {\n    var { children, className, isActionCell = false, component = 'td', dataLabel, textCenter = false, modifier, select = null, actions = null, expand = null, treeRow: treeRowProp = null, compoundExpand: compoundExpandProp = null, noPadding, width, visibility, innerRef, favorites = null, draggableRow: draggableRowProp = null, tooltip = '', onMouseEnter: onMouseEnterProp = () => { }, isStickyColumn = false, hasRightBorder = false, hasLeftBorder = false, stickyMinWidth = '120px', stickyLeftOffset, stickyRightOffset } = _a, props = __rest(_a, [\"children\", \"className\", \"isActionCell\", \"component\", \"dataLabel\", \"textCenter\", \"modifier\", \"select\", \"actions\", \"expand\", \"treeRow\", \"compoundExpand\", \"noPadding\", \"width\", \"visibility\", \"innerRef\", \"favorites\", \"draggableRow\", \"tooltip\", \"onMouseEnter\", \"isStickyColumn\", \"hasRightBorder\", \"hasLeftBorder\", \"stickyMinWidth\", \"stickyLeftOffset\", \"stickyRightOffset\"]);\n    const [showTooltip, setShowTooltip] = React.useState(false);\n    const onMouseEnter = (event) => {\n        if (event.target.offsetWidth < event.target.scrollWidth) {\n            !showTooltip && setShowTooltip(true);\n        }\n        else {\n            showTooltip && setShowTooltip(false);\n        }\n        onMouseEnterProp(event);\n    };\n    const selectParams = select\n        ? selectable(children, {\n            rowIndex: select.rowIndex,\n            rowData: {\n                selected: select.isSelected,\n                disableSelection: select === null || select === void 0 ? void 0 : select.disable,\n                props: select === null || select === void 0 ? void 0 : select.props\n            },\n            column: {\n                extraParams: {\n                    onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n                    selectVariant: select.variant || 'checkbox'\n                }\n            }\n        })\n        : null;\n    const favoriteParams = favorites\n        ? favoritable(null, {\n            rowIndex: favorites === null || favorites === void 0 ? void 0 : favorites.rowIndex,\n            rowData: {\n                favorited: favorites.isFavorited,\n                favoritesProps: favorites === null || favorites === void 0 ? void 0 : favorites.props\n            },\n            column: {\n                extraParams: {\n                    onFavorite: favorites === null || favorites === void 0 ? void 0 : favorites.onFavorite\n                }\n            }\n        })\n        : null;\n    const draggableParams = draggableRowProp !== null\n        ? draggable(null, {\n            rowData: {\n                id: draggableRowProp.id\n            }\n        })\n        : null;\n    const actionParamsFunc = actions ? cellActions(actions.items, null, null) : null;\n    const actionParams = actionParamsFunc\n        ? actionParamsFunc(null, {\n            rowIndex: actions === null || actions === void 0 ? void 0 : actions.rowIndex,\n            rowData: {\n                disableActions: actions === null || actions === void 0 ? void 0 : actions.disable\n            },\n            column: {\n                extraParams: {\n                    dropdownPosition: actions === null || actions === void 0 ? void 0 : actions.dropdownPosition,\n                    dropdownDirection: actions === null || actions === void 0 ? void 0 : actions.dropdownDirection,\n                    menuAppendTo: actions === null || actions === void 0 ? void 0 : actions.menuAppendTo,\n                    actionsToggle: actions === null || actions === void 0 ? void 0 : actions.actionsToggle\n                }\n            }\n        })\n        : null;\n    const expandableParams = expand !== null\n        ? collapsible(null, {\n            rowIndex: expand.rowIndex,\n            columnIndex: expand === null || expand === void 0 ? void 0 : expand.columnIndex,\n            rowData: {\n                isOpen: expand.isExpanded\n            },\n            column: {\n                extraParams: {\n                    onCollapse: expand === null || expand === void 0 ? void 0 : expand.onToggle,\n                    expandId: expand === null || expand === void 0 ? void 0 : expand.expandId\n                }\n            }\n        })\n        : null;\n    const compoundParams = compoundExpandProp !== null\n        ? compoundExpand({\n            title: children,\n            props: {\n                isOpen: compoundExpandProp.isExpanded\n            }\n        }, {\n            rowIndex: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.rowIndex,\n            columnIndex: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.columnIndex,\n            column: {\n                extraParams: {\n                    onExpand: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.onToggle,\n                    expandId: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.expandId\n                }\n            }\n        })\n        : null;\n    const widthParams = width ? cellWidth(width)() : null;\n    const visibilityParams = visibility\n        ? classNames(...visibility.map((vis) => Visibility[vis]))()\n        : null;\n    const treeRowParams = treeRowProp !== null\n        ? treeRow(treeRowProp.onCollapse, treeRowProp.onCheckChange, treeRowProp.onToggleRowDetails)({\n            title: children\n        }, {\n            rowIndex: treeRowProp.rowIndex,\n            rowData: {\n                props: treeRowProp.props\n            }\n        })\n        : null;\n    const merged = mergeProps(selectParams, actionParams, expandableParams, compoundParams, widthParams, visibilityParams, favoriteParams, treeRowParams, draggableParams);\n    const { \n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null, children: mergedChildren = null, className: mergedClassName = '', component: MergedComponent = component } = merged, mergedProps = __rest(merged, [\"isVisible\", \"children\", \"className\", \"component\"]);\n    const treeTableTitleCell = (className && className.includes('pf-c-table__tree-view-title-cell')) ||\n        (mergedClassName && mergedClassName.includes('pf-c-table__tree-view-title-cell'));\n    const cell = (React.createElement(MergedComponent, Object.assign({}, (!treeTableTitleCell && { 'data-label': dataLabel }), { onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp, className: css(className, isActionCell && styles.tableAction, textCenter && styles.modifiers.center, noPadding && styles.modifiers.noPadding, isStickyColumn && scrollStyles.tableStickyColumn, hasRightBorder && scrollStyles.modifiers.borderRight, hasLeftBorder && scrollStyles.modifiers.borderLeft, styles.modifiers[modifier], draggableParams && styles.tableDraggable, mergedClassName), ref: innerRef }, mergedProps, props, (isStickyColumn && {\n        style: Object.assign({ '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined, '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined, right: stickyRightOffset ? stickyRightOffset : 0 }, props.style)\n    })), mergedChildren || children));\n    const canMakeDefaultTooltip = tooltip === '' ? typeof children === 'string' : true;\n    return tooltip !== null && canMakeDefaultTooltip && showTooltip ? (React.createElement(Tooltip, { content: tooltip || (tooltip === '' && children), isVisible: true }, cell)) : (cell);\n};\nexport const Td = React.forwardRef((props, ref) => (React.createElement(TdBase, Object.assign({}, props, { innerRef: ref }))));\nTd.displayName = 'Td';\n//# sourceMappingURL=Td.js.map"]},"metadata":{},"sourceType":"module"}