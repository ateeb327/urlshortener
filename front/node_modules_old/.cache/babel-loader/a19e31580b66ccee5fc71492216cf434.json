{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nexport const LoginForm = _a => {\n  var {\n      noAutoFocus = false,\n      className = '',\n      showHelperText = false,\n      helperText = null,\n      helperTextIcon = null,\n      usernameLabel = 'Username',\n      usernameValue = '',\n      onChangeUsername = () => undefined,\n      isValidUsername = true,\n      passwordLabel = 'Password',\n      passwordValue = '',\n      onChangePassword = () => undefined,\n      isShowPasswordEnabled = false,\n      hidePasswordAriaLabel = 'Hide password',\n      showPasswordAriaLabel = 'Show password',\n      isValidPassword = true,\n      loginButtonLabel = 'Log In',\n      isLoginButtonDisabled = false,\n      onLoginButtonClick = () => undefined,\n      rememberMeLabel = '',\n      isRememberMeChecked = false,\n      onChangeRememberMe = () => undefined\n    } = _a,\n    props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isShowPasswordEnabled\", \"hidePasswordAriaLabel\", \"showPasswordAriaLabel\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n  const [passwordHidden, setPasswordHidden] = React.useState(true);\n  const passwordInput = React.createElement(TextInput, {\n    isRequired: true,\n    type: passwordHidden ? 'password' : 'text',\n    id: \"pf-login-password-id\",\n    name: \"pf-login-password-id\",\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    value: passwordValue,\n    onChange: onChangePassword\n  });\n  return React.createElement(Form, Object.assign({\n    className: className\n  }, props), React.createElement(FormHelperText, {\n    isError: !isValidUsername || !isValidPassword,\n    isHidden: !showHelperText,\n    icon: helperTextIcon\n  }, helperText), React.createElement(FormGroup, {\n    label: usernameLabel,\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-username-id\"\n  }, React.createElement(TextInput, {\n    autoFocus: !noAutoFocus,\n    id: \"pf-login-username-id\",\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    type: \"text\",\n    name: \"pf-login-username-id\",\n    value: usernameValue,\n    onChange: onChangeUsername\n  })), React.createElement(FormGroup, {\n    label: passwordLabel,\n    isRequired: true,\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-password-id\"\n  }, isShowPasswordEnabled && React.createElement(InputGroup, null, passwordInput, React.createElement(Button, {\n    variant: \"control\",\n    onClick: () => setPasswordHidden(!passwordHidden),\n    \"aria-label\": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel\n  }, passwordHidden ? React.createElement(EyeIcon, null) : React.createElement(EyeSlashIcon, null))), !isShowPasswordEnabled && passwordInput), rememberMeLabel.length > 0 && React.createElement(FormGroup, {\n    fieldId: \"pf-login-remember-me-id\"\n  }, React.createElement(Checkbox, {\n    id: \"pf-login-remember-me-id\",\n    label: rememberMeLabel,\n    isChecked: isRememberMeChecked,\n    onChange: onChangeRememberMe\n  })), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onLoginButtonClick,\n    isBlock: true,\n    isDisabled: isLoginButtonDisabled\n  }, loginButtonLabel)));\n};\nLoginForm.displayName = 'LoginForm';","map":{"version":3,"sources":["../../../../src/components/LoginPage/LoginForm.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,QAAQ,SAAS;AACtE,SAAS,SAAS,QAAQ,cAAc;AACxC,SAAS,MAAM,QAAQ,WAAW;AAClC,SAAS,QAAQ,QAAQ,aAAa;AACtC,SAAS,gBAAgB,QAAQ,yBAAyB;AAC1D,SAAS,UAAU,QAAQ,eAAe;AAC1C,OAAO,YAAY,MAAM,uDAAuD;AAChF,OAAO,OAAO,MAAM,iDAAiD;AAiDrE,OAAO,MAAM,SAAS,GAA6C,EAwBlD,IAAI;MAxB8C;MACjE,WAAW,GAAG,KAAK;MACnB,SAAS,GAAG,EAAE;MACd,cAAc,GAAG,KAAK;MACtB,UAAU,GAAG,IAAI;MACjB,cAAc,GAAG,IAAI;MACrB,aAAa,GAAG,UAAU;MAC1B,aAAa,GAAG,EAAE;MAClB,gBAAgB,GAAG,CAAA,KAAM,SAAgB;MACzC,eAAe,GAAG,IAAI;MACtB,aAAa,GAAG,UAAU;MAC1B,aAAa,GAAG,EAAE;MAClB,gBAAgB,GAAG,CAAA,KAAM,SAAgB;MACzC,qBAAqB,GAAG,KAAK;MAC7B,qBAAqB,GAAG,eAAe;MACvC,qBAAqB,GAAG,eAAe;MACvC,eAAe,GAAG,IAAI;MACtB,gBAAgB,GAAG,QAAQ;MAC3B,qBAAqB,GAAG,KAAK;MAC7B,kBAAkB,GAAG,CAAA,KAAM,SAAgB;MAC3C,eAAe,GAAG,EAAE;MACpB,mBAAmB,GAAG,KAAK;MAC3B,kBAAkB,GAAG,CAAA,KAAM;IAAgB,CAAA,GAAA,EAE5B;IADZ,KAAK,GAAA,MAAA,CAAA,EAAA,EAvByD,CAAA,aAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,uBAAA,EAAA,uBAAA,EAAA,uBAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,uBAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,oBAAA,CAwBlE,CADS;EAER,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;EAEhE,MAAM,aAAa,GACjB,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IACR,UAAU,EAAA,IAAA;IACV,IAAI,EAAE,cAAc,GAAG,UAAU,GAAG,MAAM;IAC1C,EAAE,EAAC,sBAAsB;IACzB,IAAI,EAAC,sBAAsB;IAC3B,SAAS,EAAE,eAAe,GAAG,gBAAgB,CAAC,OAAO,GAAG,gBAAgB,CAAC,KAAK;IAC9E,KAAK,EAAE,aAAa;IACpB,QAAQ,EAAE;EAAgB,CAAA,CAE7B;EAED,OACE,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;IAAC,SAAS,EAAE;EAAS,CAAA,EAAM,KAAK,CAAA,EACnC,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA;IAAC,OAAO,EAAE,CAAC,eAAe,IAAI,CAAC,eAAe;IAAE,QAAQ,EAAE,CAAC,cAAc;IAAE,IAAI,EAAE;EAAc,CAAA,EAC3G,UAAU,CACI,EACjB,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IACR,KAAK,EAAE,aAAa;IACpB,UAAU,EAAA,IAAA;IACV,SAAS,EAAE,eAAe,GAAG,gBAAgB,CAAC,OAAO,GAAG,gBAAgB,CAAC,KAAK;IAC9E,OAAO,EAAC;EAAsB,CAAA,EAE9B,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IACR,SAAS,EAAE,CAAC,WAAW;IACvB,EAAE,EAAC,sBAAsB;IACzB,UAAU,EAAA,IAAA;IACV,SAAS,EAAE,eAAe,GAAG,gBAAgB,CAAC,OAAO,GAAG,gBAAgB,CAAC,KAAK;IAC9E,IAAI,EAAC,MAAM;IACX,IAAI,EAAC,sBAAsB;IAC3B,KAAK,EAAE,aAAa;IACpB,QAAQ,EAAE;EAAgB,CAAA,CAC1B,CACQ,EACZ,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IACR,KAAK,EAAE,aAAa;IACpB,UAAU,EAAA,IAAA;IACV,SAAS,EAAE,eAAe,GAAG,gBAAgB,CAAC,OAAO,GAAG,gBAAgB,CAAC,KAAK;IAC9E,OAAO,EAAC;EAAsB,CAAA,EAE7B,qBAAqB,IACpB,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA,IAAA,EACR,aAAa,EACd,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;IACL,OAAO,EAAC,SAAS;IACjB,OAAO,EAAE,CAAA,KAAM,iBAAiB,CAAC,CAAC,cAAc,CAAC;IAAA,YAAA,EACrC,cAAc,GAAG,qBAAqB,GAAG;EAAqB,CAAA,EAEzE,cAAc,GAAG,KAAA,CAAA,aAAA,CAAC,OAAO,EAAA,IAAA,CAAG,GAAG,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA,IAAA,CAAG,CACzC,CAEZ,EACA,CAAC,qBAAqB,IAAI,aAAa,CAC9B,EACX,eAAe,CAAC,MAAM,GAAG,CAAC,IACzB,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IAAC,OAAO,EAAC;EAAyB,CAAA,EAC1C,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA;IACP,EAAE,EAAC,yBAAyB;IAC5B,KAAK,EAAE,eAAe;IACtB,SAAS,EAAE,mBAAmB;IAC9B,QAAQ,EAAE;EAAkB,CAAA,CAC5B,CAEL,EACD,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA,IAAA,EACV,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;IAAC,OAAO,EAAC,SAAS;IAAC,IAAI,EAAC,QAAQ;IAAC,OAAO,EAAE,kBAAkB;IAAE,OAAO,EAAA,IAAA;IAAC,UAAU,EAAE;EAAqB,CAAA,EAC3G,gBAAgB,CACV,CACG,CACT;AAEX,CAAC;AACD,SAAS,CAAC,WAAW,GAAG,WAAW","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nexport const LoginForm = (_a) => {\n    var { noAutoFocus = false, className = '', showHelperText = false, helperText = null, helperTextIcon = null, usernameLabel = 'Username', usernameValue = '', onChangeUsername = () => undefined, isValidUsername = true, passwordLabel = 'Password', passwordValue = '', onChangePassword = () => undefined, isShowPasswordEnabled = false, hidePasswordAriaLabel = 'Hide password', showPasswordAriaLabel = 'Show password', isValidPassword = true, loginButtonLabel = 'Log In', isLoginButtonDisabled = false, onLoginButtonClick = () => undefined, rememberMeLabel = '', isRememberMeChecked = false, onChangeRememberMe = () => undefined } = _a, props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isShowPasswordEnabled\", \"hidePasswordAriaLabel\", \"showPasswordAriaLabel\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n    const [passwordHidden, setPasswordHidden] = React.useState(true);\n    const passwordInput = (React.createElement(TextInput, { isRequired: true, type: passwordHidden ? 'password' : 'text', id: \"pf-login-password-id\", name: \"pf-login-password-id\", validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error, value: passwordValue, onChange: onChangePassword }));\n    return (React.createElement(Form, Object.assign({ className: className }, props),\n        React.createElement(FormHelperText, { isError: !isValidUsername || !isValidPassword, isHidden: !showHelperText, icon: helperTextIcon }, helperText),\n        React.createElement(FormGroup, { label: usernameLabel, isRequired: true, validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error, fieldId: \"pf-login-username-id\" },\n            React.createElement(TextInput, { autoFocus: !noAutoFocus, id: \"pf-login-username-id\", isRequired: true, validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error, type: \"text\", name: \"pf-login-username-id\", value: usernameValue, onChange: onChangeUsername })),\n        React.createElement(FormGroup, { label: passwordLabel, isRequired: true, validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error, fieldId: \"pf-login-password-id\" },\n            isShowPasswordEnabled && (React.createElement(InputGroup, null,\n                passwordInput,\n                React.createElement(Button, { variant: \"control\", onClick: () => setPasswordHidden(!passwordHidden), \"aria-label\": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel }, passwordHidden ? React.createElement(EyeIcon, null) : React.createElement(EyeSlashIcon, null)))),\n            !isShowPasswordEnabled && passwordInput),\n        rememberMeLabel.length > 0 && (React.createElement(FormGroup, { fieldId: \"pf-login-remember-me-id\" },\n            React.createElement(Checkbox, { id: \"pf-login-remember-me-id\", label: rememberMeLabel, isChecked: isRememberMeChecked, onChange: onChangeRememberMe }))),\n        React.createElement(ActionGroup, null,\n            React.createElement(Button, { variant: \"primary\", type: \"submit\", onClick: onLoginButtonClick, isBlock: true, isDisabled: isLoginButtonDisabled }, loginButtonLabel))));\n};\nLoginForm.displayName = 'LoginForm';\n//# sourceMappingURL=LoginForm.js.map"]},"metadata":{},"sourceType":"module"}