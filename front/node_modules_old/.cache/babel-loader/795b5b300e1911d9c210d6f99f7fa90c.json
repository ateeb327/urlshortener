{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\nexport var spinnerSize;\n(function (spinnerSize) {\n  spinnerSize[\"sm\"] = \"sm\";\n  spinnerSize[\"md\"] = \"md\";\n  spinnerSize[\"lg\"] = \"lg\";\n  spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize || (spinnerSize = {}));\nexport const Spinner = _a => {\n  var {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      className = '',\n      size = 'xl',\n      'aria-valuetext': ariaValueText = 'Loading...',\n      isSVG = false,\n      diameter,\n      isInline = false,\n      'aria-label': ariaLabel,\n      'aria-labelledBy': ariaLabelledBy\n    } = _a,\n    props = __rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", \"isInline\", 'aria-label', 'aria-labelledBy']);\n  const Component = isSVG ? 'svg' : 'span';\n  return React.createElement(Component, Object.assign({\n    className: css(styles.spinner, isInline ? styles.modifiers.inline : styles.modifiers[size], className),\n    role: \"progressbar\",\n    \"aria-valuetext\": ariaValueText\n  }, isSVG && {\n    viewBox: '0 0 100 100'\n  }, diameter && {\n    style: {\n      '--pf-c-spinner--diameter': diameter\n    }\n  }, ariaLabel && {\n    'aria-label': ariaLabel\n  }, ariaLabelledBy && {\n    'aria-labelledBy': ariaLabelledBy\n  }, !ariaLabel && !ariaLabelledBy && {\n    'aria-label': 'Contents'\n  }, props), isSVG ? React.createElement(\"circle\", {\n    className: styles.spinnerPath,\n    cx: \"50\",\n    cy: \"50\",\n    r: \"45\",\n    fill: \"none\"\n  }) : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.spinnerClipper)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerLeadBall)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerTailBall)\n  })));\n};\nSpinner.displayName = 'Spinner';","map":{"version":3,"sources":["../../../../src/components/Spinner/Spinner.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,yDAAyD;AAC5E,SAAS,GAAG,QAAQ,0BAA0B;AAE9C,OAAA,IAAY,WAKX;AALD,CAAA,UAAY,WAAW,EAAA;EACrB,WAAA,CAAA,IAAA,CAAA,GAAA,IAAS;EACT,WAAA,CAAA,IAAA,CAAA,GAAA,IAAS;EACT,WAAA,CAAA,IAAA,CAAA,GAAA,IAAS;EACT,WAAA,CAAA,IAAA,CAAA,GAAA,IAAS;AACX,CAAC,EALW,WAAW,KAAX,WAAW,GAAA,CAAA,CAAA,CAAA,CAAA;AA0BvB,OAAO,MAAM,OAAO,GAA2C,EAWhD,IAAI;MAX4C;MAC7D;MACA,SAAS,GAAG,EAAE;MACd,IAAI,GAAG,IAAI;MACX,gBAAgB,EAAE,aAAa,GAAG,YAAY;MAC9C,KAAK,GAAG,KAAK;MACb,QAAQ;MACR,QAAQ,GAAG,KAAK;MAChB,YAAY,EAAE,SAAS;MACvB,iBAAiB,EAAE;IAAc,CAAA,GAAA,EAEpB;IADV,KAAK,GAAA,MAAA,CAAA,EAAA,EAVqD,CAAA,WAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,iBAAA,CAW9D,CADS;EAER,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK,GAAI,MAAc;EAEjD,OACE,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA,MAAA,CAAA,MAAA,CAAA;IACR,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC;IACtG,IAAI,EAAC,aAAa;IAAA,gBAAA,EACF;EAAa,CAAA,EACxB,KAAK,IAAI;IAAE,OAAO,EAAE;EAAa,CAAE,EACnC,QAAQ,IAAI;IAAE,KAAK,EAAE;MAAE,0BAA0B,EAAE;IAAQ;EAAE,CAAE,EAC/D,SAAS,IAAI;IAAE,YAAY,EAAE;EAAS,CAAE,EACxC,cAAc,IAAI;IAAE,iBAAiB,EAAE;EAAc,CAAE,EACvD,CAAC,SAAS,IAAI,CAAC,cAAc,IAAI;IAAE,YAAY,EAAE;EAAU,CAAE,EAC9D,KAAK,CAAA,EAER,KAAK,GACJ,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IAAQ,SAAS,EAAE,MAAM,CAAC,WAAW;IAAE,EAAE,EAAC,IAAI;IAAC,EAAE,EAAC,IAAI;IAAC,CAAC,EAAC,IAAI;IAAC,IAAI,EAAC;EAAM,CAAA,CAAG,GAE5E,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAQ,EAAA,IAAA,EACb,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,cAAc;EAAC,CAAA,CAAI,EAC/C,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe;EAAC,CAAA,CAAI,EAChD,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe;EAAC,CAAA,CAAI,CAEnD,CACS;AAEhB,CAAC;AACD,OAAO,CAAC,WAAW,GAAG,SAAS","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\nexport var spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize || (spinnerSize = {}));\nexport const Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter, isInline = false, 'aria-label': ariaLabel, 'aria-labelledBy': ariaLabelledBy } = _a, props = __rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", \"isInline\", 'aria-label', 'aria-labelledBy']);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: css(styles.spinner, isInline ? styles.modifiers.inline : styles.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), (ariaLabel && { 'aria-label': ariaLabel }), (ariaLabelledBy && { 'aria-labelledBy': ariaLabelledBy }), (!ariaLabel && !ariaLabelledBy && { 'aria-label': 'Contents' }), props), isSVG ? (React.createElement(\"circle\", { className: styles.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: css(styles.spinnerClipper) }),\n        React.createElement(\"span\", { className: css(styles.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: css(styles.spinnerTailBall) })))));\n};\nSpinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map"]},"metadata":{},"sourceType":"module"}