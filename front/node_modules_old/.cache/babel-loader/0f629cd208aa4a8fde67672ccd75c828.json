{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { trimLeft } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var TextInputTypes;\n(function (TextInputTypes) {\n  TextInputTypes[\"text\"] = \"text\";\n  TextInputTypes[\"date\"] = \"date\";\n  TextInputTypes[\"datetimeLocal\"] = \"datetime-local\";\n  TextInputTypes[\"email\"] = \"email\";\n  TextInputTypes[\"month\"] = \"month\";\n  TextInputTypes[\"number\"] = \"number\";\n  TextInputTypes[\"password\"] = \"password\";\n  TextInputTypes[\"search\"] = \"search\";\n  TextInputTypes[\"tel\"] = \"tel\";\n  TextInputTypes[\"time\"] = \"time\";\n  TextInputTypes[\"url\"] = \"url\";\n})(TextInputTypes || (TextInputTypes = {}));\nexport var TextInputReadOnlyVariant;\n(function (TextInputReadOnlyVariant) {\n  TextInputReadOnlyVariant[\"default\"] = \"default\";\n  TextInputReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextInputReadOnlyVariant || (TextInputReadOnlyVariant = {}));\nexport class TextInputBase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.observer = () => {};\n    this.handleChange = event => {\n      if (this.props.onChange) {\n        this.props.onChange(event.currentTarget.value, event);\n      }\n    };\n    this.handleResize = () => {\n      const inputRef = this.props.innerRef || this.inputRef;\n      if (inputRef && inputRef.current) {\n        trimLeft(inputRef.current, String(this.props.value));\n      }\n    };\n    this.restoreText = () => {\n      const inputRef = this.props.innerRef || this.inputRef;\n      // restore the value\n      inputRef.current.value = String(this.props.value);\n      // make sure we still see the rightmost value to preserve cursor click position\n      inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n    };\n    this.onFocus = event => {\n      const {\n        isLeftTruncated,\n        onFocus\n      } = this.props;\n      if (isLeftTruncated) {\n        this.restoreText();\n      }\n      onFocus && onFocus(event);\n    };\n    this.onBlur = event => {\n      const {\n        isLeftTruncated,\n        onBlur\n      } = this.props;\n      if (isLeftTruncated) {\n        this.handleResize();\n      }\n      onBlur && onBlur(event);\n    };\n    this.sanitizeInputValue = value => typeof value === 'string' ? value.replace(/\\n/g, ' ') : value;\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // eslint-disable-next-line no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(TextInputBase.displayName)\n    };\n  }\n  componentDidMount() {\n    if (this.props.isLeftTruncated) {\n      const inputRef = this.props.innerRef || this.inputRef;\n      this.observer = getResizeObserver(inputRef.current, this.handleResize);\n      this.handleResize();\n    }\n  }\n  componentWillUnmount() {\n    if (this.props.isLeftTruncated) {\n      this.observer();\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        innerRef,\n        className,\n        type,\n        value,\n        validated,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange,\n        onFocus,\n        onBlur,\n        isLeftTruncated,\n        isReadOnly,\n        readOnly,\n        readOnlyVariant,\n        isRequired,\n        isDisabled,\n        isIconSprite,\n        iconVariant,\n        customIconUrl,\n        customIconDimensions,\n        ouiaId,\n        ouiaSafe\n      } = _a,\n      props = __rest(_a, [\"innerRef\", \"className\", \"type\", \"value\", \"validated\", \"onChange\", \"onFocus\", \"onBlur\", \"isLeftTruncated\", \"isReadOnly\", \"readOnly\", \"readOnlyVariant\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"iconVariant\", \"customIconUrl\", \"customIconDimensions\", \"ouiaId\", \"ouiaSafe\"]);\n    const customIconStyle = {};\n    if (customIconUrl) {\n      customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n    }\n    if (customIconDimensions) {\n      customIconStyle.backgroundSize = customIconDimensions;\n    }\n    return React.createElement(\"input\", Object.assign({}, props, {\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, readOnlyVariant === 'plain' && styles.modifiers.plain, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, (iconVariant && iconVariant !== 'search' || customIconUrl) && styles.modifiers.icon, iconVariant && styles.modifiers[iconVariant], className),\n      onChange: this.handleChange,\n      type: type,\n      value: this.sanitizeInputValue(value),\n      \"aria-invalid\": props['aria-invalid'] ? props['aria-invalid'] : validated === ValidatedOptions.error,\n      required: isRequired,\n      disabled: isDisabled,\n      readOnly: !!readOnlyVariant || isReadOnly || readOnly,\n      ref: innerRef || this.inputRef\n    }, (customIconUrl || customIconDimensions) && {\n      style: customIconStyle\n    }, getOUIAProps(TextInput.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)));\n  }\n}\nTextInputBase.displayName = 'TextInputBase';\nTextInputBase.defaultProps = {\n  'aria-label': null,\n  className: '',\n  isRequired: false,\n  validated: 'default',\n  isDisabled: false,\n  isReadOnly: false,\n  isIconSprite: false,\n  type: TextInputTypes.text,\n  isLeftTruncated: false,\n  onChange: () => undefined,\n  ouiaSafe: true\n};\nexport const TextInput = React.forwardRef((props, ref) => React.createElement(TextInputBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextInput.displayName = 'TextInput';","map":{"version":3,"sources":["../../../../src/components/TextInput/TextInput.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { trimLeft } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var TextInputTypes;\n(function (TextInputTypes) {\n    TextInputTypes[\"text\"] = \"text\";\n    TextInputTypes[\"date\"] = \"date\";\n    TextInputTypes[\"datetimeLocal\"] = \"datetime-local\";\n    TextInputTypes[\"email\"] = \"email\";\n    TextInputTypes[\"month\"] = \"month\";\n    TextInputTypes[\"number\"] = \"number\";\n    TextInputTypes[\"password\"] = \"password\";\n    TextInputTypes[\"search\"] = \"search\";\n    TextInputTypes[\"tel\"] = \"tel\";\n    TextInputTypes[\"time\"] = \"time\";\n    TextInputTypes[\"url\"] = \"url\";\n})(TextInputTypes || (TextInputTypes = {}));\nexport var TextInputReadOnlyVariant;\n(function (TextInputReadOnlyVariant) {\n    TextInputReadOnlyVariant[\"default\"] = \"default\";\n    TextInputReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextInputReadOnlyVariant || (TextInputReadOnlyVariant = {}));\nexport class TextInputBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n        this.observer = () => { };\n        this.handleChange = (event) => {\n            if (this.props.onChange) {\n                this.props.onChange(event.currentTarget.value, event);\n            }\n        };\n        this.handleResize = () => {\n            const inputRef = this.props.innerRef || this.inputRef;\n            if (inputRef && inputRef.current) {\n                trimLeft(inputRef.current, String(this.props.value));\n            }\n        };\n        this.restoreText = () => {\n            const inputRef = this.props.innerRef || this.inputRef;\n            // restore the value\n            inputRef.current.value = String(this.props.value);\n            // make sure we still see the rightmost value to preserve cursor click position\n            inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n        };\n        this.onFocus = (event) => {\n            const { isLeftTruncated, onFocus } = this.props;\n            if (isLeftTruncated) {\n                this.restoreText();\n            }\n            onFocus && onFocus(event);\n        };\n        this.onBlur = (event) => {\n            const { isLeftTruncated, onBlur } = this.props;\n            if (isLeftTruncated) {\n                this.handleResize();\n            }\n            onBlur && onBlur(event);\n        };\n        this.sanitizeInputValue = (value) => typeof value === 'string' ? value.replace(/\\n/g, ' ') : value;\n        if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n            // eslint-disable-next-line no-console\n            console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n        }\n        this.state = {\n            ouiaStateId: getDefaultOUIAId(TextInputBase.displayName)\n        };\n    }\n    componentDidMount() {\n        if (this.props.isLeftTruncated) {\n            const inputRef = this.props.innerRef || this.inputRef;\n            this.observer = getResizeObserver(inputRef.current, this.handleResize);\n            this.handleResize();\n        }\n    }\n    componentWillUnmount() {\n        if (this.props.isLeftTruncated) {\n            this.observer();\n        }\n    }\n    render() {\n        const _a = this.props, { innerRef, className, type, value, validated, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, onFocus, onBlur, isLeftTruncated, isReadOnly, readOnly, readOnlyVariant, isRequired, isDisabled, isIconSprite, iconVariant, customIconUrl, customIconDimensions, ouiaId, ouiaSafe } = _a, props = __rest(_a, [\"innerRef\", \"className\", \"type\", \"value\", \"validated\", \"onChange\", \"onFocus\", \"onBlur\", \"isLeftTruncated\", \"isReadOnly\", \"readOnly\", \"readOnlyVariant\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"iconVariant\", \"customIconUrl\", \"customIconDimensions\", \"ouiaId\", \"ouiaSafe\"]);\n        const customIconStyle = {};\n        if (customIconUrl) {\n            customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n        }\n        if (customIconDimensions) {\n            customIconStyle.backgroundSize = customIconDimensions;\n        }\n        return (React.createElement(\"input\", Object.assign({}, props, { onFocus: this.onFocus, onBlur: this.onBlur, className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, readOnlyVariant === 'plain' && styles.modifiers.plain, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, ((iconVariant && iconVariant !== 'search') || customIconUrl) && styles.modifiers.icon, iconVariant && styles.modifiers[iconVariant], className), onChange: this.handleChange, type: type, value: this.sanitizeInputValue(value), \"aria-invalid\": props['aria-invalid'] ? props['aria-invalid'] : validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled, readOnly: !!readOnlyVariant || isReadOnly || readOnly, ref: innerRef || this.inputRef }, ((customIconUrl || customIconDimensions) && { style: customIconStyle }), getOUIAProps(TextInput.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe))));\n    }\n}\nTextInputBase.displayName = 'TextInputBase';\nTextInputBase.defaultProps = {\n    'aria-label': null,\n    className: '',\n    isRequired: false,\n    validated: 'default',\n    isDisabled: false,\n    isReadOnly: false,\n    isIconSprite: false,\n    type: TextInputTypes.text,\n    isLeftTruncated: false,\n    onChange: () => undefined,\n    ouiaSafe: true\n};\nexport const TextInput = React.forwardRef((props, ref) => (React.createElement(TextInputBase, Object.assign({}, props, { innerRef: ref }))));\nTextInput.displayName = 'TextInput';\n//# sourceMappingURL=TextInput.js.map"]},"metadata":{},"sourceType":"module"}