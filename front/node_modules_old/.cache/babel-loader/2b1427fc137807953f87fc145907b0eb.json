{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nexport class TreeViewRoot extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayName = 'TreeViewRoot';\n    this.treeRef = React.createRef();\n    this.handleKeys = event => {\n      var _a, _b, _c, _d, _e, _f, _g;\n      if (!this.treeRef.current.contains(event.target)) {\n        return;\n      }\n      const activeElement = document.activeElement;\n      const key = event.key;\n      const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')).filter(el => !el.classList.contains('pf-m-disabled'));\n      if (key === KeyTypes.Space) {\n        activeElement.click();\n        event.preventDefault();\n      }\n      handleArrows(event, treeItems, element => activeElement === element, undefined, [], undefined, true, true);\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains('pf-c-tree-view__node-toggle');\n        const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n        if (key === 'ArrowLeft') {\n          if (isExpandable && isExpanded) {\n            activeElement.click();\n          } else {\n            const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n            if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n              const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n              activeElement.tabIndex = -1;\n              if (parentButton) {\n                parentButton.tabIndex = 0;\n                parentButton.focus();\n              }\n            }\n          }\n        } else {\n          if (isExpandable && !isExpanded) {\n            activeElement.tabIndex = -1;\n            activeElement.click();\n            const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n            if (childElement) {\n              childElement.tabIndex = 0;\n              childElement.focus();\n            }\n          }\n        }\n        event.preventDefault();\n      }\n    };\n    this.handleKeysCheckbox = event => {\n      var _a, _b, _c, _d, _e;\n      if (!this.treeRef.current.contains(event.target)) {\n        return;\n      }\n      const activeElement = document.activeElement;\n      const key = event.key;\n      if (key === KeyTypes.Space) {\n        activeElement.click();\n        event.preventDefault();\n      }\n      const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node'));\n      handleArrows(event, treeNodes, element => element.contains(activeElement), element => element.querySelector('button,input'), [], undefined, true, true);\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        if (key === 'ArrowLeft') {\n          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n            ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) && activeElement.parentElement.previousSibling.focus();\n          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n            if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n              activeElement.previousSibling.firstChild.focus();\n            } else {\n              activeElement.previousSibling.focus();\n            }\n          }\n        } else {\n          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n            ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n            if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n              activeElement.nextSibling.firstChild.focus();\n            } else {\n              activeElement.nextSibling.focus();\n            }\n          }\n        }\n        event.preventDefault();\n      }\n    };\n    this.variantStyleModifiers = {\n      default: '',\n      compact: styles.modifiers.compact,\n      compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n    };\n  }\n  componentDidMount() {\n    var _a;\n    if (canUseDOM) {\n      window.addEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n    }\n    if (this.props.hasChecks || this.props.hasSelectableNodes) {\n      const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n      if (firstToggle) {\n        firstToggle.tabIndex = 0;\n      }\n      if (this.props.hasChecks) {\n        const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n        if (firstInput) {\n          firstInput.tabIndex = 0;\n        }\n      }\n      if (this.props.hasSelectableNodes) {\n        const firstTextButton = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-text')[0];\n        if (firstTextButton) {\n          firstTextButton.tabIndex = 0;\n        }\n      }\n    } else {\n      ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')[0]).tabIndex = 0;\n    }\n  }\n  componentWillUnmount() {\n    if (canUseDOM) {\n      window.removeEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n    }\n  }\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n      {\n        children,\n        hasChecks,\n        hasGuides,\n        variant,\n        className,\n        hasSelectableNodes\n      } = _a,\n      props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className),\n      ref: this.treeRef\n    }, props), children);\n  }\n}","map":{"version":3,"sources":["../../../../src/components/TreeView/TreeViewRoot.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nexport class TreeViewRoot extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'TreeViewRoot';\n        this.treeRef = React.createRef();\n        this.handleKeys = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')).filter(el => !el.classList.contains('pf-m-disabled'));\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            handleArrows(event, treeItems, (element) => activeElement === element, undefined, [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains('pf-c-tree-view__node-toggle');\n                const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n                if (key === 'ArrowLeft') {\n                    if (isExpandable && isExpanded) {\n                        activeElement.click();\n                    }\n                    else {\n                        const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n                        if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n                            const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n                            activeElement.tabIndex = -1;\n                            if (parentButton) {\n                                parentButton.tabIndex = 0;\n                                parentButton.focus();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (isExpandable && !isExpanded) {\n                        activeElement.tabIndex = -1;\n                        activeElement.click();\n                        const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n                        if (childElement) {\n                            childElement.tabIndex = 0;\n                            childElement.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.handleKeysCheckbox = (event) => {\n            var _a, _b, _c, _d, _e;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node'));\n            handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector('button,input'), [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                if (key === 'ArrowLeft') {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) &&\n                            activeElement.parentElement.previousSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n                        if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n                            activeElement.previousSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.previousSibling.focus();\n                        }\n                    }\n                }\n                else {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n                        if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n                            activeElement.nextSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.nextSibling.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.variantStyleModifiers = {\n            default: '',\n            compact: styles.modifiers.compact,\n            compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n        };\n    }\n    componentDidMount() {\n        var _a;\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n        if (this.props.hasChecks || this.props.hasSelectableNodes) {\n            const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n            if (firstToggle) {\n                firstToggle.tabIndex = 0;\n            }\n            if (this.props.hasChecks) {\n                const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n                if (firstInput) {\n                    firstInput.tabIndex = 0;\n                }\n            }\n            if (this.props.hasSelectableNodes) {\n                const firstTextButton = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-text')[0];\n                if (firstTextButton) {\n                    firstTextButton.tabIndex = 0;\n                }\n            }\n        }\n        else {\n            ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')[0]).tabIndex = 0;\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, hasChecks, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children));\n    }\n}\n//# sourceMappingURL=TreeViewRoot.js.map"]},"metadata":{},"sourceType":"module"}