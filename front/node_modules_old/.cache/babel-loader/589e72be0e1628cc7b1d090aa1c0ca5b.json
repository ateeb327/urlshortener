{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nexport const MultipleFileUploadStatusItem = _a => {\n  var {\n      className,\n      file,\n      fileIcon,\n      onReadStarted = () => {},\n      onReadFinished = () => {},\n      onReadSuccess = () => {},\n      onReadFail = () => {},\n      onClearClick = () => {},\n      customFileHandler,\n      fileName,\n      fileSize,\n      progressValue,\n      progressVariant,\n      progressAriaLabel,\n      progressAriaLabelledBy,\n      progressId,\n      progressAriaLiveMessage,\n      buttonAriaLabel = 'Remove from list',\n      progressHelperText\n    } = _a,\n    props = __rest(_a, [\"className\", \"file\", \"fileIcon\", \"onReadStarted\", \"onReadFinished\", \"onReadSuccess\", \"onReadFail\", \"onClearClick\", \"customFileHandler\", \"fileName\", \"fileSize\", \"progressValue\", \"progressVariant\", \"progressAriaLabel\", \"progressAriaLabelledBy\", \"progressId\", \"progressAriaLiveMessage\", \"buttonAriaLabel\", \"progressHelperText\"]);\n  const [loadPercentage, setLoadPercentage] = React.useState(0);\n  const [loadResult, setLoadResult] = React.useState();\n  function readFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.onprogress = data => {\n        if (data.lengthComputable) {\n          setLoadPercentage(data.loaded / data.total * 100);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n  React.useEffect(() => {\n    if (customFileHandler) {\n      customFileHandler(file);\n    } else {\n      onReadStarted(file);\n      readFile(file).then(data => {\n        setLoadResult('success');\n        setLoadPercentage(100);\n        onReadFinished(file);\n        onReadSuccess(data, file);\n      }).catch(error => {\n        onReadFinished(file);\n        onReadFail(error, file);\n        setLoadResult('danger');\n      });\n    }\n  }, []);\n  const getHumanReadableFileSize = size => {\n    const prefixes = ['', 'K', 'M', 'G', 'T'];\n    let prefixUnit = 0;\n    while (size >= 1000) {\n      prefixUnit += 1;\n      size = size / 1000;\n    }\n    if (prefixUnit >= prefixes.length) {\n      return 'File size too large';\n    }\n    return `${Math.round(size)}${prefixes[prefixUnit]}B`;\n  };\n  const value = progressValue || loadPercentage;\n  const variant = progressVariant || loadResult;\n  const title = React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgress\n  }, React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressText\n  }, fileName || (file === null || file === void 0 ? void 0 : file.name) || ''), React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressSize\n  }, fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0)));\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.multipleFileUploadStatusItem, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemIcon\n  }, fileIcon || React.createElement(FileIcon, null)), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemMain\n  }, React.createElement(\"div\", {\n    className: \"pf-screen-reader\",\n    \"aria-live\": \"polite\"\n  }, progressAriaLiveMessage && typeof progressAriaLiveMessage === 'function' && progressAriaLiveMessage(+loadPercentage.toFixed(2)), progressAriaLiveMessage && typeof progressAriaLiveMessage === 'string' && progressAriaLiveMessage, !progressAriaLiveMessage && `Progress value is ${progressValue || Math.floor(loadPercentage)}%.`), React.createElement(Progress, {\n    title: title,\n    value: value,\n    variant: variant,\n    \"aria-label\": progressAriaLabel,\n    \"aria-labelledby\": progressAriaLabelledBy,\n    id: progressId,\n    helperText: progressHelperText\n  })), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemClose\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": buttonAriaLabel,\n    onClick: onClearClick\n  }, React.createElement(TimesCircleIcon, null))));\n};\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';","map":{"version":3,"sources":["../../../../src/components/MultipleFileUpload/MultipleFileUploadStatusItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nexport const MultipleFileUploadStatusItem = (_a) => {\n    var { className, file, fileIcon, onReadStarted = () => { }, onReadFinished = () => { }, onReadSuccess = () => { }, onReadFail = () => { }, onClearClick = () => { }, customFileHandler, fileName, fileSize, progressValue, progressVariant, progressAriaLabel, progressAriaLabelledBy, progressId, progressAriaLiveMessage, buttonAriaLabel = 'Remove from list', progressHelperText } = _a, props = __rest(_a, [\"className\", \"file\", \"fileIcon\", \"onReadStarted\", \"onReadFinished\", \"onReadSuccess\", \"onReadFail\", \"onClearClick\", \"customFileHandler\", \"fileName\", \"fileSize\", \"progressValue\", \"progressVariant\", \"progressAriaLabel\", \"progressAriaLabelledBy\", \"progressId\", \"progressAriaLiveMessage\", \"buttonAriaLabel\", \"progressHelperText\"]);\n    const [loadPercentage, setLoadPercentage] = React.useState(0);\n    const [loadResult, setLoadResult] = React.useState();\n    function readFile(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = () => reject(reader.error);\n            reader.onprogress = data => {\n                if (data.lengthComputable) {\n                    setLoadPercentage((data.loaded / data.total) * 100);\n                }\n            };\n            reader.readAsDataURL(file);\n        });\n    }\n    React.useEffect(() => {\n        if (customFileHandler) {\n            customFileHandler(file);\n        }\n        else {\n            onReadStarted(file);\n            readFile(file)\n                .then(data => {\n                setLoadResult('success');\n                setLoadPercentage(100);\n                onReadFinished(file);\n                onReadSuccess(data, file);\n            })\n                .catch((error) => {\n                onReadFinished(file);\n                onReadFail(error, file);\n                setLoadResult('danger');\n            });\n        }\n    }, []);\n    const getHumanReadableFileSize = (size) => {\n        const prefixes = ['', 'K', 'M', 'G', 'T'];\n        let prefixUnit = 0;\n        while (size >= 1000) {\n            prefixUnit += 1;\n            size = size / 1000;\n        }\n        if (prefixUnit >= prefixes.length) {\n            return 'File size too large';\n        }\n        return `${Math.round(size)}${prefixes[prefixUnit]}B`;\n    };\n    const value = progressValue || loadPercentage;\n    const variant = progressVariant || loadResult;\n    const title = (React.createElement(\"span\", { className: styles.multipleFileUploadStatusItemProgress },\n        React.createElement(\"span\", { className: styles.multipleFileUploadStatusItemProgressText }, fileName || (file === null || file === void 0 ? void 0 : file.name) || ''),\n        React.createElement(\"span\", { className: styles.multipleFileUploadStatusItemProgressSize }, fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0))));\n    return (React.createElement(\"li\", Object.assign({ className: css(styles.multipleFileUploadStatusItem, className) }, props),\n        React.createElement(\"div\", { className: styles.multipleFileUploadStatusItemIcon }, fileIcon || React.createElement(FileIcon, null)),\n        React.createElement(\"div\", { className: styles.multipleFileUploadStatusItemMain },\n            React.createElement(\"div\", { className: \"pf-screen-reader\", \"aria-live\": \"polite\" },\n                progressAriaLiveMessage &&\n                    typeof progressAriaLiveMessage === 'function' &&\n                    progressAriaLiveMessage(+loadPercentage.toFixed(2)),\n                progressAriaLiveMessage && typeof progressAriaLiveMessage === 'string' && progressAriaLiveMessage,\n                !progressAriaLiveMessage && `Progress value is ${progressValue || Math.floor(loadPercentage)}%.`),\n            React.createElement(Progress, { title: title, value: value, variant: variant, \"aria-label\": progressAriaLabel, \"aria-labelledby\": progressAriaLabelledBy, id: progressId, helperText: progressHelperText })),\n        React.createElement(\"div\", { className: styles.multipleFileUploadStatusItemClose },\n            React.createElement(Button, { variant: \"plain\", \"aria-label\": buttonAriaLabel, onClick: onClearClick },\n                React.createElement(TimesCircleIcon, null)))));\n};\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';\n//# sourceMappingURL=MultipleFileUploadStatusItem.js.map"]},"metadata":{},"sourceType":"module"}