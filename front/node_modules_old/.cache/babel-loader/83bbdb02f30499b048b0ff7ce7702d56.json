{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nconst DualListSelectorTreeItemBase = _a => {\n  var {\n      onOptionCheck,\n      children,\n      className,\n      id,\n      text,\n      defaultExpanded,\n      hasBadge,\n      isChecked,\n      checkProps,\n      badgeProps,\n      itemData,\n      isDisabled = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      useMemo\n    } = _a,\n    props = __rest(_a, [\"onOptionCheck\", \"children\", \"className\", \"id\", \"text\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"itemData\", \"isDisabled\", \"useMemo\"]);\n  const ref = React.useRef(null);\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n  const {\n    setFocusedOption\n  } = React.useContext(DualListSelectorListContext);\n  React.useEffect(() => {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded, isDisabled && styles.modifiers.disabled),\n    id: id\n  }, props, {\n    \"aria-selected\": isChecked,\n    role: \"treeitem\"\n  }, isExpanded && {\n    'aria-expanded': 'true'\n  }), React.createElement(\"div\", {\n    className: css(styles.dualListSelectorListItemRow, isChecked && styles.modifiers.selected, styles.modifiers.check)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItem),\n    ref: ref,\n    tabIndex: -1,\n    onClick: isDisabled ? undefined : evt => {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemMain)\n  }, children && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItemToggle),\n    onClick: e => {\n      if (children) {\n        setIsExpanded(!isExpanded);\n      }\n      e.stopPropagation();\n    },\n    onKeyDown: e => {\n      if (e.key === ' ' || e.key === 'Enter') {\n        document.activeElement.click();\n        e.preventDefault();\n      }\n    },\n    tabIndex: -1\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: evt => {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    },\n    onClick: evt => evt.stopPropagation(),\n    onKeyDown: e => {\n      if (e.key === ' ' || e.key === 'Enter') {\n        onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n        setFocusedOption(id);\n        e.preventDefault();\n      }\n    },\n    ref: elem => elem && (elem.indeterminate = isChecked === null),\n    checked: isChecked || false,\n    tabIndex: -1\n  }, checkProps))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemText)\n  }, text), hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length))))), isExpanded && children);\n};\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n  if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n  return true;\n});\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorTreeItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nconst DualListSelectorTreeItemBase = (_a) => {\n    var { onOptionCheck, children, className, id, text, defaultExpanded, hasBadge, isChecked, checkProps, badgeProps, itemData, isDisabled = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    useMemo } = _a, props = __rest(_a, [\"onOptionCheck\", \"children\", \"className\", \"id\", \"text\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"itemData\", \"isDisabled\", \"useMemo\"]);\n    const ref = React.useRef(null);\n    const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n    const { setFocusedOption } = React.useContext(DualListSelectorListContext);\n    React.useEffect(() => {\n        setIsExpanded(defaultExpanded);\n    }, [defaultExpanded]);\n    return (React.createElement(\"li\", Object.assign({ className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded, isDisabled && styles.modifiers.disabled), id: id }, props, { \"aria-selected\": isChecked, role: \"treeitem\" }, (isExpanded && { 'aria-expanded': 'true' })),\n        React.createElement(\"div\", { className: css(styles.dualListSelectorListItemRow, isChecked && styles.modifiers.selected, styles.modifiers.check) },\n            React.createElement(\"div\", { className: css(styles.dualListSelectorItem), ref: ref, tabIndex: -1, onClick: isDisabled\n                    ? undefined\n                    : evt => {\n                        onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                        setFocusedOption(id);\n                    } },\n                React.createElement(\"span\", { className: css(styles.dualListSelectorItemMain) },\n                    children && (React.createElement(\"div\", { className: css(styles.dualListSelectorItemToggle), onClick: e => {\n                            if (children) {\n                                setIsExpanded(!isExpanded);\n                            }\n                            e.stopPropagation();\n                        }, onKeyDown: (e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                document.activeElement.click();\n                                e.preventDefault();\n                            }\n                        }, tabIndex: -1 },\n                        React.createElement(\"span\", { className: css(styles.dualListSelectorItemToggleIcon) },\n                            React.createElement(AngleRightIcon, { \"aria-hidden\": true })))),\n                    React.createElement(\"span\", { className: css(styles.dualListSelectorItemCheck) },\n                        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: (evt) => {\n                                onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                                setFocusedOption(id);\n                            }, onClick: (evt) => evt.stopPropagation(), onKeyDown: (e) => {\n                                if (e.key === ' ' || e.key === 'Enter') {\n                                    onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n                                    setFocusedOption(id);\n                                    e.preventDefault();\n                                }\n                            }, ref: elem => elem && (elem.indeterminate = isChecked === null), checked: isChecked || false, tabIndex: -1 }, checkProps))),\n                    React.createElement(\"span\", { className: css(styles.dualListSelectorItemText) }, text),\n                    hasBadge && children && (React.createElement(\"span\", { className: css(styles.dualListSelectorItemCount) },\n                        React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length)))))),\n        isExpanded && children));\n};\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n    if (!nextProps.useMemo) {\n        return false;\n    }\n    if (prevProps.className !== nextProps.className ||\n        prevProps.text !== nextProps.text ||\n        prevProps.id !== nextProps.id ||\n        prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n        prevProps.checkProps !== nextProps.checkProps ||\n        prevProps.hasBadge !== nextProps.hasBadge ||\n        prevProps.badgeProps !== nextProps.badgeProps ||\n        prevProps.isChecked !== nextProps.isChecked ||\n        prevProps.itemData !== nextProps.itemData) {\n        return false;\n    }\n    return true;\n});\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';\n//# sourceMappingURL=DualListSelectorTreeItem.js.map"]},"metadata":{},"sourceType":"module"}