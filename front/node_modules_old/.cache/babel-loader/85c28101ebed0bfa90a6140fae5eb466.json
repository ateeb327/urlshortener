{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nexport const DualListSelectorList = _a => {\n  var {\n      children\n    } = _a,\n    props = __rest(_a, [\"children\"]);\n  const {\n    setFocusedOption,\n    isTree,\n    ariaLabelledBy,\n    focusedOption,\n    displayOption,\n    selectedOptions,\n    id,\n    onOptionSelect,\n    options,\n    isDisabled\n  } = React.useContext(DualListSelectorListContext);\n  // only called when options are passed via options prop\n  const onOptionClick = (e, index, id) => {\n    setFocusedOption(id);\n    onOptionSelect(e, index, id);\n  };\n  const hasOptions = () => options.length !== 0 || children !== undefined && children.length !== 0;\n  return React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList)\n  }, hasOptions() && {\n    role: isTree ? 'tree' : 'listbox',\n    'aria-multiselectable': true,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-activedescendant': focusedOption\n  }, {\n    \"aria-disabled\": isDisabled ? 'true' : undefined\n  }, props), options.length === 0 ? children : options.map((option, index) => {\n    if (displayOption(option)) {\n      return React.createElement(DualListSelectorListItem, {\n        key: index,\n        isSelected: selectedOptions.indexOf(index) !== -1,\n        id: `${id}-option-${index}`,\n        onOptionSelect: (e, id) => onOptionClick(e, index, id),\n        orderIndex: index,\n        isDisabled: isDisabled\n      }, option);\n    }\n    return;\n  }));\n};\nDualListSelectorList.displayName = 'DualListSelectorList';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorList.tsx"],"names":[],"mappings":";AAAA,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,6EAA6E;AAChG,SAAS,wBAAwB,QAAQ,4BAA4B;AACrE,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,2BAA2B,QAAQ,2BAA2B;AASvE,OAAO,MAAM,oBAAoB,GAAwD,EAG7D,IAAI;MAHyD;MACvF;IAAQ,CAAA,GAAA,EAEkB;IADvB,KAAK,GAAA,MAAA,CAAA,EAAA,EAF+E,CAAA,UAAA,CAGxF,CADS;EAER,MAAM;IACJ,gBAAgB;IAChB,MAAM;IACN,cAAc;IACd,aAAa;IACb,aAAa;IACb,eAAe;IACf,EAAE;IACF,cAAc;IACd,OAAO;IACP;EAAU,CACX,GAAG,KAAK,CAAC,UAAU,CAAC,2BAA2B,CAAC;EAEjD;EACA,MAAM,aAAa,GAAG,CAAC,CAA6D,EAAE,KAAa,EAAE,EAAU,KAAI;IACjH,gBAAgB,CAAC,EAAE,CAAC;IACpB,cAAc,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;EAC9B,CAAC;EAED,MAAM,UAAU,GAAG,CAAA,KACjB,OAAO,CAAC,MAAM,KAAK,CAAC,IAAK,QAAQ,KAAK,SAAS,IAAK,QAA8B,CAAC,MAAM,KAAK,CAAE;EAElG,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IACE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAoB;EAAC,CAAA,EACtC,UAAU,CAAA,CAAE,IAAI;IACnB,IAAI,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS;IACjC,sBAAsB,EAAE,IAAI;IAC5B,iBAAiB,EAAE,cAAc;IACjC,uBAAuB,EAAE;GAC1B,EAAC;IAAA,eAAA,EACa,UAAU,GAAG,MAAM,GAAG;EAAS,CAAA,EAC1C,KAAK,CAAA,EAER,OAAO,CAAC,MAAM,KAAK,CAAC,GACjB,QAAQ,GACR,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,KAAI;IAC5B,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE;MACzB,OACE,KAAA,CAAA,aAAA,CAAC,wBAAwB,EAAA;QACvB,GAAG,EAAE,KAAK;QACV,UAAU,EAAG,eAA4B,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/D,EAAE,EAAE,GAAG,EAAE,WAAW,KAAK,EAAE;QAC3B,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,KAAK,aAAa,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;QACtD,UAAU,EAAE,KAAK;QACjB,UAAU,EAAE;MAAU,CAAA,EAErB,MAAM,CACkB;IAE9B;IACD;EACF,CAAC,CAAC,CACH;AAET,CAAC;AACD,oBAAoB,CAAC,WAAW,GAAG,sBAAsB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nexport const DualListSelectorList = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);\n    const { setFocusedOption, isTree, ariaLabelledBy, focusedOption, displayOption, selectedOptions, id, onOptionSelect, options, isDisabled } = React.useContext(DualListSelectorListContext);\n    // only called when options are passed via options prop\n    const onOptionClick = (e, index, id) => {\n        setFocusedOption(id);\n        onOptionSelect(e, index, id);\n    };\n    const hasOptions = () => options.length !== 0 || (children !== undefined && children.length !== 0);\n    return (React.createElement(\"ul\", Object.assign({ className: css(styles.dualListSelectorList) }, (hasOptions() && {\n        role: isTree ? 'tree' : 'listbox',\n        'aria-multiselectable': true,\n        'aria-labelledby': ariaLabelledBy,\n        'aria-activedescendant': focusedOption\n    }), { \"aria-disabled\": isDisabled ? 'true' : undefined }, props), options.length === 0\n        ? children\n        : options.map((option, index) => {\n            if (displayOption(option)) {\n                return (React.createElement(DualListSelectorListItem, { key: index, isSelected: selectedOptions.indexOf(index) !== -1, id: `${id}-option-${index}`, onOptionSelect: (e, id) => onOptionClick(e, index, id), orderIndex: index, isDisabled: isDisabled }, option));\n            }\n            return;\n        })));\n};\nDualListSelectorList.displayName = 'DualListSelectorList';\n//# sourceMappingURL=DualListSelectorList.js.map"]},"metadata":{},"sourceType":"module"}