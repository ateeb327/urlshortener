{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye';\nimport { EmptyState } from '@patternfly/react-core/dist/esm/components/EmptyState';\nimport { Td } from '../TableComposable/Td';\nexport const BodyCell = _a => {\n  var {\n      'data-label': dataLabel = '',\n      className = '',\n      colSpan,\n      component = 'td',\n      isVisible,\n      parentId,\n      textCenter = false,\n      tooltip: tooltipProp = '',\n      onMouseEnter: onMouseEnterProp = () => {},\n      children,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      errorText,\n      isValid,\n      isOpen,\n      ariaControls,\n      editableValue,\n      editableSelectProps,\n      options,\n      isSelectOpen,\n      value,\n      name\n    } = _a,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, ['data-label', \"className\", \"colSpan\", \"component\", \"isVisible\", \"parentId\", \"textCenter\", \"tooltip\", \"onMouseEnter\", \"children\", \"errorText\", \"isValid\", \"isOpen\", \"ariaControls\", \"editableValue\", \"editableSelectProps\", \"options\", \"isSelectOpen\", \"value\", \"name\"]);\n  const [tooltip, setTooltip] = React.useState('');\n  const onMouseEnter = event => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      if (tooltipProp) {\n        setTooltip(tooltipProp);\n      } else if (typeof children === 'string') {\n        setTooltip(children);\n      }\n    } else {\n      setTooltip('');\n    }\n    onMouseEnterProp(event);\n  };\n  let isEmptyStateCell = false;\n  if (children) {\n    isEmptyStateCell = children.type === Bullseye && children.props.children && children.props.children.type === EmptyState || children.type === EmptyState;\n  }\n  const cell = React.createElement(Td, Object.assign({\n    className: className,\n    component: component,\n    dataLabel: dataLabel && parentId == null && !isEmptyStateCell ? dataLabel : null,\n    onMouseEnter: onMouseEnter,\n    textCenter: textCenter,\n    colSpan: colSpan\n  }, props), children);\n  const bodyCell = tooltip !== '' ? React.createElement(Tooltip, {\n    content: tooltip,\n    isVisible: true\n  }, cell) : cell;\n  return parentId !== undefined && colSpan === undefined || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';","map":{"version":3,"sources":["../../../../src/components/Table/BodyCell.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,OAAO,QAAQ,oDAAoD;AAC5E,SAAS,QAAQ,QAAQ,kDAAkD;AAC3E,SAAS,UAAU,QAAQ,uDAAuD;AAElF,SAAS,EAAE,QAAQ,uBAAuB;AAwB1C,OAAO,MAAM,QAAQ,GAA4C,EAwBjD,IAAI;MAxB6C;MAC/D,YAAY,EAAE,SAAS,GAAG,EAAE;MAC5B,SAAS,GAAG,EAAE;MACd,OAAO;MACP,SAAS,GAAG,IAAI;MAChB,SAAS;MACT,QAAQ;MACR,UAAU,GAAG,KAAK;MAClB,OAAO,EAAE,WAAW,GAAG,EAAE;MACzB,YAAY,EAAE,gBAAgB,GAAG,CAAA,KAAK,CAAE,CAAC;MACzC,QAAQ;MACR;MACA,SAAS;MACT,OAAO;MACP,MAAM;MACN,YAAY;MACZ,aAAa;MACb,mBAAmB;MACnB,OAAO;MACP,YAAY;MACZ,KAAK;MACL;IAAI,CAAA,GAAA,EAGU;IAFd;IACG,KAAK,GAAA,MAAA,CAAA,EAAA,EAvBuD,CAAA,YAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,WAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,cAAA,EAAA,UAAA,EAAA,WAAA,EAAA,SAAA,EAAA,QAAA,EAAA,cAAA,EAAA,eAAA,EAAA,qBAAA,EAAA,SAAA,EAAA,cAAA,EAAA,OAAA,EAAA,MAAA,CAwBhE,CADS;EAER,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,YAAY,GAAI,KAAU,IAAI;IAClC,IAAI,KAAK,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE;MACvD,IAAI,WAAW,EAAE;QACf,UAAU,CAAC,WAAW,CAAC;OACxB,MAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QACvC,UAAU,CAAC,QAAQ,CAAC;MACrB;KACF,MAAM;MACL,UAAU,CAAC,EAAE,CAAC;IACf;IACD,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,IAAI,gBAAgB,GAAG,KAAK;EAC5B,IAAI,QAAQ,EAAE;IACZ,gBAAgB,GACZ,QAA+B,CAAC,IAAI,KAAK,QAAQ,IAChD,QAA+B,CAAC,KAAK,CAAC,QAAQ,IAC9C,QAA+B,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,UAAU,IACpE,QAA+B,CAAC,IAAI,KAAK,UAAU;EACvD;EAED,MAAM,IAAI,GACR,KAAA,CAAA,aAAA,CAAC,EAAE,EAAA,MAAA,CAAA,MAAA,CAAA;IACD,SAAS,EAAE,SAAS;IACpB,SAAS,EAAE,SAAS;IACpB,SAAS,EAAE,SAAS,IAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,gBAAgB,GAAG,SAAS,GAAG,IAAI;IAChF,YAAY,EAAE,YAAY;IAC1B,UAAU,EAAE,UAAU;IACtB,OAAO,EAAE;EAAO,CAAA,EACZ,KAAK,CAAA,EAER,QAAQ,CAEZ;EAED,MAAM,QAAQ,GACZ,OAAO,KAAK,EAAE,GACZ,KAAA,CAAA,aAAA,CAAC,OAAO,EAAA;IAAC,OAAO,EAAE,OAAO;IAAE,SAAS,EAAA;EAAA,CAAA,EACjC,IAAI,CACG,GAEV,IACD;EAEH,OAAQ,QAAQ,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,IAAK,CAAC,SAAS,GAAG,IAAI,GAAG,QAAQ;AAC1F,CAAC;AACD,QAAQ,CAAC,WAAW,GAAG,UAAU","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye';\nimport { EmptyState } from '@patternfly/react-core/dist/esm/components/EmptyState';\nimport { Td } from '../TableComposable/Td';\nexport const BodyCell = (_a) => {\n    var { 'data-label': dataLabel = '', className = '', colSpan, component = 'td', isVisible, parentId, textCenter = false, tooltip: tooltipProp = '', onMouseEnter: onMouseEnterProp = () => { }, children, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    errorText, isValid, isOpen, ariaControls, editableValue, editableSelectProps, options, isSelectOpen, value, name } = _a, \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, ['data-label', \"className\", \"colSpan\", \"component\", \"isVisible\", \"parentId\", \"textCenter\", \"tooltip\", \"onMouseEnter\", \"children\", \"errorText\", \"isValid\", \"isOpen\", \"ariaControls\", \"editableValue\", \"editableSelectProps\", \"options\", \"isSelectOpen\", \"value\", \"name\"]);\n    const [tooltip, setTooltip] = React.useState('');\n    const onMouseEnter = (event) => {\n        if (event.target.offsetWidth < event.target.scrollWidth) {\n            if (tooltipProp) {\n                setTooltip(tooltipProp);\n            }\n            else if (typeof children === 'string') {\n                setTooltip(children);\n            }\n        }\n        else {\n            setTooltip('');\n        }\n        onMouseEnterProp(event);\n    };\n    let isEmptyStateCell = false;\n    if (children) {\n        isEmptyStateCell =\n            (children.type === Bullseye &&\n                children.props.children &&\n                children.props.children.type === EmptyState) ||\n                children.type === EmptyState;\n    }\n    const cell = (React.createElement(Td, Object.assign({ className: className, component: component, dataLabel: dataLabel && parentId == null && !isEmptyStateCell ? dataLabel : null, onMouseEnter: onMouseEnter, textCenter: textCenter, colSpan: colSpan }, props), children));\n    const bodyCell = tooltip !== '' ? (React.createElement(Tooltip, { content: tooltip, isVisible: true }, cell)) : (cell);\n    return (parentId !== undefined && colSpan === undefined) || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';\n//# sourceMappingURL=BodyCell.js.map"]},"metadata":{},"sourceType":"module"}