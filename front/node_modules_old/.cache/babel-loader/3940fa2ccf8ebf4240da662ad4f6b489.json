{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport class ChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.headingRef = React.createRef();\n    this.toggleCollapse = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen,\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      }));\n    };\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n    });\n  }\n  renderLabel(id) {\n    const {\n      categoryName,\n      tooltipPosition\n    } = this.props;\n    const {\n      isTooltipVisible\n    } = this.state;\n    return isTooltipVisible ? React.createElement(Tooltip, {\n      position: tooltipPosition,\n      content: categoryName\n    }, React.createElement(\"span\", {\n      tabIndex: 0,\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel)\n    }, React.createElement(\"span\", {\n      id: id\n    }, categoryName))) : React.createElement(\"span\", {\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel),\n      id: id\n    }, categoryName);\n  }\n  render() {\n    const _a = this.props,\n      {\n        categoryName,\n        children,\n        className,\n        isClosable,\n        closeBtnAriaLabel,\n        'aria-label': ariaLabel,\n        onClick,\n        onOverflowChipClick,\n        numChips,\n        expandedText,\n        collapsedText,\n        ouiaId,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen,\n        tooltipPosition\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n    const {\n      isOpen\n    } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText, {\n      remaining: React.Children.count(children) - numChips\n    });\n    const renderChipGroup = id => {\n      const chipArray = !isOpen ? React.Children.toArray(children).slice(0, numChips) : React.Children.toArray(children);\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.chipGroup, className, categoryName && styles.modifiers.category),\n        role: \"group\"\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, getOUIAProps(ChipGroup.displayName, ouiaId)), React.createElement(\"div\", {\n        className: css(styles.chipGroupMain)\n      }, categoryName && this.renderLabel(id), React.createElement(\"ul\", Object.assign({\n        className: css(styles.chipGroupList)\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, {\n        role: \"list\"\n      }, rest), chipArray.map((child, i) => React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem),\n        key: i\n      }, child)), numChildren > numChips && React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem)\n      }, React.createElement(Chip, {\n        isOverflowChip: true,\n        onClick: event => {\n          this.toggleCollapse();\n          onOverflowChipClick(event);\n        },\n        component: \"button\"\n      }, isOpen ? expandedText : collapsedTextResult)))), isClosable && React.createElement(\"div\", {\n        className: css(styles.chipGroupClose)\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        onClick: onClick,\n        id: `remove_group_${id}`,\n        \"aria-labelledby\": `remove_group_${id} ${id}`,\n        ouiaId: ouiaId || closeBtnAriaLabel\n      }, React.createElement(TimesCircleIcon, {\n        \"aria-hidden\": \"true\"\n      }))));\n    };\n    return numChildren === 0 ? null : React.createElement(GenerateId, null, randomId => renderChipGroup(this.props.id || randomId));\n  }\n}\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numChips: 3,\n  isClosable: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  onOverflowChipClick: _e => undefined,\n  closeBtnAriaLabel: 'Close chip group',\n  tooltipPosition: 'top',\n  'aria-label': 'Chip group category'\n};","map":{"version":3,"sources":["../../../../src/components/ChipGroup/ChipGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport class ChipGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.headingRef = React.createRef();\n        this.toggleCollapse = () => {\n            this.setState(prevState => ({\n                isOpen: !prevState.isOpen,\n                isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n            }));\n        };\n        this.state = {\n            isOpen: this.props.defaultIsOpen,\n            isTooltipVisible: false\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n        });\n    }\n    renderLabel(id) {\n        const { categoryName, tooltipPosition } = this.props;\n        const { isTooltipVisible } = this.state;\n        return isTooltipVisible ? (React.createElement(Tooltip, { position: tooltipPosition, content: categoryName },\n            React.createElement(\"span\", { tabIndex: 0, ref: this.headingRef, className: css(styles.chipGroupLabel) },\n                React.createElement(\"span\", { id: id }, categoryName)))) : (React.createElement(\"span\", { ref: this.headingRef, className: css(styles.chipGroupLabel), id: id }, categoryName));\n    }\n    render() {\n        const _a = this.props, { categoryName, children, className, isClosable, closeBtnAriaLabel, 'aria-label': ariaLabel, onClick, onOverflowChipClick, numChips, expandedText, collapsedText, ouiaId, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen, tooltipPosition } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n        const { isOpen } = this.state;\n        const numChildren = React.Children.count(children);\n        const collapsedTextResult = fillTemplate(collapsedText, {\n            remaining: React.Children.count(children) - numChips\n        });\n        const renderChipGroup = (id) => {\n            const chipArray = !isOpen\n                ? React.Children.toArray(children).slice(0, numChips)\n                : React.Children.toArray(children);\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.chipGroup, className, categoryName && styles.modifiers.category), role: \"group\" }, (categoryName && { 'aria-labelledby': id }), (!categoryName && { 'aria-label': ariaLabel }), getOUIAProps(ChipGroup.displayName, ouiaId)),\n                React.createElement(\"div\", { className: css(styles.chipGroupMain) },\n                    categoryName && this.renderLabel(id),\n                    React.createElement(\"ul\", Object.assign({ className: css(styles.chipGroupList) }, (categoryName && { 'aria-labelledby': id }), (!categoryName && { 'aria-label': ariaLabel }), { role: \"list\" }, rest),\n                        chipArray.map((child, i) => (React.createElement(\"li\", { className: css(styles.chipGroupListItem), key: i }, child))),\n                        numChildren > numChips && (React.createElement(\"li\", { className: css(styles.chipGroupListItem) },\n                            React.createElement(Chip, { isOverflowChip: true, onClick: event => {\n                                    this.toggleCollapse();\n                                    onOverflowChipClick(event);\n                                }, component: \"button\" }, isOpen ? expandedText : collapsedTextResult))))),\n                isClosable && (React.createElement(\"div\", { className: css(styles.chipGroupClose) },\n                    React.createElement(Button, { variant: \"plain\", \"aria-label\": closeBtnAriaLabel, onClick: onClick, id: `remove_group_${id}`, \"aria-labelledby\": `remove_group_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },\n                        React.createElement(TimesCircleIcon, { \"aria-hidden\": \"true\" }))))));\n        };\n        return numChildren === 0 ? null : React.createElement(GenerateId, null, randomId => renderChipGroup(this.props.id || randomId));\n    }\n}\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numChips: 3,\n    isClosable: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e) => undefined,\n    onOverflowChipClick: (_e) => undefined,\n    closeBtnAriaLabel: 'Close chip group',\n    tooltipPosition: 'top',\n    'aria-label': 'Chip group category'\n};\n//# sourceMappingURL=ChipGroup.js.map"]},"metadata":{},"sourceType":"module"}