{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\nexport const DualListSelectorControlsWrapperBase = _a => {\n  var {\n      innerRef,\n      children = null,\n      className,\n      'aria-label': ariaLabel = 'Controls for moving options between lists'\n    } = _a,\n    props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label']);\n  const ref = React.useRef(null);\n  const wrapperRef = innerRef || ref;\n  // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n  // as well as when they are passed in via children.\n  const handleKeys = event => {\n    if (!wrapperRef.current || wrapperRef.current !== event.target.closest('.pf-c-dual-list-selector__controls') && !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(event.target.closest('.pf-c-dual-list-selector__controls'))) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const controls = Array.from(wrapperRef.current.getElementsByTagName('BUTTON')).filter(el => !el.classList.contains('pf-m-disabled'));\n    const activeElement = document.activeElement;\n    handleArrows(event, controls, element => activeElement.contains(element), element => element, undefined, undefined, true, false);\n  };\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [wrapperRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorControls, className),\n    tabIndex: 0,\n    ref: wrapperRef,\n    \"aria-label\": ariaLabel\n  }, props), children);\n};\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\nexport const DualListSelectorControlsWrapper = React.forwardRef((props, ref) => React.createElement(DualListSelectorControlsWrapperBase, Object.assign({\n  innerRef: ref,\n  role: \"group\"\n}, props)));\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorControlsWrapper.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,6EAA6E;AAChG,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,SAAS,YAAY,QAAQ,eAAe;AAe5C,OAAO,MAAM,mCAAmC,GAAmE,EAM5E,IAAI;MANwE;MACjH,QAAQ;MACR,QAAQ,GAAG,IAAI;MACf,SAAS;MACT,YAAY,EAAE,SAAS,GAAG;IAA2C,CAAA,GAAA,EAEhC;IADlC,KAAK,GAAA,MAAA,CAAA,EAAA,EALyG,CAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,CAMlH,CADS;EAER,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,UAAU,GAAG,QAAQ,IAAI,GAAG;EAClC;EACA;EACA,MAAM,UAAU,GAAI,KAAoB,IAAI;IAC1C,IACE,CAAC,UAAU,CAAC,OAAO,IAClB,UAAU,CAAC,OAAO,KAAM,KAAK,CAAC,MAAsB,CAAC,OAAO,CAAC,oCAAoC,CAAC,IACjG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,mCAAmC,CAAC,CAAC,CAAC,QAAQ,CACjG,KAAK,CAAC,MAAsB,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAC3E,EACJ;MACA;IACD;IACD,KAAK,CAAC,wBAAwB,CAAA,CAAE;IAEhC,MAAM,QAAQ,GAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAe,CAAC,MAAM,CAClG,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,CAC9C;IACD,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa;IAC5C,YAAY,CACV,KAAK,EACL,QAAQ,EACP,OAAgB,IAAK,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EACpD,OAAgB,IAAK,OAAO,EAC7B,SAAS,EACT,SAAS,EACT,IAAI,EACJ,KAAK,CACN;EACH,CAAC;EAED,KAAK,CAAC,SAAS,CAAC,MAAK;IACnB,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC;IAC9C,OAAO,MAAK;MACV,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC;IACnD,CAAC;EACH,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;EAExB,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IACE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,wBAAwB,EAAE,SAAS,CAAC;IAC1D,QAAQ,EAAE,CAAC;IACX,GAAG,EAAE,UAAU;IAAA,YAAA,EACH;EAAS,CAAA,EACjB,KAAK,CAAA,EAER,QAAQ,CACL;AAEV,CAAC;AAED,mCAAmC,CAAC,WAAW,GAAG,qCAAqC;AAEvF,OAAO,MAAM,+BAA+B,GAAG,KAAK,CAAC,UAAU,CAC7D,CAAC,KAA2C,EAAE,GAA8B,KAC1E,KAAA,CAAA,aAAA,CAAC,mCAAmC,EAAA,MAAA,CAAA,MAAA,CAAA;EAAC,QAAQ,EAAE,GAAkC;EAAE,IAAI,EAAC;AAAO,CAAA,EAAK,KAAK,CAAA,CAC1G,CACF;AAED,+BAA+B,CAAC,WAAW,GAAG,iCAAiC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\nexport const DualListSelectorControlsWrapperBase = (_a) => {\n    var { innerRef, children = null, className, 'aria-label': ariaLabel = 'Controls for moving options between lists' } = _a, props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label']);\n    const ref = React.useRef(null);\n    const wrapperRef = innerRef || ref;\n    // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n    // as well as when they are passed in via children.\n    const handleKeys = (event) => {\n        if (!wrapperRef.current ||\n            (wrapperRef.current !== event.target.closest('.pf-c-dual-list-selector__controls') &&\n                !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(event.target.closest('.pf-c-dual-list-selector__controls')))) {\n            return;\n        }\n        event.stopImmediatePropagation();\n        const controls = Array.from(wrapperRef.current.getElementsByTagName('BUTTON')).filter(el => !el.classList.contains('pf-m-disabled'));\n        const activeElement = document.activeElement;\n        handleArrows(event, controls, (element) => activeElement.contains(element), (element) => element, undefined, undefined, true, false);\n    };\n    React.useEffect(() => {\n        window.addEventListener('keydown', handleKeys);\n        return () => {\n            window.removeEventListener('keydown', handleKeys);\n        };\n    }, [wrapperRef.current]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.dualListSelectorControls, className), tabIndex: 0, ref: wrapperRef, \"aria-label\": ariaLabel }, props), children));\n};\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\nexport const DualListSelectorControlsWrapper = React.forwardRef((props, ref) => (React.createElement(DualListSelectorControlsWrapperBase, Object.assign({ innerRef: ref, role: \"group\" }, props))));\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';\n//# sourceMappingURL=DualListSelectorControlsWrapper.js.map"]},"metadata":{},"sourceType":"module"}