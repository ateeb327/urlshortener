{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\nexport var ToolbarGroupVariant;\n(function (ToolbarGroupVariant) {\n  ToolbarGroupVariant[\"filter-group\"] = \"filter-group\";\n  ToolbarGroupVariant[\"icon-button-group\"] = \"icon-button-group\";\n  ToolbarGroupVariant[\"button-group\"] = \"button-group\";\n})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));\nclass ToolbarGroupWithRef extends React.Component {\n  render() {\n    const _a = this.props,\n      {\n        visibility,\n        visiblity,\n        alignment,\n        spacer,\n        spaceItems,\n        className,\n        variant,\n        children,\n        innerRef\n      } = _a,\n      props = __rest(_a, [\"visibility\", \"visiblity\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"variant\", \"children\", \"innerRef\"]);\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n    return React.createElement(PageContext.Consumer, null, ({\n      width,\n      getBreakpoint\n    }) => React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n    }, props, {\n      ref: innerRef\n    }), children));\n  }\n}\nexport const ToolbarGroup = React.forwardRef((props, ref) => React.createElement(ToolbarGroupWithRef, Object.assign({}, props, {\n  innerRef: ref\n})));","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarGroup.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,yDAAyD;AAC5E,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,SAAS,oBAAoB,EAAE,OAAO,QAAQ,oBAAoB;AAClE,SAAS,WAAW,QAAQ,qBAAqB;AAEjD,OAAA,IAAY,mBAIX;AAJD,CAAA,UAAY,mBAAmB,EAAA;EAC7B,mBAAA,CAAA,cAAA,CAAA,GAAA,cAA+B;EAC/B,mBAAA,CAAA,mBAAA,CAAA,GAAA,mBAAyC;EACzC,mBAAA,CAAA,cAAA,CAAA,GAAA,cAA+B;AACjC,CAAC,EAJW,mBAAmB,KAAnB,mBAAmB,GAAA,CAAA,CAAA,CAAA,CAAA;AAyD/B,MAAM,mBAAoB,SAAQ,KAAK,CAAC,SAA4B,CAAA;EAClE,MAAM,CAAA,EAAA;IACJ,MAAM,EAAA,GAWF,IAAI,CAAC,KAAK;MAXR;QACJ,UAAU;QACV,SAAS;QACT,SAAS;QACT,MAAM;QACN,UAAU;QACV,SAAS;QACT,OAAO;QACP,QAAQ;QACR;MAAQ,CAAA,GAAA,EAEI;MADT,KAAK,GAAA,MAAA,CAAA,EAAA,EAVJ,CAAA,YAAA,EAAA,WAAA,EAAA,WAAA,EAAA,QAAA,EAAA,YAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,CAWL,CAAa;IAEd,IAAI,SAAS,KAAK,SAAS,EAAE;MAC3B;MACA,OAAO,CAAC,IAAI,CACV,uDAAuD,GACrD,2DAA2D,CAC9D;IACF;IAED,OACE,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAQ,EAAA,IAAA,EAClB,CAAC;MAAE,KAAK;MAAE;IAAa,CAAE,KACxB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MACE,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,YAAY,EACnB,OAAO,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAsD,CAAC,EAClG,oBAAoB,CAAC,UAAU,IAAI,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EAC/E,oBAAoB,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EACjE,oBAAoB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EAC9D,oBAAoB,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EAClE,SAAS;IACV,CAAA,EACG,KAAK,EAAA;MACT,GAAG,EAAE;IAAQ,CAAA,CAAA,EAEZ,QAAQ,CAEZ,CACoB;EAE3B;AACD;AAED,OAAO,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,KAAwB,EAAE,GAAQ,KAC9E,KAAA,CAAA,aAAA,CAAC,mBAAmB,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAK,KAAK,EAAA;EAAE,QAAQ,EAAE;AAAG,CAAA,CAAA,CAC9C,CAAC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\nexport var ToolbarGroupVariant;\n(function (ToolbarGroupVariant) {\n    ToolbarGroupVariant[\"filter-group\"] = \"filter-group\";\n    ToolbarGroupVariant[\"icon-button-group\"] = \"icon-button-group\";\n    ToolbarGroupVariant[\"button-group\"] = \"button-group\";\n})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));\nclass ToolbarGroupWithRef extends React.Component {\n    render() {\n        const _a = this.props, { visibility, visiblity, alignment, spacer, spaceItems, className, variant, children, innerRef } = _a, props = __rest(_a, [\"visibility\", \"visiblity\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"variant\", \"children\", \"innerRef\"]);\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarGroup visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(PageContext.Consumer, null, ({ width, getBreakpoint }) => (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className) }, props, { ref: innerRef }), children))));\n    }\n}\nexport const ToolbarGroup = React.forwardRef((props, ref) => (React.createElement(ToolbarGroupWithRef, Object.assign({}, props, { innerRef: ref }))));\n//# sourceMappingURL=ToolbarGroup.js.map"]},"metadata":{},"sourceType":"module"}