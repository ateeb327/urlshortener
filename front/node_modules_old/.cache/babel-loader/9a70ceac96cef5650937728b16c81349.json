{"ast":null,"code":"import { __awaiter, __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileUploadField } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\nexport const FileUpload = _a => {\n  var {\n      id,\n      type,\n      value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null,\n      filename = '',\n      children = null,\n      onChange = () => {},\n      onFileInputChange = null,\n      onReadStarted = () => {},\n      onReadFinished = () => {},\n      onReadFailed = () => {},\n      onClearClick,\n      onClick = event => event.preventDefault(),\n      onTextChange,\n      onDataChange,\n      dropzoneProps = {}\n    } = _a,\n    props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"children\", \"onChange\", \"onFileInputChange\", \"onReadStarted\", \"onReadFinished\", \"onReadFailed\", \"onClearClick\", \"onClick\", \"onTextChange\", \"onDataChange\", \"dropzoneProps\"]);\n  const onDropAccepted = (acceptedFiles, event) => {\n    if (acceptedFiles.length > 0) {\n      const fileHandle = acceptedFiles[0];\n      if (event.type === 'drop') {\n        onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);\n      }\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type).then(data => {\n          onReadFinished(fileHandle);\n          onChange(data, fileHandle.name, event);\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(data);\n        }).catch(error => {\n          onReadFailed(error, fileHandle);\n          onReadFinished(fileHandle);\n          onChange('', '', event); // Clear the filename field on a failure\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange('');\n        });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n  const onDropRejected = (rejectedFiles, event) => {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n  const fileInputRef = React.useRef();\n  const setFileValue = filename => {\n    fileInputRef.current.value = filename;\n  };\n  const onClearButtonClick = event => {\n    onChange('', '', event);\n    onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);\n    setFileValue(null);\n  };\n  return React.createElement(Dropzone, Object.assign({\n    multiple: false\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), ({\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    open\n  }) => {\n    const oldInputProps = getInputProps();\n    const inputProps = Object.assign(Object.assign({}, oldInputProps), {\n      onChange: e => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        (_a = oldInputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(oldInputProps, e);\n        const files = yield fromEvent(e.nativeEvent);\n        if (files.length === 1) {\n          onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);\n        }\n      })\n    });\n    return React.createElement(FileUploadField, Object.assign({}, getRootProps(Object.assign(Object.assign({}, props), {\n      refKey: 'containerRef',\n      onClick: event => event.preventDefault()\n    })), {\n      tabIndex: null,\n      id: id,\n      type: type,\n      filename: filename,\n      value: value,\n      onChange: onChange,\n      isDragActive: isDragActive,\n      onBrowseButtonClick: open,\n      onClearButtonClick: onClearButtonClick,\n      onTextAreaClick: onClick,\n      onTextChange: onTextChange\n    }), React.createElement(\"input\", Object.assign({}, inputProps, {\n      ref: input => {\n        fileInputRef.current = input;\n        inputProps.ref(input);\n      }\n    })), children);\n  });\n};\nFileUpload.displayName = 'FileUpload';","map":{"version":3,"sources":["../../../../src/components/FileUpload/FileUpload.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileUploadField } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\nexport const FileUpload = (_a) => {\n    var { id, type, value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null, filename = '', children = null, onChange = () => { }, onFileInputChange = null, onReadStarted = () => { }, onReadFinished = () => { }, onReadFailed = () => { }, onClearClick, onClick = event => event.preventDefault(), onTextChange, onDataChange, dropzoneProps = {} } = _a, props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"children\", \"onChange\", \"onFileInputChange\", \"onReadStarted\", \"onReadFinished\", \"onReadFailed\", \"onClearClick\", \"onClick\", \"onTextChange\", \"onDataChange\", \"dropzoneProps\"]);\n    const onDropAccepted = (acceptedFiles, event) => {\n        if (acceptedFiles.length > 0) {\n            const fileHandle = acceptedFiles[0];\n            if (event.type === 'drop') {\n                onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);\n            }\n            if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n                onChange('', fileHandle.name, event); // Show the filename while reading\n                onReadStarted(fileHandle);\n                readFile(fileHandle, type)\n                    .then(data => {\n                    onReadFinished(fileHandle);\n                    onChange(data, fileHandle.name, event);\n                    onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(data);\n                })\n                    .catch((error) => {\n                    onReadFailed(error, fileHandle);\n                    onReadFinished(fileHandle);\n                    onChange('', '', event); // Clear the filename field on a failure\n                    onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange('');\n                });\n            }\n            else {\n                onChange(fileHandle, fileHandle.name, event);\n            }\n        }\n        dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n    };\n    const onDropRejected = (rejectedFiles, event) => {\n        if (rejectedFiles.length > 0) {\n            onChange('', rejectedFiles[0].name, event);\n        }\n        dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n    };\n    const fileInputRef = React.useRef();\n    const setFileValue = (filename) => {\n        fileInputRef.current.value = filename;\n    };\n    const onClearButtonClick = (event) => {\n        onChange('', '', event);\n        onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);\n        setFileValue(null);\n    };\n    return (React.createElement(Dropzone, Object.assign({ multiple: false }, dropzoneProps, { onDropAccepted: onDropAccepted, onDropRejected: onDropRejected }), ({ getRootProps, getInputProps, isDragActive, open }) => {\n        const oldInputProps = getInputProps();\n        const inputProps = Object.assign(Object.assign({}, oldInputProps), { onChange: (e) => __awaiter(void 0, void 0, void 0, function* () {\n                var _a;\n                (_a = oldInputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(oldInputProps, e);\n                const files = yield fromEvent(e.nativeEvent);\n                if (files.length === 1) {\n                    onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);\n                }\n            }) });\n        return (React.createElement(FileUploadField, Object.assign({}, getRootProps(Object.assign(Object.assign({}, props), { refKey: 'containerRef', onClick: event => event.preventDefault() })), { tabIndex: null, id: id, type: type, filename: filename, value: value, onChange: onChange, isDragActive: isDragActive, onBrowseButtonClick: open, onClearButtonClick: onClearButtonClick, onTextAreaClick: onClick, onTextChange: onTextChange }),\n            React.createElement(\"input\", Object.assign({}, inputProps, { ref: input => {\n                    fileInputRef.current = input;\n                    inputProps.ref(input);\n                } })),\n            children));\n    }));\n};\nFileUpload.displayName = 'FileUpload';\n//# sourceMappingURL=FileUpload.js.map"]},"metadata":{},"sourceType":"module"}