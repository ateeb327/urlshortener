{"ast":null,"code":"/**\n * @param modifiers\n */\nexport default function mergeByName(modifiers) {\n  const merged = modifiers.reduce((merged, current) => {\n    const existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {\n      options: Object.assign(Object.assign({}, existing.options), current.options),\n      data: Object.assign(Object.assign({}, existing.data), current.data)\n    }) : current;\n    return merged;\n  }, {});\n  // IE11 does not support Object.values\n  return Object.keys(merged).map(key => merged[key]);\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/mergeByName.ts"],"names":[],"mappings":"AAGA;;AAEG;AACH,eAAc,SAAU,WAAW,CAAC,SAAwC,EAAA;EAC1E,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,OAAO,KAAI;IAClD,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;IACrC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,QAAQ,GAC5B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACM,QAAQ,CAAA,EACR,OAAO,CAAA,EAAA;MACV,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAO,QAAQ,CAAC,OAAO,CAAA,EAAK,OAAO,CAAC,OAAO,CAAA;MAClD,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAO,QAAQ,CAAC,IAAI,CAAA,EAAK,OAAO,CAAC,IAAI;IAAA,CAAA,CAAA,GAE3C,OAAO;IACX,OAAO,MAAM;EACf,CAAC,EAAE,CAAA,CAAE,CAAC;EAEN;EACA,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;AACpD","sourceRoot":"","sourcesContent":["/**\n * @param modifiers\n */\nexport default function mergeByName(modifiers) {\n    const merged = modifiers.reduce((merged, current) => {\n        const existing = merged[current.name];\n        merged[current.name] = existing\n            ? Object.assign(Object.assign(Object.assign({}, existing), current), { options: Object.assign(Object.assign({}, existing.options), current.options), data: Object.assign(Object.assign({}, existing.data), current.data) }) : current;\n        return merged;\n    }, {});\n    // IE11 does not support Object.values\n    return Object.keys(merged).map(key => merged[key]);\n}\n//# sourceMappingURL=mergeByName.js.map"]},"metadata":{},"sourceType":"module"}