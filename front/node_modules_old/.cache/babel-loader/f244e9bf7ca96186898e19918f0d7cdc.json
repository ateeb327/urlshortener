{"ast":null,"code":"import getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent';\n// Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed = false) {\n  const documentElement = getDocumentElement(offsetParent);\n  const rect = getBoundingClientRect(elementOrVirtualElement);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let offsets = {\n    x: 0,\n    y: 0\n  };\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' ||\n    // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.ts"],"names":[],"mappings":"AAEA,OAAO,qBAAqB,MAAM,yBAAyB;AAC3D,OAAO,aAAa,MAAM,iBAAiB;AAC3C,OAAO,WAAW,MAAM,eAAe;AACvC,SAAS,aAAa,QAAQ,cAAc;AAC5C,OAAO,mBAAmB,MAAM,uBAAuB;AACvD,OAAO,kBAAkB,MAAM,sBAAsB;AACrD,OAAO,cAAc,MAAM,kBAAkB;AAE7C;AACA;AACA;;;;AAIG;AACH,eAAc,SAAU,gBAAgB,CACtC,uBAAiD,EACjD,YAA8B,EAC9B,OAAA,GAAmB,KAAK,EAAA;EAExB,MAAM,eAAe,GAAG,kBAAkB,CAAC,YAAY,CAAC;EACxD,MAAM,IAAI,GAAG,qBAAqB,CAAC,uBAAuB,CAAC;EAC3D,MAAM,uBAAuB,GAAG,aAAa,CAAC,YAAY,CAAC;EAE3D,IAAI,MAAM,GAAG;IAAE,UAAU,EAAE,CAAC;IAAE,SAAS,EAAE;EAAC,CAAE;EAC5C,IAAI,OAAO,GAAG;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE;EAAC,CAAE;EAE5B,IAAI,uBAAuB,IAAK,CAAC,uBAAuB,IAAI,CAAC,OAAQ,EAAE;IACrE,IACE,WAAW,CAAC,YAAY,CAAC,KAAK,MAAM;IAAI;IACxC,cAAc,CAAC,eAAe,CAAC,EAC/B;MACA,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC;IACrC;IAED,IAAI,aAAa,CAAC,YAAY,CAAC,EAAE;MAC/B,OAAO,GAAG,qBAAqB,CAAC,YAAY,CAAC;MAC7C,OAAO,CAAC,CAAC,IAAI,YAAY,CAAC,UAAU;MACpC,OAAO,CAAC,CAAC,IAAI,YAAY,CAAC,SAAS;KACpC,MAAM,IAAI,eAAe,EAAE;MAC1B,OAAO,CAAC,CAAC,GAAG,mBAAmB,CAAC,eAAe,CAAC;IACjD;EACF;EAED,OAAO;IACL,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC;IAC5C,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;IAC1C,KAAK,EAAE,IAAI,CAAC,KAAK;IACjB,MAAM,EAAE,IAAI,CAAC;GACd;AACH","sourceRoot":"","sourcesContent":["import getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent';\n// Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed = false) {\n    const documentElement = getDocumentElement(offsetParent);\n    const rect = getBoundingClientRect(elementOrVirtualElement);\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    let scroll = { scrollLeft: 0, scrollTop: 0 };\n    let offsets = { x: 0, y: 0 };\n    if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {\n        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n            isScrollParent(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            offsets = getBoundingClientRect(offsetParent);\n            offsets.x += offsetParent.clientLeft;\n            offsets.y += offsetParent.clientTop;\n        }\n        else if (documentElement) {\n            offsets.x = getWindowScrollBarX(documentElement);\n        }\n    }\n    return {\n        x: rect.left + scroll.scrollLeft - offsets.x,\n        y: rect.top + scroll.scrollTop - offsets.y,\n        width: rect.width,\n        height: rect.height\n    };\n}\n//# sourceMappingURL=getCompositeRect.js.map"]},"metadata":{},"sourceType":"module"}