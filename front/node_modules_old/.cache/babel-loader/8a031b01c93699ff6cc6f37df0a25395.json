{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport const NotificationDrawerGroup = _a => {\n  var {\n      children,\n      className = '',\n      count,\n      isExpanded,\n      isRead = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onExpand = (event, expanded) => undefined,\n      title,\n      truncateTitle = 0,\n      tooltipPosition,\n      headingLevel: HeadingLevel = 'h1'\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\", \"headingLevel\"]);\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Title = React.createElement(\"div\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerGroupToggleTitle)\n  }), title);\n  return React.createElement(\"section\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)\n  }), React.createElement(HeadingLevel, null, React.createElement(\"button\", {\n    className: css(styles.notificationDrawerGroupToggle),\n    \"aria-expanded\": isExpanded,\n    onClick: e => onExpand(e, !isExpanded),\n    onKeyDown: e => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        onExpand(e, !isExpanded);\n      }\n    }\n  }, isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title, React.createElement(\"div\", {\n    className: css(styles.notificationDrawerGroupToggleCount)\n  }, React.createElement(Badge, {\n    isRead: isRead\n  }, count)), React.createElement(\"span\", {\n    className: \"pf-c-notification-drawer__group-toggle-icon\"\n  }, React.createElement(AngleRightIcon, null)))), children);\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';","map":{"version":3,"sources":["../../../../src/components/NotificationDrawer/NotificationDrawerGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport const NotificationDrawerGroup = (_a) => {\n    var { children, className = '', count, isExpanded, isRead = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onExpand = (event, expanded) => undefined, title, truncateTitle = 0, tooltipPosition, headingLevel: HeadingLevel = 'h1' } = _a, props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\", \"headingLevel\"]);\n    const titleRef = React.useRef(null);\n    const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n    React.useEffect(() => {\n        // Title will always truncate on overflow regardless of truncateTitle prop\n        const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n        if (isTooltipVisible !== showTooltip) {\n            setIsTooltipVisible(showTooltip);\n        }\n        if (!titleRef.current || !truncateTitle) {\n            return;\n        }\n        titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    }, [titleRef, truncateTitle, isTooltipVisible]);\n    const Title = (React.createElement(\"div\", Object.assign({}, (isTooltipVisible && { tabIndex: 0 }), { ref: titleRef, className: css(styles.notificationDrawerGroupToggleTitle) }), title));\n    return (React.createElement(\"section\", Object.assign({}, props, { className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className) }),\n        React.createElement(HeadingLevel, null,\n            React.createElement(\"button\", { className: css(styles.notificationDrawerGroupToggle), \"aria-expanded\": isExpanded, onClick: e => onExpand(e, !isExpanded), onKeyDown: e => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        onExpand(e, !isExpanded);\n                    }\n                } },\n                isTooltipVisible ? (React.createElement(Tooltip, { content: title, position: tooltipPosition }, Title)) : (Title),\n                React.createElement(\"div\", { className: css(styles.notificationDrawerGroupToggleCount) },\n                    React.createElement(Badge, { isRead: isRead }, count)),\n                React.createElement(\"span\", { className: \"pf-c-notification-drawer__group-toggle-icon\" },\n                    React.createElement(AngleRightIcon, null)))),\n        children));\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';\n//# sourceMappingURL=NotificationDrawerGroup.js.map"]},"metadata":{},"sourceType":"module"}