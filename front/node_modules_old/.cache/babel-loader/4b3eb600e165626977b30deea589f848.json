{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nexport class ContextSelectorToggle extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.toggle = React.createRef();\n    this.componentDidMount = () => {\n      document.addEventListener('mousedown', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    };\n    this.componentWillUnmount = () => {\n      document.removeEventListener('mousedown', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    };\n    this.onDocClick = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle\n      } = this.props;\n      if (isOpen && (parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && !parentRef.current.contains(event.target)) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n    this.onEscPress = event => {\n      const {\n        isOpen,\n        onToggle\n      } = this.props;\n      if (isOpen && event.key === KeyTypes.Escape) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n    this.onKeyDown = event => {\n      const {\n        isOpen,\n        onToggle,\n        onEnter\n      } = this.props;\n      if (event.key === KeyTypes.Tab && !isOpen || event.key !== KeyTypes.Enter) {\n        return;\n      }\n      event.preventDefault();\n      if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key !== KeyTypes.Space) && isOpen) {\n        onToggle(null, !isOpen);\n      } else if ((event.key === KeyTypes.Enter || event.key === ' ') && !isOpen) {\n        onToggle(null, !isOpen);\n        onEnter();\n      }\n    };\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        toggleText,\n        isOpen,\n        onToggle,\n        id,\n        isPlain,\n        isText,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isActive,\n        onEnter,\n        parentRef\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isPlain\", \"isText\", \"isActive\", \"onEnter\", \"parentRef\"]);\n    return React.createElement(\"button\", Object.assign({}, props, {\n      id: id,\n      ref: this.toggle,\n      className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, className),\n      type: \"button\",\n      onClick: event => onToggle(event, !isOpen),\n      \"aria-expanded\": isOpen,\n      onKeyDown: this.onKeyDown\n    }), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleText)\n    }, toggleText), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleIcon)\n    }, React.createElement(CaretDownIcon, {\n      \"aria-hidden\": true\n    })));\n  }\n}\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n  className: '',\n  toggleText: '',\n  isOpen: false,\n  onEnter: () => undefined,\n  parentRef: null,\n  isActive: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: (event, value) => undefined\n};","map":{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelectorToggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nexport class ContextSelectorToggle extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.toggle = React.createRef();\n        this.componentDidMount = () => {\n            document.addEventListener('mousedown', this.onDocClick);\n            document.addEventListener('touchstart', this.onDocClick);\n            document.addEventListener('keydown', this.onEscPress);\n        };\n        this.componentWillUnmount = () => {\n            document.removeEventListener('mousedown', this.onDocClick);\n            document.removeEventListener('touchstart', this.onDocClick);\n            document.removeEventListener('keydown', this.onEscPress);\n        };\n        this.onDocClick = (event) => {\n            const { isOpen, parentRef, onToggle } = this.props;\n            if (isOpen && (parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && !parentRef.current.contains(event.target)) {\n                onToggle(null, false);\n                this.toggle.current.focus();\n            }\n        };\n        this.onEscPress = (event) => {\n            const { isOpen, onToggle } = this.props;\n            if (isOpen && event.key === KeyTypes.Escape) {\n                onToggle(null, false);\n                this.toggle.current.focus();\n            }\n        };\n        this.onKeyDown = (event) => {\n            const { isOpen, onToggle, onEnter } = this.props;\n            if ((event.key === KeyTypes.Tab && !isOpen) || event.key !== KeyTypes.Enter) {\n                return;\n            }\n            event.preventDefault();\n            if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key !== KeyTypes.Space) && isOpen) {\n                onToggle(null, !isOpen);\n            }\n            else if ((event.key === KeyTypes.Enter || event.key === ' ') && !isOpen) {\n                onToggle(null, !isOpen);\n                onEnter();\n            }\n        };\n    }\n    render() {\n        const _a = this.props, { className, toggleText, isOpen, onToggle, id, isPlain, isText, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isActive, onEnter, parentRef } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isPlain\", \"isText\", \"isActive\", \"onEnter\", \"parentRef\"]);\n        return (React.createElement(\"button\", Object.assign({}, props, { id: id, ref: this.toggle, className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, className), type: \"button\", onClick: event => onToggle(event, !isOpen), \"aria-expanded\": isOpen, onKeyDown: this.onKeyDown }),\n            React.createElement(\"span\", { className: css(styles.contextSelectorToggleText) }, toggleText),\n            React.createElement(\"span\", { className: css(styles.contextSelectorToggleIcon) },\n                React.createElement(CaretDownIcon, { \"aria-hidden\": true }))));\n    }\n}\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined,\n    parentRef: null,\n    isActive: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (event, value) => undefined\n};\n//# sourceMappingURL=ContextSelectorToggle.js.map"]},"metadata":{},"sourceType":"module"}