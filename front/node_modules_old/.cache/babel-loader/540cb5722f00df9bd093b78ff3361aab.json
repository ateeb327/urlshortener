{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nconst buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\nexport class Toggle extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.buttonRef = React.createRef();\n    this.componentDidMount = () => {\n      document.addEventListener('click', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    };\n    this.componentWillUnmount = () => {\n      document.removeEventListener('click', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    };\n    this.onDocClick = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle,\n        getMenuRef\n      } = this.props;\n      const menuRef = getMenuRef && getMenuRef();\n      const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);\n      }\n    };\n    this.onEscPress = event => {\n      var _a, _b, _c;\n      const {\n        parentRef,\n        getMenuRef\n      } = this.props;\n      const menuRef = getMenuRef && getMenuRef();\n      const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n      if (this.props.isOpen && (event.key === KeyTypes.Escape || event.key === 'Tab') && (escFromToggle || escFromWithinMenu)) {\n        (_b = (_a = this.props).onToggle) === null || _b === void 0 ? void 0 : _b.call(_a, false, event);\n        (_c = this.buttonRef.current) === null || _c === void 0 ? void 0 : _c.focus();\n      }\n    };\n    this.onKeyDown = event => {\n      var _a, _b, _c, _d, _e, _f;\n      if (event.key === 'Tab' && !this.props.isOpen) {\n        return;\n      }\n      if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n        if (!this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n        event.preventDefault();\n        (_b = (_a = this.props).onToggle) === null || _b === void 0 ? void 0 : _b.call(_a, !this.props.isOpen, event);\n      } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n        if (!this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n        event.preventDefault();\n        (_d = (_c = this.props).onToggle) === null || _d === void 0 ? void 0 : _d.call(_c, !this.props.isOpen, event);\n        (_f = (_e = this.props).onEnter) === null || _f === void 0 ? void 0 : _f.call(_e);\n      }\n    };\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        children,\n        isOpen,\n        isDisabled,\n        isPlain,\n        isText,\n        isPrimary,\n        isSplitButton,\n        toggleVariant,\n        onToggle,\n        'aria-haspopup': ariaHasPopup,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isActive,\n        bubbleEvent,\n        onEnter,\n        parentRef,\n        getMenuRef,\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        id,\n        type\n      } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"isSplitButton\", \"toggleVariant\", \"onToggle\", 'aria-haspopup', \"isActive\", \"bubbleEvent\", \"onEnter\", \"parentRef\", \"getMenuRef\", \"id\", \"type\"]);\n    return React.createElement(DropdownContext.Consumer, null, ({\n      toggleClass\n    }) => React.createElement(\"button\", Object.assign({}, props, {\n      id: id,\n      ref: this.buttonRef,\n      className: css(isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, isPrimary && styles.modifiers.primary, toggleVariant && buttonVariantStyles[toggleVariant], className),\n      type: type || 'button',\n      onClick: event => onToggle === null || onToggle === void 0 ? void 0 : onToggle(!isOpen, event),\n      \"aria-expanded\": isOpen,\n      \"aria-haspopup\": ariaHasPopup,\n      onKeyDown: event => this.onKeyDown(event),\n      disabled: isDisabled\n    }), children));\n  }\n}\nToggle.displayName = 'Toggle';\nToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isDisabled: false,\n  isPlain: false,\n  isText: false,\n  isPrimary: false,\n  isSplitButton: false,\n  onToggle: () => {},\n  onEnter: () => {},\n  bubbleEvent: false\n};","map":{"version":3,"sources":["../../../../src/components/Dropdown/Toggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nconst buttonVariantStyles = {\n    default: '',\n    primary: styles.modifiers.primary,\n    secondary: styles.modifiers.secondary\n};\nexport class Toggle extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buttonRef = React.createRef();\n        this.componentDidMount = () => {\n            document.addEventListener('click', this.onDocClick);\n            document.addEventListener('touchstart', this.onDocClick);\n            document.addEventListener('keydown', this.onEscPress);\n        };\n        this.componentWillUnmount = () => {\n            document.removeEventListener('click', this.onDocClick);\n            document.removeEventListener('touchstart', this.onDocClick);\n            document.removeEventListener('keydown', this.onEscPress);\n        };\n        this.onDocClick = (event) => {\n            const { isOpen, parentRef, onToggle, getMenuRef } = this.props;\n            const menuRef = getMenuRef && getMenuRef();\n            const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n            const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n            if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n                onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);\n            }\n        };\n        this.onEscPress = (event) => {\n            var _a, _b, _c;\n            const { parentRef, getMenuRef } = this.props;\n            const menuRef = getMenuRef && getMenuRef();\n            const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n            const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n            if (this.props.isOpen &&\n                (event.key === KeyTypes.Escape || event.key === 'Tab') &&\n                (escFromToggle || escFromWithinMenu)) {\n                (_b = (_a = this.props).onToggle) === null || _b === void 0 ? void 0 : _b.call(_a, false, event);\n                (_c = this.buttonRef.current) === null || _c === void 0 ? void 0 : _c.focus();\n            }\n        };\n        this.onKeyDown = (event) => {\n            var _a, _b, _c, _d, _e, _f;\n            if (event.key === 'Tab' && !this.props.isOpen) {\n                return;\n            }\n            if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n                if (!this.props.bubbleEvent) {\n                    event.stopPropagation();\n                }\n                event.preventDefault();\n                (_b = (_a = this.props).onToggle) === null || _b === void 0 ? void 0 : _b.call(_a, !this.props.isOpen, event);\n            }\n            else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n                if (!this.props.bubbleEvent) {\n                    event.stopPropagation();\n                }\n                event.preventDefault();\n                (_d = (_c = this.props).onToggle) === null || _d === void 0 ? void 0 : _d.call(_c, !this.props.isOpen, event);\n                (_f = (_e = this.props).onEnter) === null || _f === void 0 ? void 0 : _f.call(_e);\n            }\n        };\n    }\n    render() {\n        const _a = this.props, { className, children, isOpen, isDisabled, isPlain, isText, isPrimary, isSplitButton, toggleVariant, onToggle, 'aria-haspopup': ariaHasPopup, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isActive, bubbleEvent, onEnter, parentRef, getMenuRef, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        id, type } = _a, props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"isSplitButton\", \"toggleVariant\", \"onToggle\", 'aria-haspopup', \"isActive\", \"bubbleEvent\", \"onEnter\", \"parentRef\", \"getMenuRef\", \"id\", \"type\"]);\n        return (React.createElement(DropdownContext.Consumer, null, ({ toggleClass }) => (React.createElement(\"button\", Object.assign({}, props, { id: id, ref: this.buttonRef, className: css(isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, isPrimary && styles.modifiers.primary, toggleVariant && buttonVariantStyles[toggleVariant], className), type: type || 'button', onClick: event => onToggle === null || onToggle === void 0 ? void 0 : onToggle(!isOpen, event), \"aria-expanded\": isOpen, \"aria-haspopup\": ariaHasPopup, onKeyDown: event => this.onKeyDown(event), disabled: isDisabled }), children))));\n    }\n}\nToggle.displayName = 'Toggle';\nToggle.defaultProps = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isDisabled: false,\n    isPlain: false,\n    isText: false,\n    isPrimary: false,\n    isSplitButton: false,\n    onToggle: () => { },\n    onEnter: () => { },\n    bubbleEvent: false\n};\n//# sourceMappingURL=Toggle.js.map"]},"metadata":{},"sourceType":"module"}