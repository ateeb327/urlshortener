{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Timestamp/timestamp';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport var TimestampFormat;\n(function (TimestampFormat) {\n  TimestampFormat[\"full\"] = \"full\";\n  TimestampFormat[\"long\"] = \"long\";\n  TimestampFormat[\"medium\"] = \"medium\";\n  TimestampFormat[\"short\"] = \"short\";\n})(TimestampFormat || (TimestampFormat = {}));\nexport var TimestampTooltipVariant;\n(function (TimestampTooltipVariant) {\n  TimestampTooltipVariant[\"default\"] = \"default\";\n  TimestampTooltipVariant[\"custom\"] = \"custom\";\n})(TimestampTooltipVariant || (TimestampTooltipVariant = {}));\nexport const Timestamp = _a => {\n  var {\n      children,\n      className,\n      customFormat,\n      date: dateProp,\n      dateFormat,\n      displaySuffix = '',\n      is12Hour,\n      locale,\n      timeFormat,\n      tooltip\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"customFormat\", \"date\", \"dateFormat\", \"displaySuffix\", \"is12Hour\", \"locale\", \"timeFormat\", \"tooltip\"]);\n  const [date, setDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n    if (isValidDate(initDate)) {\n      return initDate;\n    }\n    return new Date();\n  });\n  React.useEffect(() => {\n    const dateFromProp = new Date(dateProp);\n    if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {\n      setDate(dateFromProp);\n    } else if (!dateProp) {\n      setDate(new Date());\n    }\n  }, [dateProp]);\n  const hasTimeFormat = timeFormat && !customFormat;\n  const formatOptions = Object.assign(Object.assign(Object.assign({}, dateFormat && !customFormat && {\n    dateStyle: dateFormat\n  }), customFormat && Object.assign({}, customFormat)), is12Hour !== undefined && {\n    hour12: is12Hour\n  });\n  const dateAsLocaleString = new Date(date).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && {\n    timeStyle: timeFormat\n  }));\n  const defaultDisplay = `${dateAsLocaleString}${displaySuffix ? ' ' + displaySuffix : ''}`;\n  const utcTimeFormat = timeFormat !== 'short' ? 'medium' : 'short';\n  const convertToUTCString = date => new Date(date).toUTCString().slice(0, -3);\n  const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && {\n    timeStyle: utcTimeFormat\n  }));\n  const defaultTooltipContent = `${utcDateString}${(tooltip === null || tooltip === void 0 ? void 0 : tooltip.suffix) ? ' ' + tooltip.suffix : ' UTC'}`;\n  const {\n      dateTime\n    } = props,\n    propsWithoutDateTime = __rest(props, [\"dateTime\"]);\n  const timestamp = React.createElement(\"span\", Object.assign({\n    className: css(styles.timestamp, tooltip && styles.modifiers.helpText, className)\n  }, tooltip && {\n    tabIndex: 0\n  }, propsWithoutDateTime), React.createElement(\"time\", {\n    className: \"pf-c-timestamp__text\",\n    dateTime: dateTime || new Date(date).toISOString()\n  }, !children ? defaultDisplay : children));\n  return tooltip ? React.createElement(Tooltip, Object.assign({\n    content: tooltip.variant === TimestampTooltipVariant.default ? defaultTooltipContent : tooltip.content\n  }, tooltip.tooltipProps), timestamp) : timestamp;\n};\nTimestamp.displayName = 'Timestamp';","map":{"version":3,"sources":["../../../../src/components/Timestamp/Timestamp.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Timestamp/timestamp';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport var TimestampFormat;\n(function (TimestampFormat) {\n    TimestampFormat[\"full\"] = \"full\";\n    TimestampFormat[\"long\"] = \"long\";\n    TimestampFormat[\"medium\"] = \"medium\";\n    TimestampFormat[\"short\"] = \"short\";\n})(TimestampFormat || (TimestampFormat = {}));\nexport var TimestampTooltipVariant;\n(function (TimestampTooltipVariant) {\n    TimestampTooltipVariant[\"default\"] = \"default\";\n    TimestampTooltipVariant[\"custom\"] = \"custom\";\n})(TimestampTooltipVariant || (TimestampTooltipVariant = {}));\nexport const Timestamp = (_a) => {\n    var { children, className, customFormat, date: dateProp, dateFormat, displaySuffix = '', is12Hour, locale, timeFormat, tooltip } = _a, props = __rest(_a, [\"children\", \"className\", \"customFormat\", \"date\", \"dateFormat\", \"displaySuffix\", \"is12Hour\", \"locale\", \"timeFormat\", \"tooltip\"]);\n    const [date, setDate] = React.useState(() => {\n        const initDate = new Date(dateProp);\n        if (isValidDate(initDate)) {\n            return initDate;\n        }\n        return new Date();\n    });\n    React.useEffect(() => {\n        const dateFromProp = new Date(dateProp);\n        if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {\n            setDate(dateFromProp);\n        }\n        else if (!dateProp) {\n            setDate(new Date());\n        }\n    }, [dateProp]);\n    const hasTimeFormat = timeFormat && !customFormat;\n    const formatOptions = Object.assign(Object.assign(Object.assign({}, (dateFormat && !customFormat && { dateStyle: dateFormat })), (customFormat && Object.assign({}, customFormat))), (is12Hour !== undefined && { hour12: is12Hour }));\n    const dateAsLocaleString = new Date(date).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), (hasTimeFormat && { timeStyle: timeFormat })));\n    const defaultDisplay = `${dateAsLocaleString}${displaySuffix ? ' ' + displaySuffix : ''}`;\n    const utcTimeFormat = timeFormat !== 'short' ? 'medium' : 'short';\n    const convertToUTCString = (date) => new Date(date).toUTCString().slice(0, -3);\n    const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), (hasTimeFormat && { timeStyle: utcTimeFormat })));\n    const defaultTooltipContent = `${utcDateString}${(tooltip === null || tooltip === void 0 ? void 0 : tooltip.suffix) ? ' ' + tooltip.suffix : ' UTC'}`;\n    const { dateTime } = props, propsWithoutDateTime = __rest(props, [\"dateTime\"]);\n    const timestamp = (React.createElement(\"span\", Object.assign({ className: css(styles.timestamp, tooltip && styles.modifiers.helpText, className) }, (tooltip && { tabIndex: 0 }), propsWithoutDateTime),\n        React.createElement(\"time\", { className: \"pf-c-timestamp__text\", dateTime: dateTime || new Date(date).toISOString() }, !children ? defaultDisplay : children)));\n    return tooltip ? (React.createElement(Tooltip, Object.assign({ content: tooltip.variant === TimestampTooltipVariant.default ? defaultTooltipContent : tooltip.content }, tooltip.tooltipProps), timestamp)) : (timestamp);\n};\nTimestamp.displayName = 'Timestamp';\n//# sourceMappingURL=Timestamp.js.map"]},"metadata":{},"sourceType":"module"}