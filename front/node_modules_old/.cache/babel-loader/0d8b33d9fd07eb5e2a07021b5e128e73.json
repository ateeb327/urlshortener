{"ast":null,"code":"export var fileReaderType;\n(function (fileReaderType) {\n  fileReaderType[\"text\"] = \"text\";\n  fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\nexport function readFile(fileHandle, type) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/helpers/fileUtils.ts"],"names":[],"mappings":"AAAA,OAAA,IAAY,cAGX;AAHD,CAAA,UAAY,cAAc,EAAA;EACxB,cAAA,CAAA,MAAA,CAAA,GAAA,MAAa;EACb,cAAA,CAAA,SAAA,CAAA,GAAA,SAAmB;AACrB,CAAC,EAHW,cAAc,KAAd,cAAc,GAAA,CAAA,CAAA,CAAA,CAAA;AAK1B;;;;;;AAMG;AACH,OAAM,SAAU,QAAQ,CAAC,UAAgB,EAAE,IAAoB,EAAA;EAC7D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;IACrC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAA,CAAE;IAC/B,MAAM,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5C,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IAC3C,IAAI,IAAI,KAAK,cAAc,CAAC,IAAI,EAAE;MAChC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC;KAC9B,MAAM,IAAI,IAAI,KAAK,cAAc,CAAC,OAAO,EAAE;MAC1C,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC;KACjC,MAAM;MACL,MAAM,CAAC,cAAc,CAAC;IACvB;EACH,CAAC,CAAC;AACJ","sourceRoot":"","sourcesContent":["export var fileReaderType;\n(function (fileReaderType) {\n    fileReaderType[\"text\"] = \"text\";\n    fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\nexport function readFile(fileHandle, type) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        if (type === fileReaderType.text) {\n            reader.readAsText(fileHandle);\n        }\n        else if (type === fileReaderType.dataURL) {\n            reader.readAsDataURL(fileHandle);\n        }\n        else {\n            reject('unknown type');\n        }\n    });\n}\n//# sourceMappingURL=fileUtils.js.map"]},"metadata":{},"sourceType":"module"}