{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport const ClipboardCopyButton = _a => {\n  var {\n      onClick,\n      exitDelay = 0,\n      entryDelay = 300,\n      maxWidth = '100px',\n      position = 'top',\n      'aria-label': ariaLabel = 'Copyable input',\n      id,\n      textId,\n      children,\n      variant = 'control',\n      onTooltipHidden = () => {},\n      removeFindDomNode = false\n    } = _a,\n    props = __rest(_a, [\"onClick\", \"exitDelay\", \"entryDelay\", \"maxWidth\", \"position\", 'aria-label', \"id\", \"textId\", \"children\", \"variant\", \"onTooltipHidden\", \"removeFindDomNode\"]);\n  return React.createElement(Tooltip, {\n    trigger: \"mouseenter focus click\",\n    exitDelay: exitDelay,\n    entryDelay: entryDelay,\n    maxWidth: maxWidth,\n    position: position,\n    \"aria-live\": \"polite\",\n    aria: \"none\",\n    content: React.createElement(\"div\", null, children),\n    onTooltipHidden: onTooltipHidden,\n    removeFindDomNode: removeFindDomNode\n  }, React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: variant,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": `${id} ${textId}`\n  }, props), React.createElement(CopyIcon, null)));\n};\nClipboardCopyButton.displayName = 'ClipboardCopyButton';","map":{"version":3,"sources":["../../../../src/components/ClipboardCopy/ClipboardCopyButton.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,QAAQ,MAAM,kDAAkD;AACvE,SAAS,MAAM,QAAQ,WAAW;AAClC,SAAS,OAAO,QAAyB,YAAY;AAgDrD,OAAO,MAAM,mBAAmB,GAAuD,EAc5D,IAAI;MAdwD;MACrF,OAAO;MACP,SAAS,GAAG,CAAC;MACb,UAAU,GAAG,GAAG;MAChB,QAAQ,GAAG,OAAO;MAClB,QAAQ,GAAG,KAAK;MAChB,YAAY,EAAE,SAAS,GAAG,gBAAgB;MAC1C,EAAE;MACF,MAAM;MACN,QAAQ;MACR,OAAO,GAAG,SAAS;MACnB,eAAe,GAAG,CAAA,KAAK,CAAE,CAAC;MAC1B,iBAAiB,GAAG;IAAK,CAAA,GAAA,EAEA;IADtB,KAAK,GAAA,MAAA,CAAA,EAAA,EAb6E,CAAA,SAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,mBAAA,CActF,CADS;EACsB,OAC9B,KAAA,CAAA,aAAA,CAAC,OAAO,EAAA;IACN,OAAO,EAAC,wBAAwB;IAChC,SAAS,EAAE,SAAS;IACpB,UAAU,EAAE,UAAU;IACtB,QAAQ,EAAE,QAAQ;IAClB,QAAQ,EAAE,QAAQ;IAAA,WAAA,EACR,QAAQ;IAClB,IAAI,EAAC,MAAM;IACX,OAAO,EAAE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,QAAQ,CAAO;IAC9B,eAAe,EAAE,eAAe;IAChC,iBAAiB,EAAE;EAAiB,CAAA,EAEpC,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA;IACL,IAAI,EAAC,QAAQ;IACb,OAAO,EAAE,OAAO;IAChB,OAAO,EAAE,OAAO;IAAA,YAAA,EACJ,SAAS;IACrB,EAAE,EAAE,EAAE;IAAA,iBAAA,EACW,GAAG,EAAE,IAAI,MAAM;EAAE,CAAA,EAC9B,KAAK,CAAA,EAET,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA,IAAA,CAAG,CACL,CACD;CACX;AACD,mBAAmB,CAAC,WAAW,GAAG,qBAAqB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport const ClipboardCopyButton = (_a) => {\n    var { onClick, exitDelay = 0, entryDelay = 300, maxWidth = '100px', position = 'top', 'aria-label': ariaLabel = 'Copyable input', id, textId, children, variant = 'control', onTooltipHidden = () => { }, removeFindDomNode = false } = _a, props = __rest(_a, [\"onClick\", \"exitDelay\", \"entryDelay\", \"maxWidth\", \"position\", 'aria-label', \"id\", \"textId\", \"children\", \"variant\", \"onTooltipHidden\", \"removeFindDomNode\"]);\n    return (React.createElement(Tooltip, { trigger: \"mouseenter focus click\", exitDelay: exitDelay, entryDelay: entryDelay, maxWidth: maxWidth, position: position, \"aria-live\": \"polite\", aria: \"none\", content: React.createElement(\"div\", null, children), onTooltipHidden: onTooltipHidden, removeFindDomNode: removeFindDomNode },\n        React.createElement(Button, Object.assign({ type: \"button\", variant: variant, onClick: onClick, \"aria-label\": ariaLabel, id: id, \"aria-labelledby\": `${id} ${textId}` }, props),\n            React.createElement(CopyIcon, null))));\n};\nClipboardCopyButton.displayName = 'ClipboardCopyButton';\n//# sourceMappingURL=ClipboardCopyButton.js.map"]},"metadata":{},"sourceType":"module"}