{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Badge/badge';\nexport const Badge = _a => {\n  var {\n      isRead = false,\n      className = '',\n      children = '',\n      screenReaderText\n    } = _a,\n    props = __rest(_a, [\"isRead\", \"className\", \"children\", \"screenReaderText\"]);\n  return React.createElement(\"span\", Object.assign({}, props, {\n    className: css(styles.badge, isRead ? styles.modifiers.read : styles.modifiers.unread, className)\n  }), children, screenReaderText && React.createElement(\"span\", {\n    className: \"pf-screen-reader\"\n  }, screenReaderText));\n};\nBadge.displayName = 'Badge';","map":{"version":3,"sources":["../../../../src/components/Badge/Badge.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,qDAAqD;AAaxE,OAAO,MAAM,KAAK,GAAyC,EAM9C,IAAI;MAN0C;MACzD,MAAM,GAAG,KAAK;MACd,SAAS,GAAG,EAAE;MACd,QAAQ,GAAG,EAAE;MACb;IAAgB,CAAA,GAAA,EAEL;IADR,KAAK,GAAA,MAAA,CAAA,EAAA,EALiD,CAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,kBAAA,CAM1D,CADS;EACQ,OAChB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACM,KAAK,EAAA;IACT,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,EAAG,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,EAAU,SAAS;EAAC,CAAA,CAAA,EAEzG,QAAQ,EACR,gBAAgB,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAkB,CAAA,EAAE,gBAAgB,CAAQ,CAC5E;CACR;AACD,KAAK,CAAC,WAAW,GAAG,OAAO","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Badge/badge';\nexport const Badge = (_a) => {\n    var { isRead = false, className = '', children = '', screenReaderText } = _a, props = __rest(_a, [\"isRead\", \"className\", \"children\", \"screenReaderText\"]);\n    return (React.createElement(\"span\", Object.assign({}, props, { className: css(styles.badge, (isRead ? styles.modifiers.read : styles.modifiers.unread), className) }),\n        children,\n        screenReaderText && React.createElement(\"span\", { className: \"pf-screen-reader\" }, screenReaderText)));\n};\nBadge.displayName = 'Badge';\n//# sourceMappingURL=Badge.js.map"]},"metadata":{},"sourceType":"module"}