{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplate } from './ToggleTemplate';\nexport class PaginationOptionsMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.parentRef = React.createRef();\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    };\n    this.handleNewPerPage = (_evt, newPerPage) => {\n      const {\n        page,\n        onPerPageSelect,\n        itemCount,\n        defaultToFullPage\n      } = this.props;\n      let newPage = page;\n      while (Math.ceil(itemCount / newPerPage) < newPage) {\n        newPage--;\n      }\n      if (defaultToFullPage) {\n        if (itemCount / newPerPage !== newPage) {\n          while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n            newPage--;\n          }\n        }\n      }\n      const startIdx = (newPage - 1) * newPerPage;\n      const endIdx = newPage * newPerPage;\n      return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n    };\n    this.renderItems = () => {\n      const {\n        perPageOptions,\n        perPage,\n        perPageSuffix\n      } = this.props;\n      return perPageOptions.map(({\n        value,\n        title\n      }) => React.createElement(DropdownItem, {\n        key: value,\n        component: \"button\",\n        \"data-action\": `per-page-${value}`,\n        className: css(perPage === value && 'pf-m-selected'),\n        onClick: event => this.handleNewPerPage(event, value)\n      }, title, ` ${perPageSuffix}`, perPage === value && React.createElement(\"div\", {\n        className: css(styles.optionsMenuMenuItemIcon)\n      }, React.createElement(CheckIcon, null))));\n    };\n    this.state = {\n      isOpen: false\n    };\n  }\n  render() {\n    const {\n      widgetId,\n      isDisabled,\n      itemsPerPageTitle,\n      dropDirection,\n      optionsToggle,\n      perPageOptions,\n      toggleTemplate,\n      firstIndex,\n      lastIndex,\n      itemCount,\n      itemsTitle,\n      ofWord,\n      perPageComponent\n    } = this.props;\n    const {\n      isOpen\n    } = this.state;\n    return React.createElement(DropdownContext.Provider, {\n      value: Object.assign(Object.assign({}, widgetId && {\n        id: widgetId\n      }), {\n        onSelect: this.onSelect,\n        toggleIndicatorClass: perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon,\n        toggleTextClass: styles.optionsMenuToggleText,\n        menuClass: styles.optionsMenuMenu,\n        itemClass: styles.optionsMenuMenuItem,\n        toggleClass: ' ',\n        baseClass: styles.optionsMenu,\n        disabledClass: styles.modifiers.disabled,\n        menuComponent: 'ul',\n        baseComponent: 'div',\n        ouiaComponentType: PaginationOptionsMenu.displayName\n      })\n    }, React.createElement(DropdownWithContext, {\n      direction: dropDirection,\n      isOpen: isOpen,\n      toggle: React.createElement(OptionsToggle, {\n        optionsToggle: optionsToggle,\n        itemsPerPageTitle: itemsPerPageTitle,\n        showToggle: perPageOptions && perPageOptions.length > 0,\n        onToggle: this.onToggle,\n        isOpen: isOpen,\n        widgetId: widgetId,\n        firstIndex: firstIndex,\n        lastIndex: lastIndex,\n        itemCount: itemCount,\n        itemsTitle: itemsTitle,\n        ofWord: ofWord,\n        toggleTemplate: toggleTemplate,\n        parentRef: this.parentRef.current,\n        isDisabled: isDisabled,\n        perPageComponent: perPageComponent\n      }),\n      dropdownItems: this.renderItems(),\n      isPlain: true\n    }));\n  }\n}\nPaginationOptionsMenu.displayName = 'PaginationOptionsMenu';\nPaginationOptionsMenu.defaultProps = {\n  className: '',\n  widgetId: '',\n  isDisabled: false,\n  dropDirection: DropdownDirection.down,\n  perPageOptions: [],\n  itemsPerPageTitle: 'Items per page',\n  perPageSuffix: 'per page',\n  optionsToggle: '',\n  ofWord: 'of',\n  perPage: 0,\n  firstIndex: 0,\n  lastIndex: 0,\n  defaultToFullPage: false,\n  itemsTitle: 'items',\n  toggleTemplate: ToggleTemplate,\n  onPerPageSelect: () => null,\n  perPageComponent: 'div'\n};","map":{"version":3,"sources":["../../../../src/components/Pagination/PaginationOptionsMenu.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplate } from './ToggleTemplate';\nexport class PaginationOptionsMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parentRef = React.createRef();\n        this.onToggle = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.onSelect = () => {\n            this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\n        };\n        this.handleNewPerPage = (_evt, newPerPage) => {\n            const { page, onPerPageSelect, itemCount, defaultToFullPage } = this.props;\n            let newPage = page;\n            while (Math.ceil(itemCount / newPerPage) < newPage) {\n                newPage--;\n            }\n            if (defaultToFullPage) {\n                if (itemCount / newPerPage !== newPage) {\n                    while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n                        newPage--;\n                    }\n                }\n            }\n            const startIdx = (newPage - 1) * newPerPage;\n            const endIdx = newPage * newPerPage;\n            return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n        };\n        this.renderItems = () => {\n            const { perPageOptions, perPage, perPageSuffix } = this.props;\n            return perPageOptions.map(({ value, title }) => (React.createElement(DropdownItem, { key: value, component: \"button\", \"data-action\": `per-page-${value}`, className: css(perPage === value && 'pf-m-selected'), onClick: event => this.handleNewPerPage(event, value) },\n                title,\n                ` ${perPageSuffix}`,\n                perPage === value && (React.createElement(\"div\", { className: css(styles.optionsMenuMenuItemIcon) },\n                    React.createElement(CheckIcon, null))))));\n        };\n        this.state = {\n            isOpen: false\n        };\n    }\n    render() {\n        const { widgetId, isDisabled, itemsPerPageTitle, dropDirection, optionsToggle, perPageOptions, toggleTemplate, firstIndex, lastIndex, itemCount, itemsTitle, ofWord, perPageComponent } = this.props;\n        const { isOpen } = this.state;\n        return (React.createElement(DropdownContext.Provider, { value: Object.assign(Object.assign({}, (widgetId && { id: widgetId })), { onSelect: this.onSelect, toggleIndicatorClass: perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon, toggleTextClass: styles.optionsMenuToggleText, menuClass: styles.optionsMenuMenu, itemClass: styles.optionsMenuMenuItem, toggleClass: ' ', baseClass: styles.optionsMenu, disabledClass: styles.modifiers.disabled, menuComponent: 'ul', baseComponent: 'div', ouiaComponentType: PaginationOptionsMenu.displayName }) },\n            React.createElement(DropdownWithContext, { direction: dropDirection, isOpen: isOpen, toggle: React.createElement(OptionsToggle, { optionsToggle: optionsToggle, itemsPerPageTitle: itemsPerPageTitle, showToggle: perPageOptions && perPageOptions.length > 0, onToggle: this.onToggle, isOpen: isOpen, widgetId: widgetId, firstIndex: firstIndex, lastIndex: lastIndex, itemCount: itemCount, itemsTitle: itemsTitle, ofWord: ofWord, toggleTemplate: toggleTemplate, parentRef: this.parentRef.current, isDisabled: isDisabled, perPageComponent: perPageComponent }), dropdownItems: this.renderItems(), isPlain: true })));\n    }\n}\nPaginationOptionsMenu.displayName = 'PaginationOptionsMenu';\nPaginationOptionsMenu.defaultProps = {\n    className: '',\n    widgetId: '',\n    isDisabled: false,\n    dropDirection: DropdownDirection.down,\n    perPageOptions: [],\n    itemsPerPageTitle: 'Items per page',\n    perPageSuffix: 'per page',\n    optionsToggle: '',\n    ofWord: 'of',\n    perPage: 0,\n    firstIndex: 0,\n    lastIndex: 0,\n    defaultToFullPage: false,\n    itemsTitle: 'items',\n    toggleTemplate: ToggleTemplate,\n    onPerPageSelect: () => null,\n    perPageComponent: 'div'\n};\n//# sourceMappingURL=PaginationOptionsMenu.js.map"]},"metadata":{},"sourceType":"module"}