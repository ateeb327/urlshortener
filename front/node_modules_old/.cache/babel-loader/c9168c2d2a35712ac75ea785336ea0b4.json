{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid',\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n(function (DataListWrapModifier) {\n  DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n  DataListWrapModifier[\"truncate\"] = \"truncate\";\n  DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\nexport const DataListContext = React.createContext({\n  isSelectable: false\n});\nconst moveItem = (arr, i1, toIndex) => {\n  const fromIndex = arr.indexOf(i1);\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n  return arr;\n};\nexport class DataList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dragFinished = false;\n    this.html5DragDrop = false;\n    this.arrayCopy = React.Children.toArray(this.props.children);\n    this.ref = React.createRef();\n    this.state = {\n      tempItemOrder: [],\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    };\n    this.getIndex = id => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n    this.move = itemOrder => {\n      const ulNode = this.ref.current;\n      const nodes = Array.from(ulNode.children);\n      if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n        return;\n      }\n      while (ulNode.firstChild) {\n        ulNode.removeChild(ulNode.lastChild);\n      }\n      itemOrder.forEach(id => {\n        ulNode.appendChild(nodes.find(n => n.id === id));\n      });\n    };\n    this.dragStart0 = el => {\n      const {\n        onDragStart\n      } = this.props;\n      const draggedItemId = el.id;\n      el.classList.add(styles.modifiers.ghostRow);\n      el.setAttribute('aria-pressed', 'true');\n      this.setState({\n        draggedItemId,\n        dragging: true\n      });\n      onDragStart && onDragStart(draggedItemId);\n    };\n    this.dragStart = evt => {\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n      this.dragStart0(evt.currentTarget);\n    };\n    this.onDragCancel = () => {\n      this.move(this.props.itemOrder);\n      Array.from(this.ref.current.children).forEach(el => {\n        el.classList.remove(styles.modifiers.ghostRow);\n        el.classList.remove(styles.modifiers.dragOver);\n        el.setAttribute('aria-pressed', 'false');\n      });\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n      if (this.props.onDragCancel) {\n        this.props.onDragCancel();\n      }\n    };\n    this.dragLeave = evt => {\n      // This event false fires when we call `this.move()`, so double check we're out of zone\n      if (!this.isValidDrop(evt)) {\n        this.move(this.props.itemOrder);\n        this.setState({\n          draggingToItemIndex: null\n        });\n      }\n    };\n    this.dragEnd0 = el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n    };\n    this.dragEnd = evt => {\n      this.dragEnd0(evt.target);\n    };\n    this.isValidDrop = evt => {\n      const ulRect = this.ref.current.getBoundingClientRect();\n      return evt.clientX > ulRect.x && evt.clientX < ulRect.x + ulRect.width && evt.clientY > ulRect.y && evt.clientY < ulRect.y + ulRect.height;\n    };\n    this.drop = evt => {\n      if (this.isValidDrop(evt)) {\n        this.props.onDragFinish(this.state.tempItemOrder);\n      } else {\n        this.onDragCancel();\n      }\n    };\n    this.dragOver0 = id => {\n      const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n      if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n        const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n        this.move(tempItemOrder);\n        this.setState({\n          draggingToItemIndex,\n          tempItemOrder\n        });\n      }\n    };\n    this.dragOver = evt => {\n      evt.preventDefault();\n      const curListItem = evt.target.closest('li');\n      if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n        // We're going nowhere, don't bother calling `dragOver0`\n        return null;\n      } else {\n        this.dragOver0(curListItem.id);\n      }\n    };\n    this.handleDragButtonKeys = evt => {\n      const {\n        dragging\n      } = this.state;\n      if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n        if (dragging) {\n          evt.preventDefault();\n        }\n        return;\n      }\n      evt.preventDefault();\n      const dragItem = evt.target.closest('li');\n      if (evt.key === ' ' || evt.key === 'Enter' && !dragging) {\n        this.dragStart0(dragItem);\n      } else if (dragging) {\n        if (evt.key === 'Escape' || evt.key === 'Enter') {\n          this.setState({\n            dragging: false\n          });\n          this.dragFinished = true;\n          if (evt.key === 'Enter') {\n            this.dragEnd0(dragItem);\n            this.props.onDragFinish(this.state.tempItemOrder);\n          } else {\n            this.onDragCancel();\n          }\n        } else if (evt.key === 'ArrowUp') {\n          const nextSelection = dragItem.previousSibling;\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        } else if (evt.key === 'ArrowDown') {\n          const nextSelection = dragItem.nextSibling;\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        }\n      }\n    };\n    this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n    if (this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n  }\n  componentDidUpdate(oldProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        children,\n        onSelectDataListItem,\n        selectedDataListItemId,\n        isCompact,\n        wrapModifier,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onDragStart,\n        onDragMove,\n        onDragCancel,\n        onDragFinish,\n        gridBreakpoint,\n        itemOrder,\n        selectableRow\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\", \"selectableRow\"]);\n    const {\n      dragging\n    } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n    const updateSelectedDataListItem = id => {\n      onSelectDataListItem(id);\n    };\n    const dragProps = this.html5DragDrop && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n    return React.createElement(DataListContext.Provider, {\n      value: {\n        isSelectable,\n        selectedDataListItemId,\n        updateSelectedDataListItem,\n        selectableRow,\n        isDraggable: this.html5DragDrop,\n        dragStart: this.dragStart,\n        dragEnd: this.dragEnd,\n        drop: this.drop,\n        dragKeyHandler: this.handleDragButtonKeys\n      }\n    }, React.createElement(\"ul\", Object.assign({\n      className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className),\n      style: props.style\n    }, props, dragProps, {\n      ref: this.ref\n    }), children));\n  }\n}\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n  children: null,\n  className: '',\n  selectedDataListItemId: '',\n  isCompact: false,\n  gridBreakpoint: 'md',\n  wrapModifier: null\n};","map":{"version":3,"sources":["../../../../src/components/DataList/DataList.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nconst gridBreakpointClasses = {\n    none: stylesGrid.modifiers.gridNone,\n    always: 'pf-m-grid',\n    sm: stylesGrid.modifiers.gridSm,\n    md: stylesGrid.modifiers.gridMd,\n    lg: stylesGrid.modifiers.gridLg,\n    xl: stylesGrid.modifiers.gridXl,\n    '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n(function (DataListWrapModifier) {\n    DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n    DataListWrapModifier[\"truncate\"] = \"truncate\";\n    DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\nexport const DataListContext = React.createContext({\n    isSelectable: false\n});\nconst moveItem = (arr, i1, toIndex) => {\n    const fromIndex = arr.indexOf(i1);\n    if (fromIndex === toIndex) {\n        return arr;\n    }\n    const temp = arr.splice(fromIndex, 1);\n    arr.splice(toIndex, 0, temp[0]);\n    return arr;\n};\nexport class DataList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dragFinished = false;\n        this.html5DragDrop = false;\n        this.arrayCopy = React.Children.toArray(this.props.children);\n        this.ref = React.createRef();\n        this.state = {\n            tempItemOrder: [],\n            draggedItemId: null,\n            draggingToItemIndex: null,\n            dragging: false\n        };\n        this.getIndex = (id) => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n        this.move = (itemOrder) => {\n            const ulNode = this.ref.current;\n            const nodes = Array.from(ulNode.children);\n            if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n                return;\n            }\n            while (ulNode.firstChild) {\n                ulNode.removeChild(ulNode.lastChild);\n            }\n            itemOrder.forEach(id => {\n                ulNode.appendChild(nodes.find(n => n.id === id));\n            });\n        };\n        this.dragStart0 = (el) => {\n            const { onDragStart } = this.props;\n            const draggedItemId = el.id;\n            el.classList.add(styles.modifiers.ghostRow);\n            el.setAttribute('aria-pressed', 'true');\n            this.setState({\n                draggedItemId,\n                dragging: true\n            });\n            onDragStart && onDragStart(draggedItemId);\n        };\n        this.dragStart = (evt) => {\n            evt.dataTransfer.effectAllowed = 'move';\n            evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n            this.dragStart0(evt.currentTarget);\n        };\n        this.onDragCancel = () => {\n            this.move(this.props.itemOrder);\n            Array.from(this.ref.current.children).forEach(el => {\n                el.classList.remove(styles.modifiers.ghostRow);\n                el.classList.remove(styles.modifiers.dragOver);\n                el.setAttribute('aria-pressed', 'false');\n            });\n            this.setState({\n                draggedItemId: null,\n                draggingToItemIndex: null,\n                dragging: false\n            });\n            if (this.props.onDragCancel) {\n                this.props.onDragCancel();\n            }\n        };\n        this.dragLeave = (evt) => {\n            // This event false fires when we call `this.move()`, so double check we're out of zone\n            if (!this.isValidDrop(evt)) {\n                this.move(this.props.itemOrder);\n                this.setState({\n                    draggingToItemIndex: null\n                });\n            }\n        };\n        this.dragEnd0 = (el) => {\n            el.classList.remove(styles.modifiers.ghostRow);\n            el.classList.remove(styles.modifiers.dragOver);\n            el.setAttribute('aria-pressed', 'false');\n            this.setState({\n                draggedItemId: null,\n                draggingToItemIndex: null,\n                dragging: false\n            });\n        };\n        this.dragEnd = (evt) => {\n            this.dragEnd0(evt.target);\n        };\n        this.isValidDrop = (evt) => {\n            const ulRect = this.ref.current.getBoundingClientRect();\n            return (evt.clientX > ulRect.x &&\n                evt.clientX < ulRect.x + ulRect.width &&\n                evt.clientY > ulRect.y &&\n                evt.clientY < ulRect.y + ulRect.height);\n        };\n        this.drop = (evt) => {\n            if (this.isValidDrop(evt)) {\n                this.props.onDragFinish(this.state.tempItemOrder);\n            }\n            else {\n                this.onDragCancel();\n            }\n        };\n        this.dragOver0 = (id) => {\n            const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n            if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n                const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n                this.move(tempItemOrder);\n                this.setState({\n                    draggingToItemIndex,\n                    tempItemOrder\n                });\n            }\n        };\n        this.dragOver = (evt) => {\n            evt.preventDefault();\n            const curListItem = evt.target.closest('li');\n            if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n                // We're going nowhere, don't bother calling `dragOver0`\n                return null;\n            }\n            else {\n                this.dragOver0(curListItem.id);\n            }\n        };\n        this.handleDragButtonKeys = (evt) => {\n            const { dragging } = this.state;\n            if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n                if (dragging) {\n                    evt.preventDefault();\n                }\n                return;\n            }\n            evt.preventDefault();\n            const dragItem = evt.target.closest('li');\n            if (evt.key === ' ' || (evt.key === 'Enter' && !dragging)) {\n                this.dragStart0(dragItem);\n            }\n            else if (dragging) {\n                if (evt.key === 'Escape' || evt.key === 'Enter') {\n                    this.setState({\n                        dragging: false\n                    });\n                    this.dragFinished = true;\n                    if (evt.key === 'Enter') {\n                        this.dragEnd0(dragItem);\n                        this.props.onDragFinish(this.state.tempItemOrder);\n                    }\n                    else {\n                        this.onDragCancel();\n                    }\n                }\n                else if (evt.key === 'ArrowUp') {\n                    const nextSelection = dragItem.previousSibling;\n                    if (nextSelection) {\n                        this.dragOver0(nextSelection.id);\n                        dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n                    }\n                }\n                else if (evt.key === 'ArrowDown') {\n                    const nextSelection = dragItem.nextSibling;\n                    if (nextSelection) {\n                        this.dragOver0(nextSelection.id);\n                        dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n                    }\n                }\n            }\n        };\n        this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n        if (this.html5DragDrop) {\n            // eslint-disable-next-line no-console\n            console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n        }\n    }\n    componentDidUpdate(oldProps) {\n        if (this.dragFinished) {\n            this.dragFinished = false;\n            this.setState({\n                tempItemOrder: [...this.props.itemOrder],\n                draggedItemId: null,\n                dragging: false\n            });\n        }\n        if (oldProps.itemOrder !== this.props.itemOrder) {\n            this.move(this.props.itemOrder);\n        }\n    }\n    render() {\n        const _a = this.props, { className, children, onSelectDataListItem, selectedDataListItemId, isCompact, wrapModifier, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onDragStart, onDragMove, onDragCancel, onDragFinish, gridBreakpoint, itemOrder, selectableRow } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\", \"selectableRow\"]);\n        const { dragging } = this.state;\n        const isSelectable = onSelectDataListItem !== undefined;\n        const updateSelectedDataListItem = (id) => {\n            onSelectDataListItem(id);\n        };\n        const dragProps = this.html5DragDrop && {\n            onDragOver: this.dragOver,\n            onDrop: this.dragOver,\n            onDragLeave: this.dragLeave\n        };\n        return (React.createElement(DataListContext.Provider, { value: {\n                isSelectable,\n                selectedDataListItemId,\n                updateSelectedDataListItem,\n                selectableRow,\n                isDraggable: this.html5DragDrop,\n                dragStart: this.dragStart,\n                dragEnd: this.dragEnd,\n                drop: this.drop,\n                dragKeyHandler: this.handleDragButtonKeys\n            } },\n            React.createElement(\"ul\", Object.assign({ className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className), style: props.style }, props, dragProps, { ref: this.ref }), children)));\n    }\n}\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n    children: null,\n    className: '',\n    selectedDataListItemId: '',\n    isCompact: false,\n    gridBreakpoint: 'md',\n    wrapModifier: null\n};\n//# sourceMappingURL=DataList.js.map"]},"metadata":{},"sourceType":"module"}