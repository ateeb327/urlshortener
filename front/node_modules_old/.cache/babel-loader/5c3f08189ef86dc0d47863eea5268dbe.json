{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nconst TreeViewListItemBase = ({\n  name,\n  title,\n  id,\n  isExpanded,\n  defaultExpanded = false,\n  children = null,\n  onSelect,\n  onCheck,\n  hasCheck = false,\n  checkProps = {\n    checked: false\n  },\n  hasBadge = false,\n  customBadgeContent,\n  badgeProps = {\n    isRead: true\n  },\n  isSelectable = false,\n  isCompact,\n  activeItems = [],\n  itemData,\n  parentItem,\n  icon,\n  expandedIcon,\n  action,\n  compareItems,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo\n}) => {\n  const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n  useEffect(() => {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    } else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n      setIsExpanded(internalIsExpanded || defaultExpanded);\n    }\n  }, [isExpanded, defaultExpanded]);\n  let Component = 'button';\n  if (hasCheck) {\n    Component = 'label';\n  } else if (isSelectable) {\n    Component = 'div';\n  }\n  const ToggleComponent = hasCheck || isSelectable ? 'button' : 'span';\n  const renderToggle = randomId => React.createElement(ToggleComponent, Object.assign({\n    className: css(styles.treeViewNodeToggle),\n    onClick: evt => {\n      if (isSelectable || hasCheck) {\n        setIsExpanded(!internalIsExpanded);\n      }\n      if (isSelectable) {\n        evt.stopPropagation();\n      }\n    }\n  }, (hasCheck || isSelectable) && {\n    'aria-labelledby': `label-${randomId}`\n  }, ToggleComponent === 'button' && {\n    type: 'button'\n  }, {\n    tabIndex: -1\n  }), React.createElement(\"span\", {\n    className: css(styles.treeViewNodeToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": \"true\"\n  })));\n  const renderCheck = randomId => React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: evt => onCheck && onCheck(evt, itemData, parentItem),\n    onClick: evt => evt.stopPropagation(),\n    ref: elem => elem && (elem.indeterminate = checkProps.checked === null)\n  }, checkProps, {\n    checked: checkProps.checked === null ? false : checkProps.checked,\n    id: randomId,\n    tabIndex: -1\n  })));\n  const iconRendered = React.createElement(\"span\", {\n    className: css(styles.treeViewNodeIcon)\n  }, !internalIsExpanded && icon, internalIsExpanded && (expandedIcon || icon));\n  const renderNodeContent = () => {\n    const content = React.createElement(React.Fragment, null, isCompact && title && React.createElement(\"span\", {\n      className: css(styles.treeViewNodeTitle)\n    }, title), isSelectable ? React.createElement(\"button\", {\n      tabIndex: -1,\n      className: css(styles.treeViewNodeText),\n      type: \"button\"\n    }, name) : React.createElement(\"span\", {\n      className: css(styles.treeViewNodeText)\n    }, name));\n    return isCompact ? React.createElement(\"span\", {\n      className: css(styles.treeViewNodeContent)\n    }, content) : content;\n  };\n  const badgeRendered = React.createElement(React.Fragment, null, hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)), hasBadge && !children && customBadgeContent !== undefined && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)));\n  return React.createElement(\"li\", Object.assign({\n    id: id,\n    className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)\n  }, internalIsExpanded && {\n    'aria-expanded': 'true'\n  }, {\n    role: \"treeitem\",\n    tabIndex: -1\n  }), React.createElement(\"div\", {\n    className: css(styles.treeViewContent)\n  }, React.createElement(GenerateId, {\n    prefix: isSelectable ? 'selectable-id' : 'checkbox-id'\n  }, randomId => React.createElement(Component, Object.assign({\n    className: css(styles.treeViewNode, children && (isSelectable || hasCheck) && styles.modifiers.selectable, (!children || isSelectable) && activeItems && activeItems.length > 0 && activeItems.some(item => compareItems && item && compareItems(item, itemData)) ? styles.modifiers.current : ''),\n    onClick: evt => {\n      if (!hasCheck) {\n        onSelect && onSelect(evt, itemData, parentItem);\n        if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n          setIsExpanded(!internalIsExpanded);\n        }\n      }\n    }\n  }, hasCheck && {\n    htmlFor: randomId\n  }, (hasCheck || isSelectable && children) && {\n    id: `label-${randomId}`\n  }, Component === 'button' && {\n    type: 'button'\n  }), React.createElement(\"span\", {\n    className: css(styles.treeViewNodeContainer)\n  }, children && renderToggle(randomId), hasCheck && renderCheck(randomId), icon && iconRendered, renderNodeContent(), badgeRendered))), action && React.createElement(\"div\", {\n    className: css(styles.treeViewAction)\n  }, action)), internalIsExpanded && children);\n};\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n  const prevIncludes = prevProps.activeItems && prevProps.activeItems.length > 0 && prevProps.activeItems.some(item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n  const nextIncludes = nextProps.activeItems && nextProps.activeItems.length > 0 && nextProps.activeItems.some(item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n  if (prevIncludes || nextIncludes) {\n    return false;\n  }\n  if (prevProps.name !== nextProps.name || prevProps.title !== nextProps.title || prevProps.id !== nextProps.id || prevProps.isExpanded !== nextProps.isExpanded || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.onSelect !== nextProps.onSelect || prevProps.onCheck !== nextProps.onCheck || prevProps.hasCheck !== nextProps.hasCheck || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.customBadgeContent !== nextProps.customBadgeContent || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isCompact !== nextProps.isCompact || prevProps.icon !== nextProps.icon || prevProps.expandedIcon !== nextProps.expandedIcon || prevProps.action !== nextProps.action || prevProps.parentItem !== nextProps.parentItem || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n  return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';","map":{"version":3,"sources":["../../../../src/components/TreeView/TreeViewListItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nconst TreeViewListItemBase = ({ name, title, id, isExpanded, defaultExpanded = false, children = null, onSelect, onCheck, hasCheck = false, checkProps = {\n    checked: false\n}, hasBadge = false, customBadgeContent, badgeProps = { isRead: true }, isSelectable = false, isCompact, activeItems = [], itemData, parentItem, icon, expandedIcon, action, compareItems, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nuseMemo }) => {\n    const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n    useEffect(() => {\n        if (isExpanded !== undefined && isExpanded !== null) {\n            setIsExpanded(isExpanded);\n        }\n        else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n            setIsExpanded(internalIsExpanded || defaultExpanded);\n        }\n    }, [isExpanded, defaultExpanded]);\n    let Component = 'button';\n    if (hasCheck) {\n        Component = 'label';\n    }\n    else if (isSelectable) {\n        Component = 'div';\n    }\n    const ToggleComponent = hasCheck || isSelectable ? 'button' : 'span';\n    const renderToggle = (randomId) => (React.createElement(ToggleComponent, Object.assign({ className: css(styles.treeViewNodeToggle), onClick: (evt) => {\n            if (isSelectable || hasCheck) {\n                setIsExpanded(!internalIsExpanded);\n            }\n            if (isSelectable) {\n                evt.stopPropagation();\n            }\n        } }, ((hasCheck || isSelectable) && { 'aria-labelledby': `label-${randomId}` }), (ToggleComponent === 'button' && { type: 'button' }), { tabIndex: -1 }),\n        React.createElement(\"span\", { className: css(styles.treeViewNodeToggleIcon) },\n            React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))));\n    const renderCheck = (randomId) => (React.createElement(\"span\", { className: css(styles.treeViewNodeCheck) },\n        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: evt => onCheck && onCheck(evt, itemData, parentItem), onClick: evt => evt.stopPropagation(), ref: elem => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: checkProps.checked === null ? false : checkProps.checked, id: randomId, tabIndex: -1 }))));\n    const iconRendered = (React.createElement(\"span\", { className: css(styles.treeViewNodeIcon) },\n        !internalIsExpanded && icon,\n        internalIsExpanded && (expandedIcon || icon)));\n    const renderNodeContent = () => {\n        const content = (React.createElement(React.Fragment, null,\n            isCompact && title && React.createElement(\"span\", { className: css(styles.treeViewNodeTitle) }, title),\n            isSelectable ? (React.createElement(\"button\", { tabIndex: -1, className: css(styles.treeViewNodeText), type: \"button\" }, name)) : (React.createElement(\"span\", { className: css(styles.treeViewNodeText) }, name))));\n        return isCompact ? React.createElement(\"span\", { className: css(styles.treeViewNodeContent) }, content) : content;\n    };\n    const badgeRendered = (React.createElement(React.Fragment, null,\n        hasBadge && children && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length))),\n        hasBadge && !children && customBadgeContent !== undefined && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)))));\n    return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded) }, (internalIsExpanded && { 'aria-expanded': 'true' }), { role: \"treeitem\", tabIndex: -1 }),\n        React.createElement(\"div\", { className: css(styles.treeViewContent) },\n            React.createElement(GenerateId, { prefix: isSelectable ? 'selectable-id' : 'checkbox-id' }, randomId => (React.createElement(Component, Object.assign({ className: css(styles.treeViewNode, children && (isSelectable || hasCheck) && styles.modifiers.selectable, (!children || isSelectable) &&\n                    activeItems &&\n                    activeItems.length > 0 &&\n                    activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                    ? styles.modifiers.current\n                    : ''), onClick: (evt) => {\n                    if (!hasCheck) {\n                        onSelect && onSelect(evt, itemData, parentItem);\n                        if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                    }\n                } }, (hasCheck && { htmlFor: randomId }), ((hasCheck || (isSelectable && children)) && { id: `label-${randomId}` }), (Component === 'button' && { type: 'button' })),\n                React.createElement(\"span\", { className: css(styles.treeViewNodeContainer) },\n                    children && renderToggle(randomId),\n                    hasCheck && renderCheck(randomId),\n                    icon && iconRendered,\n                    renderNodeContent(),\n                    badgeRendered)))),\n            action && React.createElement(\"div\", { className: css(styles.treeViewAction) }, action)),\n        internalIsExpanded && children));\n};\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n    if (!nextProps.useMemo) {\n        return false;\n    }\n    const prevIncludes = prevProps.activeItems &&\n        prevProps.activeItems.length > 0 &&\n        prevProps.activeItems.some(item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n    const nextIncludes = nextProps.activeItems &&\n        nextProps.activeItems.length > 0 &&\n        nextProps.activeItems.some(item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n    if (prevIncludes || nextIncludes) {\n        return false;\n    }\n    if (prevProps.name !== nextProps.name ||\n        prevProps.title !== nextProps.title ||\n        prevProps.id !== nextProps.id ||\n        prevProps.isExpanded !== nextProps.isExpanded ||\n        prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n        prevProps.onSelect !== nextProps.onSelect ||\n        prevProps.onCheck !== nextProps.onCheck ||\n        prevProps.hasCheck !== nextProps.hasCheck ||\n        prevProps.checkProps !== nextProps.checkProps ||\n        prevProps.hasBadge !== nextProps.hasBadge ||\n        prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n        prevProps.badgeProps !== nextProps.badgeProps ||\n        prevProps.isCompact !== nextProps.isCompact ||\n        prevProps.icon !== nextProps.icon ||\n        prevProps.expandedIcon !== nextProps.expandedIcon ||\n        prevProps.action !== nextProps.action ||\n        prevProps.parentItem !== nextProps.parentItem ||\n        prevProps.itemData !== nextProps.itemData) {\n        return false;\n    }\n    return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';\n//# sourceMappingURL=TreeViewListItem.js.map"]},"metadata":{},"sourceType":"module"}