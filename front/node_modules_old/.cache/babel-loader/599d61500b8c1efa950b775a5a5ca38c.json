{"ast":null,"code":"import * as React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nimport { Popover } from '@patternfly/react-core/dist/esm/components/Popover';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { TableText } from './TableText';\nexport const HeaderCellInfoWrapper = ({\n  children,\n  info,\n  className,\n  variant = 'tooltip',\n  popoverProps,\n  tooltipProps,\n  ariaLabel\n}) => React.createElement(\"div\", {\n  className: css(styles.tableColumnHelp, className)\n}, typeof children === 'string' ? React.createElement(TableText, null, children) : children, React.createElement(\"span\", {\n  className: css(styles.tableColumnHelpAction)\n}, variant === 'tooltip' ? React.createElement(Tooltip, Object.assign({\n  content: info\n}, tooltipProps), React.createElement(Button, {\n  variant: \"plain\",\n  \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n}, React.createElement(HelpIcon, {\n  noVerticalAlign: true\n}))) : React.createElement(Popover, Object.assign({\n  bodyContent: info\n}, popoverProps), React.createElement(Button, {\n  variant: \"plain\",\n  \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n}, React.createElement(HelpIcon, {\n  noVerticalAlign: true\n})))));\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';","map":{"version":3,"sources":["../../../../src/components/Table/HeaderCellInfoWrapper.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,QAAQ,MAAM,kDAAkD;AACvE,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,OAAO,MAAM,MAAM,qDAAqD;AACxE,SAAS,OAAO,QAAsB,oDAAoD;AAC1F,SAAS,OAAO,QAAsB,oDAAoD;AAC1F,SAAS,MAAM,QAAQ,mDAAmD;AAC1E,SAAS,SAAS,QAAQ,aAAa;AAiCvC,OAAO,MAAM,qBAAqB,GAAoD,CAAC;EACrF,QAAQ;EACR,IAAI;EACJ,SAAS;EACT,OAAO,GAAG,SAAS;EACnB,YAAY;EACZ,YAAY;EACZ;AAAS,CACc,KACvB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;EAAK,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS;AAAC,CAAA,EACnD,OAAO,QAAQ,KAAK,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA,IAAA,EAAE,QAAQ,CAAa,GAAG,QAAQ,EAC5E,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;EAAM,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAqB;AAAC,CAAA,EAC/C,OAAO,KAAK,SAAS,GACpB,KAAA,CAAA,aAAA,CAAC,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA;EAAC,OAAO,EAAE;AAAI,CAAA,EAAM,YAAY,CAAA,EACtC,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;EAAC,OAAO,EAAC,OAAO;EAAA,YAAA,EAAa,SAAS,IAAK,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAK,IAAI;AAAW,CAAA,EAChG,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA;EAAC,eAAe,EAAA;AAAA,CAAA,CAAG,CACrB,CACD,GAEV,KAAA,CAAA,aAAA,CAAC,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA;EAAC,WAAW,EAAE;AAAI,CAAA,EAAM,YAAY,CAAA,EAC1C,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;EAAC,OAAO,EAAC,OAAO;EAAA,YAAA,EAAa,SAAS,IAAK,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAK,IAAI;AAAW,CAAA,EAChG,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA;EAAC,eAAe,EAAA;AAAA,CAAA,CAAG,CACrB,CAEZ,CACI,CAEV;AACD,qBAAqB,CAAC,WAAW,GAAG,uBAAuB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nimport { Popover } from '@patternfly/react-core/dist/esm/components/Popover';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { TableText } from './TableText';\nexport const HeaderCellInfoWrapper = ({ children, info, className, variant = 'tooltip', popoverProps, tooltipProps, ariaLabel }) => (React.createElement(\"div\", { className: css(styles.tableColumnHelp, className) },\n    typeof children === 'string' ? React.createElement(TableText, null, children) : children,\n    React.createElement(\"span\", { className: css(styles.tableColumnHelpAction) }, variant === 'tooltip' ? (React.createElement(Tooltip, Object.assign({ content: info }, tooltipProps),\n        React.createElement(Button, { variant: \"plain\", \"aria-label\": ariaLabel || (typeof info === 'string' && info) || 'More info' },\n            React.createElement(HelpIcon, { noVerticalAlign: true })))) : (React.createElement(Popover, Object.assign({ bodyContent: info }, popoverProps),\n        React.createElement(Button, { variant: \"plain\", \"aria-label\": ariaLabel || (typeof info === 'string' && info) || 'More info' },\n            React.createElement(HelpIcon, { noVerticalAlign: true })))))));\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';\n//# sourceMappingURL=HeaderCellInfoWrapper.js.map"]},"metadata":{},"sourceType":"module"}