{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const DropdownToggle = _a => {\n  var {\n      id = '',\n      children = null,\n      className = '',\n      isOpen = false,\n      parentRef = null,\n      getMenuRef = null,\n      isDisabled = false,\n      isPlain = false,\n      isText = false,\n      isPrimary = false,\n      toggleVariant = 'default',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onToggle = _isOpen => undefined,\n      icon = null,\n      toggleIndicator: ToggleIndicator = CaretDownIcon,\n      splitButtonItems,\n      splitButtonVariant = 'checkbox',\n      'aria-haspopup': ariaHasPopup,\n      ouiaId,\n      ouiaSafe,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ref\n    } = _a,\n    // Types of Ref are different for React.FunctionComponent vs React.Component\n    props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", \"parentRef\", \"getMenuRef\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"toggleVariant\", \"isActive\", \"onToggle\", \"icon\", \"toggleIndicator\", \"splitButtonItems\", \"splitButtonVariant\", 'aria-haspopup', \"ouiaId\", \"ouiaSafe\", \"ref\"]);\n  const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  const toggle = React.createElement(DropdownContext.Consumer, null, ({\n    toggleTextClass,\n    toggleIndicatorClass,\n    toggleIconClass\n  }) => React.createElement(Toggle, Object.assign({}, props, {\n    id: id,\n    className: className,\n    isOpen: isOpen,\n    parentRef: parentRef,\n    getMenuRef: getMenuRef,\n    isActive: isActive,\n    isDisabled: isDisabled,\n    isPlain: isPlain,\n    isText: isText,\n    isPrimary: isPrimary,\n    toggleVariant: toggleVariant,\n    onToggle: onToggle,\n    \"aria-haspopup\": ariaHasPopup\n  }, ouiaProps, splitButtonItems && {\n    isSplitButton: true,\n    'aria-label': props['aria-label'] || 'Select'\n  }), icon && React.createElement(\"span\", {\n    className: css(toggleIconClass)\n  }, icon), children && React.createElement(\"span\", {\n    className: ToggleIndicator && css(toggleTextClass)\n  }, children), ToggleIndicator && React.createElement(\"span\", {\n    className: css(!splitButtonItems && toggleIndicatorClass)\n  }, React.createElement(ToggleIndicator, null))));\n  if (splitButtonItems) {\n    return React.createElement(\"div\", {\n      className: css(styles.dropdownToggle, styles.modifiers.splitButton, splitButtonVariant === 'action' && styles.modifiers.action, (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary, toggleVariant === 'secondary' && splitButtonVariant === 'action' && styles.modifiers.secondary, isDisabled && styles.modifiers.disabled)\n    }, splitButtonItems, toggle);\n  }\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';","map":{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,aAAa,MAAM,wDAAwD;AAClF,SAAS,MAAM,QAAQ,UAAU;AACjC,OAAO,MAAM,MAAM,2DAA2D;AAC9E,SAAS,eAAe,QAAQ,qBAAqB;AACrD,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,SAAS,YAAY,QAAmB,eAAe;AAmDvD,OAAO,MAAM,cAAc,GAAkD,EA0BvD,IAAI;MA1BmD;MAC3E,EAAE,GAAG,EAAE;MACP,QAAQ,GAAG,IAAI;MACf,SAAS,GAAG,EAAE;MACd,MAAM,GAAG,KAAK;MACd,SAAS,GAAG,IAAI;MAChB,UAAU,GAAG,IAAI;MACjB,UAAU,GAAG,KAAK;MAClB,OAAO,GAAG,KAAK;MACf,MAAM,GAAG,KAAK;MACd,SAAS,GAAG,KAAK;MACjB,aAAa,GAAG,SAAS;MACzB;MACA,QAAQ,GAAG,KAAK;MAChB;MACA,QAAQ,GAAI,OAAgB,IAAK,SAAgB;MACjD,IAAI,GAAG,IAAI;MACX,eAAe,EAAE,eAAe,GAAG,aAAa;MAChD,gBAAgB;MAChB,kBAAkB,GAAG,UAAU;MAC/B,eAAe,EAAE,YAAY;MAC7B,MAAM;MACN,QAAQ;MACR;MACA;IAAG,CAAA,GAAA,EAEiB;IAFf;IACF,KAAK,GAAA,MAAA,CAAA,EAAA,EAzBmE,CAAA,IAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,SAAA,EAAA,QAAA,EAAA,WAAA,EAAA,eAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,oBAAA,EAAA,eAAA,EAAA,QAAA,EAAA,UAAA,EAAA,KAAA,CA0B5E,CADS;EAER,MAAM,SAAS,GAAG,YAAY,CAAC,cAAc,CAAC,WAAW,EAAE,MAAM,EAAE,QAAQ,CAAC;EAC5E,MAAM,MAAM,GACV,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAQ,EAAA,IAAA,EACtB,CAAC;IAAE,eAAe;IAAE,oBAAoB;IAAE;EAAe,CAAE,KAC1D,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACD,KAAK,EAAA;IACT,EAAE,EAAE,EAAE;IACN,SAAS,EAAE,SAAS;IACpB,MAAM,EAAE,MAAM;IACd,SAAS,EAAE,SAAS;IACpB,UAAU,EAAE,UAAU;IACtB,QAAQ,EAAE,QAAQ;IAClB,UAAU,EAAE,UAAU;IACtB,OAAO,EAAE,OAAO;IAChB,MAAM,EAAE,MAAM;IACd,SAAS,EAAE,SAAS;IACpB,aAAa,EAAE,aAAa;IAC5B,QAAQ,EAAE,QAAQ;IAAA,eAAA,EACH;EAAY,CAAA,EACvB,SAAS,EACR,gBAAgB,IAAI;IAAE,aAAa,EAAE,IAAI;IAAE,YAAY,EAAE,KAAK,CAAC,YAAY,CAAC,IAAI;EAAQ,CAAG,CAAA,EAE/F,IAAI,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,eAAe;EAAC,CAAA,EAAG,IAAI,CAAQ,EAC5D,QAAQ,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,eAAe,IAAI,GAAG,CAAC,eAAe;EAAC,CAAA,EAAG,QAAQ,CAAQ,EACvF,eAAe,IACd,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAE,GAAG,CAAC,CAAC,gBAAgB,IAAI,oBAAoB;EAAC,CAAA,EAC7D,KAAA,CAAA,aAAA,CAAC,eAAe,EAAA,IAAA,CAAG,CAEtB,CAEJ,CAEJ;EAED,IAAI,gBAAgB,EAAE;IACpB,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MACE,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,SAAS,CAAC,WAAW,EAC5B,kBAAkB,KAAK,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,EAC1D,CAAC,aAAa,KAAK,SAAS,IAAI,SAAS,KAAK,kBAAkB,KAAK,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,EACzG,aAAa,KAAK,WAAW,IAAI,kBAAkB,KAAK,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,EAC9F,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ;IACxC,CAAA,EAEA,gBAAgB,EAChB,MAAM,CACH;EAET;EAED,OAAO,MAAM;AACf,CAAC;AACD,cAAc,CAAC,WAAW,GAAG,gBAAgB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const DropdownToggle = (_a) => {\n    var { id = '', children = null, className = '', isOpen = false, parentRef = null, getMenuRef = null, isDisabled = false, isPlain = false, isText = false, isPrimary = false, toggleVariant = 'default', \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isActive = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle = (_isOpen) => undefined, icon = null, toggleIndicator: ToggleIndicator = CaretDownIcon, splitButtonItems, splitButtonVariant = 'checkbox', 'aria-haspopup': ariaHasPopup, ouiaId, ouiaSafe, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref } = _a, // Types of Ref are different for React.FunctionComponent vs React.Component\n    props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", \"parentRef\", \"getMenuRef\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"toggleVariant\", \"isActive\", \"onToggle\", \"icon\", \"toggleIndicator\", \"splitButtonItems\", \"splitButtonVariant\", 'aria-haspopup', \"ouiaId\", \"ouiaSafe\", \"ref\"]);\n    const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n    const toggle = (React.createElement(DropdownContext.Consumer, null, ({ toggleTextClass, toggleIndicatorClass, toggleIconClass }) => (React.createElement(Toggle, Object.assign({}, props, { id: id, className: className, isOpen: isOpen, parentRef: parentRef, getMenuRef: getMenuRef, isActive: isActive, isDisabled: isDisabled, isPlain: isPlain, isText: isText, isPrimary: isPrimary, toggleVariant: toggleVariant, onToggle: onToggle, \"aria-haspopup\": ariaHasPopup }, ouiaProps, (splitButtonItems && { isSplitButton: true, 'aria-label': props['aria-label'] || 'Select' })),\n        icon && React.createElement(\"span\", { className: css(toggleIconClass) }, icon),\n        children && React.createElement(\"span\", { className: ToggleIndicator && css(toggleTextClass) }, children),\n        ToggleIndicator && (React.createElement(\"span\", { className: css(!splitButtonItems && toggleIndicatorClass) },\n            React.createElement(ToggleIndicator, null)))))));\n    if (splitButtonItems) {\n        return (React.createElement(\"div\", { className: css(styles.dropdownToggle, styles.modifiers.splitButton, splitButtonVariant === 'action' && styles.modifiers.action, (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary, toggleVariant === 'secondary' && splitButtonVariant === 'action' && styles.modifiers.secondary, isDisabled && styles.modifiers.disabled) },\n            splitButtonItems,\n            toggle));\n    }\n    return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';\n//# sourceMappingURL=DropdownToggle.js.map"]},"metadata":{},"sourceType":"module"}