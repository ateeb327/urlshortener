{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption } from './SelectOption';\nimport { SelectGroup } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport { SelectContext, SelectVariant, SelectPosition, SelectDirection, SelectFooterTabbableItems } from './selectConstants';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { Spinner } from '../Spinner';\nimport { keyHandler, getNextIndex, getOUIAProps, getDefaultOUIAId, GenerateId } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nimport { Divider } from '../Divider';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { findTabbableElements } from '../../helpers/util';\n// seed for the aria-labelledby ID\nlet currentId = 0;\nexport class Select extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.parentRef = React.createRef();\n    this.menuComponentRef = React.createRef();\n    this.filterRef = React.createRef();\n    this.clearRef = React.createRef();\n    this.inputRef = React.createRef();\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    this.footerRef = React.createRef();\n    this.state = {\n      focusFirstOption: false,\n      typeaheadInputValue: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      favoritesGroup: [],\n      typeaheadCurrIndex: -1,\n      typeaheadStoredIndex: -1,\n      creatableValue: '',\n      tabbedIntoFavoritesMenu: false,\n      ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant),\n      viewMoreNextIndex: -1\n    };\n    this.getTypeaheadActiveChild = typeaheadCurrIndex => this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.hasInlineFilter) {\n        this.refCollection[0][0] = this.filterRef.current;\n      }\n      // Move focus to top of the menu if state.focusFirstOption was updated to true and the menu does not have custom content\n      if (!prevState.focusFirstOption && this.state.focusFirstOption && !this.props.customContent) {\n        const firstRef = this.refCollection.find(ref =>\n        // If a select option is disabled then ref[0] will be undefined, so we want to return\n        // the first ref that both a) is not null and b) is not disabled.\n        ref !== null && ref[0]);\n        if (firstRef && firstRef[0]) {\n          firstRef[0].focus();\n        }\n      } else if (\n      // if viewMoreNextIndex is not -1, view more was clicked, set focus on first newly loaded item\n      this.state.viewMoreNextIndex !== -1 && this.refCollection.length > this.state.viewMoreNextIndex && this.props.loadingVariant !== 'spinner' && this.refCollection[this.state.viewMoreNextIndex][0] && this.props.variant !== 'typeahead' &&\n      // do not hard focus newly added items for typeahead variants\n      this.props.variant !== 'typeaheadmulti') {\n        this.refCollection[this.state.viewMoreNextIndex][0].focus();\n        this.setState({\n          viewMoreNextIndex: -1\n        });\n      }\n      const checkUpdatedChildren = (prevChildren, currChildren) => Array.from(prevChildren).some((prevChild, index) => {\n        const prevChildProps = prevChild.props;\n        const currChild = currChildren[index];\n        const {\n          props: currChildProps\n        } = currChild;\n        if (prevChildProps && currChildProps) {\n          return prevChildProps.value !== currChildProps.value || prevChildProps.label !== currChildProps.label || prevChildProps.isDisabled !== currChildProps.isDisabled || prevChildProps.isPlaceholder !== currChildProps.isPlaceholder;\n        } else {\n          return prevChild !== currChild;\n        }\n      });\n      const hasUpdatedChildren = prevProps.children.length !== this.props.children.length || checkUpdatedChildren(prevProps.children, this.props.children) || this.props.isGrouped && Array.from(prevProps.children).some((prevChild, index) => prevChild.type === SelectGroup && prevChild.props.children && this.props.children[index].props.children && (prevChild.props.children.length !== this.props.children[index].props.children.length || checkUpdatedChildren(prevChild.props.children, this.props.children[index].props.children)));\n      if (hasUpdatedChildren) {\n        this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n      }\n      // for menus with favorites,\n      // if the number of favorites or typeahead filtered children has changed, the generated\n      // list of favorites needs to be updated\n      if (this.props.onFavorite && (this.props.favorites.length !== prevProps.favorites.length || this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)) {\n        const tempRenderableChildren = this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti' ? this.state.typeaheadFilteredChildren : this.props.children;\n        const renderableFavorites = createRenderableFavorites(tempRenderableChildren, this.props.isGrouped, this.props.favorites);\n        const favoritesGroup = renderableFavorites.length ? [React.createElement(SelectGroup, {\n          key: \"favorites\",\n          label: this.props.favoritesLabel\n        }, renderableFavorites), React.createElement(Divider, {\n          key: \"favorites-group-divider\"\n        })] : [];\n        this.setState({\n          favoritesGroup\n        });\n      }\n    };\n    this.onEnter = () => {\n      this.setState({\n        focusFirstOption: true\n      });\n    };\n    this.onToggle = (isExpanded, e) => {\n      const {\n        isInputValuePersisted,\n        onSelect,\n        onToggle,\n        hasInlineFilter\n      } = this.props;\n      if (!isExpanded && isInputValuePersisted && onSelect) {\n        onSelect(undefined, this.inputRef.current ? this.inputRef.current.value : '');\n      }\n      if (isExpanded && hasInlineFilter) {\n        this.setState({\n          focusFirstOption: true\n        });\n      }\n      onToggle(isExpanded, e);\n    };\n    this.onClose = () => {\n      const {\n        isInputFilterPersisted\n      } = this.props;\n      this.setState(Object.assign(Object.assign({\n        focusFirstOption: false,\n        typeaheadInputValue: null\n      }, !isInputFilterPersisted && {\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children)\n      }), {\n        typeaheadCurrIndex: -1,\n        tabbedIntoFavoritesMenu: false,\n        viewMoreNextIndex: -1\n      }));\n    };\n    this.onChange = e => {\n      if (e.target.value.toString() !== '' && !this.props.isOpen) {\n        this.onToggle(true, e);\n      }\n      if (this.props.onTypeaheadInputChanged) {\n        this.props.onTypeaheadInputChanged(e.target.value.toString());\n      }\n      this.setState({\n        typeaheadCurrIndex: -1,\n        typeaheadInputValue: e.target.value,\n        creatableValue: e.target.value\n      });\n      this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n      this.refCollection = [[]];\n    };\n    this.updateTypeAheadFilteredChildren = (typeaheadInputValue, e) => {\n      let typeaheadFilteredChildren;\n      const {\n        onFilter,\n        isCreatable,\n        isCreateOptionOnTop,\n        onCreateOption,\n        createText,\n        noResultsFoundText,\n        children,\n        isGrouped,\n        isCreateSelectOptionObject,\n        loadingVariant\n      } = this.props;\n      if (onFilter) {\n        /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n         * In this case the e is null but we can get the typeaheadInputValue from the state.\n         */\n        typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n      } else {\n        let input;\n        try {\n          input = new RegExp(typeaheadInputValue.toString(), 'i');\n        } catch (err) {\n          input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n        }\n        const childrenArray = React.Children.toArray(children);\n        if (isGrouped) {\n          const childFilter = child => child.props.value && child.props.value.toString && this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? React.Children.map(children, group => {\n            if (React.isValidElement(group) && group.type === SelectGroup) {\n              const filteredGroupChildren = React.Children.toArray(group.props.children).filter(childFilter);\n              if (filteredGroupChildren.length > 0) {\n                return React.cloneElement(group, {\n                  titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                  children: filteredGroupChildren\n                });\n              }\n            } else {\n              return React.Children.toArray(group).filter(childFilter);\n            }\n          }) : childrenArray;\n        } else {\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? childrenArray.filter(child => {\n            const valueToCheck = child.props.value;\n            // Dividers don't have value and should not be filtered\n            if (!valueToCheck) {\n              return true;\n            }\n            const isSelectOptionObject = typeof valueToCheck !== 'string' && valueToCheck.toString && valueToCheck.compareTo;\n            // View more option should be returned as not a match\n            if (loadingVariant !== 'spinner' && (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) === valueToCheck) {\n              return true;\n            }\n            // spinner should be returned as not a match\n            if (loadingVariant === 'spinner' && valueToCheck === 'loading') {\n              return true;\n            }\n            if (isSelectOptionObject) {\n              return valueToCheck.compareTo(typeaheadInputValue);\n            } else {\n              return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n            }\n          }) : childrenArray;\n        }\n      }\n      if (!typeaheadFilteredChildren) {\n        typeaheadFilteredChildren = [];\n      }\n      if (typeaheadFilteredChildren.length === 0) {\n        !isCreatable && typeaheadFilteredChildren.push(React.createElement(SelectOption, {\n          isDisabled: true,\n          key: \"no-results\",\n          value: noResultsFoundText,\n          isNoResultsOption: true\n        }));\n      }\n      if (isCreatable && typeaheadInputValue !== '') {\n        const newValue = typeaheadInputValue;\n        if (!typeaheadFilteredChildren.find(i => i.props.value && i.props.value.toString().toLowerCase() === newValue.toString().toLowerCase())) {\n          const newOptionValue = isCreateSelectOptionObject ? {\n            toString: () => newValue,\n            compareTo: value => this.toString().toLowerCase().includes(value.toString().toLowerCase())\n          } : newValue;\n          const createSelectOption = React.createElement(SelectOption, {\n            key: `create ${newValue}`,\n            value: newOptionValue,\n            onClick: () => onCreateOption && onCreateOption(newValue)\n          }, createText, \" \\\"\", newValue, \"\\\"\");\n          if (isCreateOptionOnTop) {\n            typeaheadFilteredChildren.unshift(createSelectOption);\n          } else {\n            typeaheadFilteredChildren.push(createSelectOption);\n          }\n        }\n      }\n      this.setState({\n        typeaheadFilteredChildren\n      });\n    };\n    this.onClick = e => {\n      if (!this.props.isOpen) {\n        this.onToggle(true, e);\n      }\n    };\n    this.clearSelection = _e => {\n      this.setState({\n        typeaheadInputValue: null,\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n        typeaheadCurrIndex: -1\n      });\n    };\n    this.sendRef = (optionRef, favoriteRef, optionContainerRef, index) => {\n      this.refCollection[index] = [optionRef, favoriteRef];\n      this.optionContainerRefCollection[index] = optionContainerRef;\n    };\n    this.handleMenuKeys = (index, innerIndex, position) => {\n      keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n      if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n        if (position !== 'tab') {\n          this.handleTypeaheadKeys(position);\n        }\n      }\n    };\n    this.moveFocus = (nextIndex, updateCurrentIndex = true) => {\n      const {\n        isCreatable,\n        createText\n      } = this.props;\n      const hasDescriptionElm = Boolean(this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-description'));\n      const isLoad = Boolean(this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-load'));\n      const optionTextElm = hasDescriptionElm ? this.refCollection[nextIndex][0].firstElementChild : this.refCollection[nextIndex][0];\n      let typeaheadInputValue = '';\n      if (isCreatable && optionTextElm.textContent.includes(createText)) {\n        typeaheadInputValue = this.state.creatableValue;\n      } else if (optionTextElm && !isLoad) {\n        // !isLoad prevents the view more button text from appearing the typeahead input\n        typeaheadInputValue = optionTextElm.textContent;\n      }\n      this.setState(prevState => ({\n        typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n        typeaheadStoredIndex: nextIndex,\n        typeaheadInputValue\n      }));\n    };\n    this.switchFocusToFavoriteMenu = () => {\n      const {\n        typeaheadCurrIndex,\n        typeaheadStoredIndex\n      } = this.state;\n      let indexForFocus = 0;\n      if (typeaheadCurrIndex !== -1) {\n        indexForFocus = typeaheadCurrIndex;\n      } else if (typeaheadStoredIndex !== -1) {\n        indexForFocus = typeaheadStoredIndex;\n      }\n      if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n        this.refCollection[indexForFocus][0].focus();\n      } else {\n        this.clearRef.current.focus();\n      }\n      this.setState({\n        tabbedIntoFavoritesMenu: true,\n        typeaheadCurrIndex: -1\n      });\n    };\n    this.moveFocusToLastMenuItem = () => {\n      const refCollectionLen = this.refCollection.length;\n      if (refCollectionLen > 0 && this.refCollection[refCollectionLen - 1] !== null && this.refCollection[refCollectionLen - 1][0] !== null) {\n        this.refCollection[refCollectionLen - 1][0].focus();\n      }\n    };\n    this.handleTypeaheadKeys = (position, shiftKey = false) => {\n      const {\n        isOpen,\n        onFavorite,\n        isCreatable\n      } = this.props;\n      const {\n        typeaheadCurrIndex,\n        tabbedIntoFavoritesMenu\n      } = this.state;\n      const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n      if (isOpen) {\n        if (position === 'enter') {\n          if ((typeaheadCurrIndex !== -1 || isCreatable && this.refCollection.length === 1) && (\n          // do not allow selection without moving to an initial option unless it is a single create option\n          typeaheadActiveChild || this.refCollection[0] && this.refCollection[0][0])) {\n            if (typeaheadActiveChild) {\n              if (!typeaheadActiveChild.classList.contains('pf-m-load')) {\n                const hasDescriptionElm = typeaheadActiveChild.childElementCount > 1;\n                const typeaheadActiveChildText = hasDescriptionElm ? typeaheadActiveChild.firstChild.textContent : typeaheadActiveChild.textContent;\n                this.setState({\n                  typeaheadInputValue: typeaheadActiveChildText\n                });\n              }\n            } else if (this.refCollection[0] && this.refCollection[0][0]) {\n              this.setState({\n                typeaheadInputValue: this.refCollection[0][0].textContent\n              });\n            }\n            if (typeaheadActiveChild) {\n              typeaheadActiveChild.click();\n            } else {\n              this.refCollection[0][0].click();\n            }\n          }\n        } else if (position === 'tab') {\n          if (onFavorite) {\n            // if the input has focus, tab to the first item or the last item that was previously focused.\n            if (this.inputRef.current === document.activeElement) {\n              // If shift is also clicked and there is a footer, tab to the last item in tabbable footer\n              if (this.props.footer && shiftKey) {\n                const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                if (tabbableItems.length > 0) {\n                  if (tabbableItems[tabbableItems.length - 1]) {\n                    tabbableItems[tabbableItems.length - 1].focus();\n                  }\n                }\n              } else {\n                this.switchFocusToFavoriteMenu();\n              }\n            } else {\n              // focus is on menu or footer\n              if (this.props.footer) {\n                let tabbedIntoMenu = false;\n                const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                if (tabbableItems.length > 0) {\n                  // if current element is not in footer, tab to first tabbable element in footer,\n                  // if shift was clicked, tab to input since focus is on menu\n                  const currentElementIndex = tabbableItems.findIndex(item => item === document.activeElement);\n                  if (currentElementIndex === -1) {\n                    if (shiftKey) {\n                      // currently in menu, shift back to input\n                      this.inputRef.current.focus();\n                    } else {\n                      // currently in menu, tab to first tabbable item in footer\n                      tabbableItems[0].focus();\n                    }\n                  } else {\n                    // already in footer\n                    if (shiftKey) {\n                      // shift to previous item\n                      if (currentElementIndex === 0) {\n                        // on first footer item, shift back to menu\n                        this.switchFocusToFavoriteMenu();\n                        tabbedIntoMenu = true;\n                      } else {\n                        // shift to previous footer item\n                        tabbableItems[currentElementIndex - 1].focus();\n                      }\n                    } else {\n                      // tab to next tabbable item in footer or to input.\n                      if (tabbableItems[currentElementIndex + 1]) {\n                        tabbableItems[currentElementIndex + 1].focus();\n                      } else {\n                        this.inputRef.current.focus();\n                      }\n                    }\n                  }\n                } else {\n                  // no tabbable items in footer, tab to input\n                  this.inputRef.current.focus();\n                  tabbedIntoMenu = false;\n                }\n                this.setState({\n                  tabbedIntoFavoritesMenu: tabbedIntoMenu\n                });\n              } else {\n                this.inputRef.current.focus();\n                this.setState({\n                  tabbedIntoFavoritesMenu: false\n                });\n              }\n            }\n          } else {\n            // Close if there is no footer\n            if (!this.props.footer) {\n              this.onToggle(false, null);\n              this.onClose();\n            } else {\n              // has footer\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n              const currentElementIndex = tabbableItems.findIndex(item => item === document.activeElement);\n              if (this.inputRef.current === document.activeElement) {\n                if (shiftKey) {\n                  // close toggle if shift key and tab on input\n                  this.onToggle(false, null);\n                  this.onClose();\n                } else {\n                  // tab to first tabbable item in footer\n                  if (tabbableItems[0]) {\n                    tabbableItems[0].focus();\n                  } else {\n                    this.onToggle(false, null);\n                    this.onClose();\n                  }\n                }\n              } else {\n                // focus is in footer\n                if (shiftKey) {\n                  if (currentElementIndex === 0) {\n                    // shift tab back to input\n                    this.inputRef.current.focus();\n                  } else {\n                    // shift to previous footer item\n                    tabbableItems[currentElementIndex - 1].focus();\n                  }\n                } else {\n                  // tab to next footer item or close tab if last item\n                  if (tabbableItems[currentElementIndex + 1]) {\n                    tabbableItems[currentElementIndex + 1].focus();\n                  } else {\n                    // no next item, close toggle\n                    this.onToggle(false, null);\n                    this.inputRef.current.focus();\n                    this.onClose();\n                  }\n                }\n              }\n            }\n          }\n        } else if (!tabbedIntoFavoritesMenu) {\n          if (this.refCollection[0][0] === null) {\n            return;\n          }\n          let nextIndex;\n          if (typeaheadCurrIndex === -1 && position === 'down') {\n            nextIndex = 0;\n          } else if (typeaheadCurrIndex === -1 && position === 'up') {\n            nextIndex = this.refCollection.length - 1;\n          } else if (position !== 'left' && position !== 'right') {\n            nextIndex = getNextIndex(typeaheadCurrIndex, position, this.refCollection);\n          } else {\n            nextIndex = typeaheadCurrIndex;\n          }\n          if (this.refCollection[nextIndex] === null) {\n            return;\n          }\n          this.moveFocus(nextIndex);\n        } else {\n          const nextIndex = this.refCollection.findIndex(ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement));\n          this.moveFocus(nextIndex);\n        }\n      }\n    };\n    this.onClickTypeaheadToggleButton = () => {\n      if (this.inputRef && this.inputRef.current) {\n        this.inputRef.current.focus();\n      }\n    };\n    this.getDisplay = (value, type = 'node') => {\n      if (!value) {\n        return;\n      }\n      const item = this.props.isGrouped ? React.Children.toArray(this.props.children).reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], []).find(child => child.props.value.toString() === value.toString()) : React.Children.toArray(this.props.children).find(child => child.props.value && child.props.value.toString() === value.toString());\n      if (item) {\n        if (item && item.props.children) {\n          if (type === 'node') {\n            return item.props.children;\n          }\n          return this.findText(item);\n        }\n        return item.props.value.toString();\n      }\n      return value.toString();\n    };\n    this.findText = item => {\n      if (typeof item === 'string') {\n        return item;\n      } else if (!React.isValidElement(item)) {\n        return '';\n      } else {\n        const multi = [];\n        React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n        return multi.join('');\n      }\n    };\n    this.generateSelectedBadge = () => {\n      const {\n        customBadgeText,\n        selections\n      } = this.props;\n      if (customBadgeText !== null) {\n        return customBadgeText;\n      }\n      if (Array.isArray(selections) && selections.length > 0) {\n        return selections.length;\n      }\n      return null;\n    };\n    this.setVieMoreNextIndex = () => {\n      this.setState({\n        viewMoreNextIndex: this.refCollection.length - 1\n      });\n    };\n    this.isLastOptionBeforeFooter = index => this.props.footer && index === this.refCollection.length - 1 ? true : false;\n  }\n  extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup) {\n    const {\n      isGrouped,\n      onFavorite,\n      createText\n    } = this.props;\n    const typeaheadChildren = favoritesGroup ? favoritesGroup.concat(this.state.typeaheadFilteredChildren) : this.state.typeaheadFilteredChildren;\n    const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n    let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n      typeaheadActiveChild = typeaheadActiveChild.firstElementChild;\n    }\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    if (isGrouped) {\n      return React.Children.map(typeaheadChildren, group => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectGroup && onFavorite) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: activeElement && (activeElement.id === child.props.id || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${group.props.value}\"`)\n            }))\n          });\n        } else if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: typeaheadActiveChild && (typeaheadActiveChild.textContent === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${child.props.value}\"`)\n            }))\n          });\n        } else {\n          // group has been filtered down to SelectOption\n          return React.cloneElement(group, {\n            isFocused: typeaheadActiveChild && (typeaheadActiveChild.textContent === group.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${group.props.value}\"`)\n          });\n        }\n      });\n    }\n    return typeaheadChildren.map((child, index) => {\n      const childElement = child;\n      return childElement.type.displayName === 'Divider' ? child : React.cloneElement(child, {\n        isFocused: typeaheadActiveChild ? typeaheadActiveChild.textContent === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${child.props.value}\"` : index === typeaheadCurrIndex // fallback for view more + typeahead use cases, when the new expanded list is loaded and refCollection hasn't be updated yet\n      });\n    });\n  }\n  render() {\n    const _a = this.props,\n      {\n        children,\n        chipGroupProps,\n        chipGroupComponent,\n        className,\n        customContent,\n        variant,\n        direction,\n        onSelect,\n        onClear,\n        onBlur,\n        toggleId,\n        toggleRef,\n        isOpen,\n        isGrouped,\n        isPlain,\n        isDisabled,\n        hasPlaceholderStyle,\n        validated,\n        selections: selectionsProp,\n        typeAheadAriaLabel,\n        typeAheadAriaDescribedby,\n        clearSelectionsAriaLabel,\n        toggleAriaLabel,\n        removeSelectionAriaLabel,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        'aria-describedby': ariaDescribedby,\n        'aria-invalid': ariaInvalid,\n        placeholderText,\n        width,\n        maxHeight,\n        toggleIcon,\n        toggleIndicator,\n        ouiaId,\n        ouiaSafe,\n        hasInlineFilter,\n        isCheckboxSelectionBadgeHidden,\n        inlineFilterPlaceholderText,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onFilter,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onTypeaheadInputChanged,\n        onCreateOption,\n        isCreatable,\n        onToggle,\n        createText,\n        noResultsFoundText,\n        customBadgeText,\n        inputIdPrefix,\n        inputAutoComplete,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isInputValuePersisted,\n        isInputFilterPersisted,\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        menuAppendTo,\n        favorites,\n        onFavorite,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        favoritesLabel,\n        footer,\n        loadingVariant,\n        isCreateSelectOptionObject,\n        isCreateOptionOnTop,\n        shouldResetOnSelect,\n        isFlipEnabled,\n        removeFindDomNode,\n        zIndex\n      } = _a,\n      props = __rest(_a, [\"children\", \"chipGroupProps\", \"chipGroupComponent\", \"className\", \"customContent\", \"variant\", \"direction\", \"onSelect\", \"onClear\", \"onBlur\", \"toggleId\", \"toggleRef\", \"isOpen\", \"isGrouped\", \"isPlain\", \"isDisabled\", \"hasPlaceholderStyle\", \"validated\", \"selections\", \"typeAheadAriaLabel\", \"typeAheadAriaDescribedby\", \"clearSelectionsAriaLabel\", \"toggleAriaLabel\", \"removeSelectionAriaLabel\", 'aria-label', 'aria-labelledby', 'aria-describedby', 'aria-invalid', \"placeholderText\", \"width\", \"maxHeight\", \"toggleIcon\", \"toggleIndicator\", \"ouiaId\", \"ouiaSafe\", \"hasInlineFilter\", \"isCheckboxSelectionBadgeHidden\", \"inlineFilterPlaceholderText\", \"onFilter\", \"onTypeaheadInputChanged\", \"onCreateOption\", \"isCreatable\", \"onToggle\", \"createText\", \"noResultsFoundText\", \"customBadgeText\", \"inputIdPrefix\", \"inputAutoComplete\", \"isInputValuePersisted\", \"isInputFilterPersisted\", \"menuAppendTo\", \"favorites\", \"onFavorite\", \"favoritesLabel\", \"footer\", \"loadingVariant\", \"isCreateSelectOptionObject\", \"isCreateOptionOnTop\", \"shouldResetOnSelect\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n    const {\n      focusFirstOption: openedOnEnter,\n      typeaheadCurrIndex,\n      typeaheadInputValue,\n      typeaheadFilteredChildren,\n      favoritesGroup\n    } = this.state;\n    const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n    const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp];\n    // Find out if the selected option is a placeholder\n    const selectedOption = React.Children.toArray(children).find(option => option.props.value === selections[0]);\n    const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;\n    const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    let childPlaceholderText = null;\n    // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n    let renderableItems = [];\n    if (onFavorite) {\n      // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n      let tempExtendedChildren = children;\n      if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n        tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n      } else if (onFavorite) {\n        tempExtendedChildren = favoritesGroup.concat(children);\n      }\n      // mark items that are favorited with isFavorite\n      renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n    } else {\n      renderableItems = children;\n    }\n    if (!customContent) {\n      if (!hasAnySelections && !placeholderText) {\n        const childPlaceholder = React.Children.toArray(children).filter(child => child.props.isPlaceholder === true);\n        childPlaceholderText = childPlaceholder[0] && this.getDisplay(childPlaceholder[0].props.value, 'node') || children[0] && this.getDisplay(children[0].props.value, 'node');\n      }\n    }\n    if (isOpen) {\n      if (renderableItems.find(item => (item === null || item === void 0 ? void 0 : item.key) === 'loading') === undefined) {\n        if (loadingVariant === 'spinner') {\n          renderableItems.push(React.createElement(SelectOption, {\n            isLoading: true,\n            key: \"loading\",\n            value: \"loading\"\n          }, React.createElement(Spinner, {\n            size: \"lg\"\n          })));\n        } else if (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) {\n          renderableItems.push(React.createElement(SelectOption, {\n            isLoad: true,\n            key: \"loading\",\n            value: loadingVariant.text,\n            setViewMoreNextIndex: this.setVieMoreNextIndex,\n            onClick: loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.onClick\n          }));\n        }\n      }\n    }\n    const hasOnClear = onClear !== Select.defaultProps.onClear;\n    const clearBtn = React.createElement(\"button\", {\n      className: css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear),\n      onClick: e => {\n        this.clearSelection(e);\n        onClear(e);\n        e.stopPropagation();\n      },\n      \"aria-label\": clearSelectionsAriaLabel,\n      type: \"button\",\n      disabled: isDisabled,\n      ref: this.clearRef,\n      onKeyDown: event => {\n        if (event.key === KeyTypes.Enter) {\n          this.clearRef.current.click();\n        }\n      }\n    }, React.createElement(TimesCircleIcon, {\n      \"aria-hidden\": true\n    }));\n    let selectedChips = null;\n    if (variant === SelectVariant.typeaheadMulti) {\n      selectedChips = chipGroupComponent ? chipGroupComponent : React.createElement(ChipGroup, Object.assign({}, chipGroupProps), selections && selections.map(item => React.createElement(Chip, {\n        key: item,\n        onClick: e => onSelect(e, item),\n        closeBtnAriaLabel: removeSelectionAriaLabel\n      }, this.getDisplay(item, 'node'))));\n    }\n    if (hasInlineFilter) {\n      const filterBox = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        key: \"inline-filter\",\n        className: css(styles.selectMenuSearch)\n      }, React.createElement(\"input\", {\n        key: \"inline-filter-input\",\n        type: \"search\",\n        className: css(formStyles.formControl, formStyles.modifiers.search),\n        onChange: this.onChange,\n        placeholder: inlineFilterPlaceholderText,\n        onKeyDown: event => {\n          if (event.key === KeyTypes.ArrowUp) {\n            this.handleMenuKeys(0, 0, 'up');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowDown) {\n            this.handleMenuKeys(0, 0, 'down');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowLeft) {\n            this.handleMenuKeys(0, 0, 'left');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowRight) {\n            this.handleMenuKeys(0, 0, 'right');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.Tab && variant !== SelectVariant.checkbox && this.props.footer) {\n            // tab to footer or close menu if shift key\n            if (event.shiftKey) {\n              this.onToggle(false, event);\n            } else {\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n              if (tabbableItems.length > 0) {\n                tabbableItems[0].focus();\n                event.stopPropagation();\n                event.preventDefault();\n              } else {\n                this.onToggle(false, event);\n              }\n            }\n          } else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n            // More modal-like experience for checkboxes\n            // Let SelectOption handle this\n            if (event.shiftKey) {\n              this.handleMenuKeys(0, 0, 'up');\n            } else {\n              this.handleMenuKeys(0, 0, 'down');\n            }\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        },\n        ref: this.filterRef,\n        autoComplete: inputAutoComplete\n      })), React.createElement(Divider, {\n        key: \"inline-filter-divider\"\n      }));\n      renderableItems = [filterBox, ...typeaheadFilteredChildren].map((option, index) => React.cloneElement(option, {\n        key: index\n      }));\n    }\n    let variantProps;\n    let variantChildren;\n    if (customContent) {\n      variantProps = {\n        selected: selections,\n        openedOnEnter,\n        isCustomContent: true\n      };\n      variantChildren = customContent;\n    } else {\n      switch (variant) {\n        case 'single':\n          variantProps = {\n            selected: selections[0],\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'checkbox':\n          variantProps = {\n            checked: selections,\n            isGrouped,\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'typeahead':\n          variantProps = {\n            selected: selections[0],\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n          break;\n        case 'typeaheadmulti':\n          variantProps = {\n            selected: selections,\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n          break;\n      }\n    }\n    const isStatic = isFlipEnabled && menuAppendTo !== 'inline';\n    const innerMenu = React.createElement(SelectMenu, Object.assign({\n      className: css(isStatic && styles.modifiers.static)\n    }, props, {\n      isGrouped: isGrouped,\n      selected: selections\n    }, variantProps, {\n      openedOnEnter: openedOnEnter,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      sendRef: this.sendRef,\n      keyHandler: this.handleMenuKeys,\n      maxHeight: maxHeight,\n      ref: this.menuComponentRef,\n      footer: footer,\n      footerRef: this.footerRef,\n      isLastOptionBeforeFooter: this.isLastOptionBeforeFooter\n    }), variantChildren);\n    const menuContainer = footer ? React.createElement(\"div\", {\n      className: css(styles.selectMenu)\n    }, \" \", innerMenu, \" \") : innerMenu;\n    const popperContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className)\n    }, width && {\n      style: {\n        width\n      }\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), isOpen && menuContainer);\n    const mainContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className),\n      ref: this.parentRef\n    }, getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), width && {\n      style: {\n        width\n      }\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), React.createElement(SelectToggle, Object.assign({\n      id: selectToggleId,\n      parentRef: this.parentRef,\n      menuRef: this.menuComponentRef,\n      ref: toggleRef\n    }, footer && {\n      footerRef: this.footerRef\n    }, {\n      isOpen: isOpen,\n      isPlain: isPlain,\n      hasPlaceholderStyle: hasPlaceholderStyle && (!selections.length || selections[0] === null || isSelectedPlaceholder),\n      onToggle: this.onToggle,\n      onEnter: this.onEnter,\n      onClose: this.onClose,\n      onBlur: onBlur,\n      variant: variant,\n      toggleIndicator: toggleIndicator,\n      \"aria-labelledby\": `${ariaLabelledBy || ''} ${selectToggleId}`,\n      \"aria-label\": toggleAriaLabel\n    }, ariaDescribedby && {\n      'aria-describedby': ariaDescribedby\n    }, {\n      handleTypeaheadKeys: this.handleTypeaheadKeys,\n      moveFocusToLastMenuItem: this.moveFocusToLastMenuItem,\n      isDisabled: isDisabled,\n      hasClearButton: hasOnClear,\n      hasFooter: footer !== undefined,\n      onClickTypeaheadToggleButton: this.onClickTypeaheadToggleButton\n    }), customContent && React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText)), variant === SelectVariant.single && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, this.getDisplay(selections[0], 'node') || placeholderText || childPlaceholderText)), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.checkbox && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText), !isCheckboxSelectionBadgeHidden && hasAnySelections && React.createElement(\"div\", {\n      className: css(styles.selectToggleBadge)\n    }, React.createElement(\"span\", {\n      className: css(badgeStyles.badge, badgeStyles.modifiers.read)\n    }, this.generateSelectedBadge()))), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.typeahead && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"input\", Object.assign({\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-typeahead`,\n      \"aria-label\": typeAheadAriaLabel\n    }, typeAheadAriaDescribedby && {\n      'aria-describedby': typeAheadAriaDescribedby\n    }, {\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : this.getDisplay(selections[0], 'text') || '',\n      type: \"text\",\n      onClick: this.onClick,\n      onChange: this.onChange,\n      autoComplete: inputAutoComplete,\n      disabled: isDisabled,\n      ref: this.inputRef\n    }))), hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn), variant === SelectVariant.typeaheadMulti && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), selections && Array.isArray(selections) && selections.length > 0 && selectedChips, React.createElement(\"input\", Object.assign({\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-multi-typeahead-typeahead`,\n      \"aria-label\": typeAheadAriaLabel,\n      \"aria-invalid\": validated === ValidatedOptions.error\n    }, typeAheadAriaDescribedby && {\n      'aria-describedby': typeAheadAriaDescribedby\n    }, {\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : '',\n      type: \"text\",\n      onChange: this.onChange,\n      onClick: this.onClick,\n      autoComplete: inputAutoComplete,\n      disabled: isDisabled,\n      ref: this.inputRef\n    }))), hasOnClear && (selections && selections.length > 0 || typeaheadInputValue) && clearBtn), validated === ValidatedOptions.success && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(CheckCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.error && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.warning && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationTriangleIcon, {\n      \"aria-hidden\": \"true\"\n    }))), isOpen && menuAppendTo === 'inline' && menuContainer);\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n      return null;\n    };\n    return React.createElement(GenerateId, null, randomId => React.createElement(SelectContext.Provider, {\n      value: {\n        onSelect,\n        onFavorite,\n        onClose: this.onClose,\n        variant,\n        inputIdPrefix: inputIdPrefix || randomId,\n        shouldResetOnSelect\n      }\n    }, menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n      trigger: mainContainer,\n      popper: popperContainer,\n      direction: direction,\n      appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n      isVisible: isOpen,\n      removeFindDomNode: removeFindDomNode,\n      zIndex: zIndex\n    })));\n  }\n}\nSelect.displayName = 'Select';\nSelect.defaultProps = {\n  children: [],\n  className: '',\n  position: SelectPosition.left,\n  direction: SelectDirection.down,\n  toggleId: null,\n  isOpen: false,\n  isGrouped: false,\n  isPlain: false,\n  isDisabled: false,\n  hasPlaceholderStyle: false,\n  isCreatable: false,\n  isCreateOptionOnTop: false,\n  validated: 'default',\n  'aria-label': '',\n  'aria-labelledby': '',\n  'aria-describedby': '',\n  'aria-invalid': false,\n  typeAheadAriaLabel: '',\n  typeAheadAriaDescribedby: '',\n  clearSelectionsAriaLabel: 'Clear all',\n  toggleAriaLabel: 'Options menu',\n  removeSelectionAriaLabel: 'Remove',\n  selections: [],\n  createText: 'Create',\n  placeholderText: '',\n  noResultsFoundText: 'No results found',\n  variant: SelectVariant.single,\n  width: '',\n  onClear: () => undefined,\n  onCreateOption: () => undefined,\n  toggleIcon: null,\n  toggleIndicator: null,\n  onFilter: null,\n  onTypeaheadInputChanged: null,\n  customContent: null,\n  hasInlineFilter: false,\n  inlineFilterPlaceholderText: null,\n  customBadgeText: null,\n  inputIdPrefix: '',\n  inputAutoComplete: 'off',\n  menuAppendTo: 'inline',\n  favorites: [],\n  favoritesLabel: 'Favorites',\n  ouiaSafe: true,\n  chipGroupComponent: null,\n  isInputValuePersisted: false,\n  isInputFilterPersisted: false,\n  isCreateSelectOptionObject: false,\n  shouldResetOnSelect: true,\n  isFlipEnabled: true,\n  removeFindDomNode: false,\n  zIndex: 9999\n};","map":{"version":3,"sources":["../../../../src/components/Select/Select.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption } from './SelectOption';\nimport { SelectGroup } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport { SelectContext, SelectVariant, SelectPosition, SelectDirection, SelectFooterTabbableItems } from './selectConstants';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { Spinner } from '../Spinner';\nimport { keyHandler, getNextIndex, getOUIAProps, getDefaultOUIAId, GenerateId } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nimport { Divider } from '../Divider';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { findTabbableElements } from '../../helpers/util';\n// seed for the aria-labelledby ID\nlet currentId = 0;\nexport class Select extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.parentRef = React.createRef();\n        this.menuComponentRef = React.createRef();\n        this.filterRef = React.createRef();\n        this.clearRef = React.createRef();\n        this.inputRef = React.createRef();\n        this.refCollection = [[]];\n        this.optionContainerRefCollection = [];\n        this.footerRef = React.createRef();\n        this.state = {\n            focusFirstOption: false,\n            typeaheadInputValue: null,\n            typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n            favoritesGroup: [],\n            typeaheadCurrIndex: -1,\n            typeaheadStoredIndex: -1,\n            creatableValue: '',\n            tabbedIntoFavoritesMenu: false,\n            ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant),\n            viewMoreNextIndex: -1\n        };\n        this.getTypeaheadActiveChild = (typeaheadCurrIndex) => this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n        this.componentDidUpdate = (prevProps, prevState) => {\n            if (this.props.hasInlineFilter) {\n                this.refCollection[0][0] = this.filterRef.current;\n            }\n            // Move focus to top of the menu if state.focusFirstOption was updated to true and the menu does not have custom content\n            if (!prevState.focusFirstOption && this.state.focusFirstOption && !this.props.customContent) {\n                const firstRef = this.refCollection.find(ref => \n                // If a select option is disabled then ref[0] will be undefined, so we want to return\n                // the first ref that both a) is not null and b) is not disabled.\n                ref !== null && ref[0]);\n                if (firstRef && firstRef[0]) {\n                    firstRef[0].focus();\n                }\n            }\n            else if (\n            // if viewMoreNextIndex is not -1, view more was clicked, set focus on first newly loaded item\n            this.state.viewMoreNextIndex !== -1 &&\n                this.refCollection.length > this.state.viewMoreNextIndex &&\n                this.props.loadingVariant !== 'spinner' &&\n                this.refCollection[this.state.viewMoreNextIndex][0] &&\n                this.props.variant !== 'typeahead' && // do not hard focus newly added items for typeahead variants\n                this.props.variant !== 'typeaheadmulti') {\n                this.refCollection[this.state.viewMoreNextIndex][0].focus();\n                this.setState({ viewMoreNextIndex: -1 });\n            }\n            const checkUpdatedChildren = (prevChildren, currChildren) => Array.from(prevChildren).some((prevChild, index) => {\n                const prevChildProps = prevChild.props;\n                const currChild = currChildren[index];\n                const { props: currChildProps } = currChild;\n                if (prevChildProps && currChildProps) {\n                    return (prevChildProps.value !== currChildProps.value ||\n                        prevChildProps.label !== currChildProps.label ||\n                        prevChildProps.isDisabled !== currChildProps.isDisabled ||\n                        prevChildProps.isPlaceholder !== currChildProps.isPlaceholder);\n                }\n                else {\n                    return prevChild !== currChild;\n                }\n            });\n            const hasUpdatedChildren = prevProps.children.length !== this.props.children.length ||\n                checkUpdatedChildren(prevProps.children, this.props.children) ||\n                (this.props.isGrouped &&\n                    Array.from(prevProps.children).some((prevChild, index) => prevChild.type === SelectGroup &&\n                        prevChild.props.children &&\n                        this.props.children[index].props.children &&\n                        (prevChild.props.children.length !== this.props.children[index].props.children.length ||\n                            checkUpdatedChildren(prevChild.props.children, this.props.children[index].props.children))));\n            if (hasUpdatedChildren) {\n                this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n            }\n            // for menus with favorites,\n            // if the number of favorites or typeahead filtered children has changed, the generated\n            // list of favorites needs to be updated\n            if (this.props.onFavorite &&\n                (this.props.favorites.length !== prevProps.favorites.length ||\n                    this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)) {\n                const tempRenderableChildren = this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti'\n                    ? this.state.typeaheadFilteredChildren\n                    : this.props.children;\n                const renderableFavorites = createRenderableFavorites(tempRenderableChildren, this.props.isGrouped, this.props.favorites);\n                const favoritesGroup = renderableFavorites.length\n                    ? [\n                        React.createElement(SelectGroup, { key: \"favorites\", label: this.props.favoritesLabel }, renderableFavorites),\n                        React.createElement(Divider, { key: \"favorites-group-divider\" })\n                    ]\n                    : [];\n                this.setState({ favoritesGroup });\n            }\n        };\n        this.onEnter = () => {\n            this.setState({ focusFirstOption: true });\n        };\n        this.onToggle = (isExpanded, e) => {\n            const { isInputValuePersisted, onSelect, onToggle, hasInlineFilter } = this.props;\n            if (!isExpanded && isInputValuePersisted && onSelect) {\n                onSelect(undefined, this.inputRef.current ? this.inputRef.current.value : '');\n            }\n            if (isExpanded && hasInlineFilter) {\n                this.setState({\n                    focusFirstOption: true\n                });\n            }\n            onToggle(isExpanded, e);\n        };\n        this.onClose = () => {\n            const { isInputFilterPersisted } = this.props;\n            this.setState(Object.assign(Object.assign({ focusFirstOption: false, typeaheadInputValue: null }, (!isInputFilterPersisted && {\n                typeaheadFilteredChildren: React.Children.toArray(this.props.children)\n            })), { typeaheadCurrIndex: -1, tabbedIntoFavoritesMenu: false, viewMoreNextIndex: -1 }));\n        };\n        this.onChange = (e) => {\n            if (e.target.value.toString() !== '' && !this.props.isOpen) {\n                this.onToggle(true, e);\n            }\n            if (this.props.onTypeaheadInputChanged) {\n                this.props.onTypeaheadInputChanged(e.target.value.toString());\n            }\n            this.setState({\n                typeaheadCurrIndex: -1,\n                typeaheadInputValue: e.target.value,\n                creatableValue: e.target.value\n            });\n            this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n            this.refCollection = [[]];\n        };\n        this.updateTypeAheadFilteredChildren = (typeaheadInputValue, e) => {\n            let typeaheadFilteredChildren;\n            const { onFilter, isCreatable, isCreateOptionOnTop, onCreateOption, createText, noResultsFoundText, children, isGrouped, isCreateSelectOptionObject, loadingVariant } = this.props;\n            if (onFilter) {\n                /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n                 * In this case the e is null but we can get the typeaheadInputValue from the state.\n                 */\n                typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n            }\n            else {\n                let input;\n                try {\n                    input = new RegExp(typeaheadInputValue.toString(), 'i');\n                }\n                catch (err) {\n                    input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n                }\n                const childrenArray = React.Children.toArray(children);\n                if (isGrouped) {\n                    const childFilter = (child) => child.props.value &&\n                        child.props.value.toString &&\n                        this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n                    typeaheadFilteredChildren =\n                        typeaheadInputValue.toString() !== ''\n                            ? React.Children.map(children, group => {\n                                if (React.isValidElement(group) &&\n                                    group.type === SelectGroup) {\n                                    const filteredGroupChildren = React.Children.toArray(group.props.children).filter(childFilter);\n                                    if (filteredGroupChildren.length > 0) {\n                                        return React.cloneElement(group, {\n                                            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                                            children: filteredGroupChildren\n                                        });\n                                    }\n                                }\n                                else {\n                                    return React.Children.toArray(group).filter(childFilter);\n                                }\n                            })\n                            : childrenArray;\n                }\n                else {\n                    typeaheadFilteredChildren =\n                        typeaheadInputValue.toString() !== ''\n                            ? childrenArray.filter(child => {\n                                const valueToCheck = child.props.value;\n                                // Dividers don't have value and should not be filtered\n                                if (!valueToCheck) {\n                                    return true;\n                                }\n                                const isSelectOptionObject = typeof valueToCheck !== 'string' &&\n                                    valueToCheck.toString &&\n                                    valueToCheck.compareTo;\n                                // View more option should be returned as not a match\n                                if (loadingVariant !== 'spinner' && (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) === valueToCheck) {\n                                    return true;\n                                }\n                                // spinner should be returned as not a match\n                                if (loadingVariant === 'spinner' && valueToCheck === 'loading') {\n                                    return true;\n                                }\n                                if (isSelectOptionObject) {\n                                    return valueToCheck.compareTo(typeaheadInputValue);\n                                }\n                                else {\n                                    return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n                                }\n                            })\n                            : childrenArray;\n                }\n            }\n            if (!typeaheadFilteredChildren) {\n                typeaheadFilteredChildren = [];\n            }\n            if (typeaheadFilteredChildren.length === 0) {\n                !isCreatable &&\n                    typeaheadFilteredChildren.push(React.createElement(SelectOption, { isDisabled: true, key: \"no-results\", value: noResultsFoundText, isNoResultsOption: true }));\n            }\n            if (isCreatable && typeaheadInputValue !== '') {\n                const newValue = typeaheadInputValue;\n                if (!typeaheadFilteredChildren.find((i) => i.props.value && i.props.value.toString().toLowerCase() === newValue.toString().toLowerCase())) {\n                    const newOptionValue = isCreateSelectOptionObject\n                        ? {\n                            toString: () => newValue,\n                            compareTo: value => this.toString()\n                                .toLowerCase()\n                                .includes(value.toString().toLowerCase())\n                        }\n                        : newValue;\n                    const createSelectOption = (React.createElement(SelectOption, { key: `create ${newValue}`, value: newOptionValue, onClick: () => onCreateOption && onCreateOption(newValue) },\n                        createText,\n                        \" \\\"\",\n                        newValue,\n                        \"\\\"\"));\n                    if (isCreateOptionOnTop) {\n                        typeaheadFilteredChildren.unshift(createSelectOption);\n                    }\n                    else {\n                        typeaheadFilteredChildren.push(createSelectOption);\n                    }\n                }\n            }\n            this.setState({\n                typeaheadFilteredChildren\n            });\n        };\n        this.onClick = (e) => {\n            if (!this.props.isOpen) {\n                this.onToggle(true, e);\n            }\n        };\n        this.clearSelection = (_e) => {\n            this.setState({\n                typeaheadInputValue: null,\n                typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n                typeaheadCurrIndex: -1\n            });\n        };\n        this.sendRef = (optionRef, favoriteRef, optionContainerRef, index) => {\n            this.refCollection[index] = [optionRef, favoriteRef];\n            this.optionContainerRefCollection[index] = optionContainerRef;\n        };\n        this.handleMenuKeys = (index, innerIndex, position) => {\n            keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n            if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n                if (position !== 'tab') {\n                    this.handleTypeaheadKeys(position);\n                }\n            }\n        };\n        this.moveFocus = (nextIndex, updateCurrentIndex = true) => {\n            const { isCreatable, createText } = this.props;\n            const hasDescriptionElm = Boolean(this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-description'));\n            const isLoad = Boolean(this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-load'));\n            const optionTextElm = hasDescriptionElm\n                ? this.refCollection[nextIndex][0].firstElementChild\n                : this.refCollection[nextIndex][0];\n            let typeaheadInputValue = '';\n            if (isCreatable && optionTextElm.textContent.includes(createText)) {\n                typeaheadInputValue = this.state.creatableValue;\n            }\n            else if (optionTextElm && !isLoad) {\n                // !isLoad prevents the view more button text from appearing the typeahead input\n                typeaheadInputValue = optionTextElm.textContent;\n            }\n            this.setState(prevState => ({\n                typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n                typeaheadStoredIndex: nextIndex,\n                typeaheadInputValue\n            }));\n        };\n        this.switchFocusToFavoriteMenu = () => {\n            const { typeaheadCurrIndex, typeaheadStoredIndex } = this.state;\n            let indexForFocus = 0;\n            if (typeaheadCurrIndex !== -1) {\n                indexForFocus = typeaheadCurrIndex;\n            }\n            else if (typeaheadStoredIndex !== -1) {\n                indexForFocus = typeaheadStoredIndex;\n            }\n            if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n                this.refCollection[indexForFocus][0].focus();\n            }\n            else {\n                this.clearRef.current.focus();\n            }\n            this.setState({\n                tabbedIntoFavoritesMenu: true,\n                typeaheadCurrIndex: -1\n            });\n        };\n        this.moveFocusToLastMenuItem = () => {\n            const refCollectionLen = this.refCollection.length;\n            if (refCollectionLen > 0 &&\n                this.refCollection[refCollectionLen - 1] !== null &&\n                this.refCollection[refCollectionLen - 1][0] !== null) {\n                this.refCollection[refCollectionLen - 1][0].focus();\n            }\n        };\n        this.handleTypeaheadKeys = (position, shiftKey = false) => {\n            const { isOpen, onFavorite, isCreatable } = this.props;\n            const { typeaheadCurrIndex, tabbedIntoFavoritesMenu } = this.state;\n            const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n            if (isOpen) {\n                if (position === 'enter') {\n                    if ((typeaheadCurrIndex !== -1 || (isCreatable && this.refCollection.length === 1)) && // do not allow selection without moving to an initial option unless it is a single create option\n                        (typeaheadActiveChild || (this.refCollection[0] && this.refCollection[0][0]))) {\n                        if (typeaheadActiveChild) {\n                            if (!typeaheadActiveChild.classList.contains('pf-m-load')) {\n                                const hasDescriptionElm = typeaheadActiveChild.childElementCount > 1;\n                                const typeaheadActiveChildText = hasDescriptionElm\n                                    ? typeaheadActiveChild.firstChild.textContent\n                                    : typeaheadActiveChild.textContent;\n                                this.setState({\n                                    typeaheadInputValue: typeaheadActiveChildText\n                                });\n                            }\n                        }\n                        else if (this.refCollection[0] && this.refCollection[0][0]) {\n                            this.setState({\n                                typeaheadInputValue: this.refCollection[0][0].textContent\n                            });\n                        }\n                        if (typeaheadActiveChild) {\n                            typeaheadActiveChild.click();\n                        }\n                        else {\n                            this.refCollection[0][0].click();\n                        }\n                    }\n                }\n                else if (position === 'tab') {\n                    if (onFavorite) {\n                        // if the input has focus, tab to the first item or the last item that was previously focused.\n                        if (this.inputRef.current === document.activeElement) {\n                            // If shift is also clicked and there is a footer, tab to the last item in tabbable footer\n                            if (this.props.footer && shiftKey) {\n                                const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                                if (tabbableItems.length > 0) {\n                                    if (tabbableItems[tabbableItems.length - 1]) {\n                                        tabbableItems[tabbableItems.length - 1].focus();\n                                    }\n                                }\n                            }\n                            else {\n                                this.switchFocusToFavoriteMenu();\n                            }\n                        }\n                        else {\n                            // focus is on menu or footer\n                            if (this.props.footer) {\n                                let tabbedIntoMenu = false;\n                                const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                                if (tabbableItems.length > 0) {\n                                    // if current element is not in footer, tab to first tabbable element in footer,\n                                    // if shift was clicked, tab to input since focus is on menu\n                                    const currentElementIndex = tabbableItems.findIndex((item) => item === document.activeElement);\n                                    if (currentElementIndex === -1) {\n                                        if (shiftKey) {\n                                            // currently in menu, shift back to input\n                                            this.inputRef.current.focus();\n                                        }\n                                        else {\n                                            // currently in menu, tab to first tabbable item in footer\n                                            tabbableItems[0].focus();\n                                        }\n                                    }\n                                    else {\n                                        // already in footer\n                                        if (shiftKey) {\n                                            // shift to previous item\n                                            if (currentElementIndex === 0) {\n                                                // on first footer item, shift back to menu\n                                                this.switchFocusToFavoriteMenu();\n                                                tabbedIntoMenu = true;\n                                            }\n                                            else {\n                                                // shift to previous footer item\n                                                tabbableItems[currentElementIndex - 1].focus();\n                                            }\n                                        }\n                                        else {\n                                            // tab to next tabbable item in footer or to input.\n                                            if (tabbableItems[currentElementIndex + 1]) {\n                                                tabbableItems[currentElementIndex + 1].focus();\n                                            }\n                                            else {\n                                                this.inputRef.current.focus();\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    // no tabbable items in footer, tab to input\n                                    this.inputRef.current.focus();\n                                    tabbedIntoMenu = false;\n                                }\n                                this.setState({ tabbedIntoFavoritesMenu: tabbedIntoMenu });\n                            }\n                            else {\n                                this.inputRef.current.focus();\n                                this.setState({ tabbedIntoFavoritesMenu: false });\n                            }\n                        }\n                    }\n                    else {\n                        // Close if there is no footer\n                        if (!this.props.footer) {\n                            this.onToggle(false, null);\n                            this.onClose();\n                        }\n                        else {\n                            // has footer\n                            const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                            const currentElementIndex = tabbableItems.findIndex((item) => item === document.activeElement);\n                            if (this.inputRef.current === document.activeElement) {\n                                if (shiftKey) {\n                                    // close toggle if shift key and tab on input\n                                    this.onToggle(false, null);\n                                    this.onClose();\n                                }\n                                else {\n                                    // tab to first tabbable item in footer\n                                    if (tabbableItems[0]) {\n                                        tabbableItems[0].focus();\n                                    }\n                                    else {\n                                        this.onToggle(false, null);\n                                        this.onClose();\n                                    }\n                                }\n                            }\n                            else {\n                                // focus is in footer\n                                if (shiftKey) {\n                                    if (currentElementIndex === 0) {\n                                        // shift tab back to input\n                                        this.inputRef.current.focus();\n                                    }\n                                    else {\n                                        // shift to previous footer item\n                                        tabbableItems[currentElementIndex - 1].focus();\n                                    }\n                                }\n                                else {\n                                    // tab to next footer item or close tab if last item\n                                    if (tabbableItems[currentElementIndex + 1]) {\n                                        tabbableItems[currentElementIndex + 1].focus();\n                                    }\n                                    else {\n                                        // no next item, close toggle\n                                        this.onToggle(false, null);\n                                        this.inputRef.current.focus();\n                                        this.onClose();\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else if (!tabbedIntoFavoritesMenu) {\n                    if (this.refCollection[0][0] === null) {\n                        return;\n                    }\n                    let nextIndex;\n                    if (typeaheadCurrIndex === -1 && position === 'down') {\n                        nextIndex = 0;\n                    }\n                    else if (typeaheadCurrIndex === -1 && position === 'up') {\n                        nextIndex = this.refCollection.length - 1;\n                    }\n                    else if (position !== 'left' && position !== 'right') {\n                        nextIndex = getNextIndex(typeaheadCurrIndex, position, this.refCollection);\n                    }\n                    else {\n                        nextIndex = typeaheadCurrIndex;\n                    }\n                    if (this.refCollection[nextIndex] === null) {\n                        return;\n                    }\n                    this.moveFocus(nextIndex);\n                }\n                else {\n                    const nextIndex = this.refCollection.findIndex(ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement));\n                    this.moveFocus(nextIndex);\n                }\n            }\n        };\n        this.onClickTypeaheadToggleButton = () => {\n            if (this.inputRef && this.inputRef.current) {\n                this.inputRef.current.focus();\n            }\n        };\n        this.getDisplay = (value, type = 'node') => {\n            if (!value) {\n                return;\n            }\n            const item = this.props.isGrouped\n                ? React.Children.toArray(this.props.children)\n                    .reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], [])\n                    .find(child => child.props.value.toString() === value.toString())\n                : React.Children.toArray(this.props.children).find(child => child.props.value &&\n                    child.props.value.toString() === value.toString());\n            if (item) {\n                if (item && item.props.children) {\n                    if (type === 'node') {\n                        return item.props.children;\n                    }\n                    return this.findText(item);\n                }\n                return item.props.value.toString();\n            }\n            return value.toString();\n        };\n        this.findText = (item) => {\n            if (typeof item === 'string') {\n                return item;\n            }\n            else if (!React.isValidElement(item)) {\n                return '';\n            }\n            else {\n                const multi = [];\n                React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n                return multi.join('');\n            }\n        };\n        this.generateSelectedBadge = () => {\n            const { customBadgeText, selections } = this.props;\n            if (customBadgeText !== null) {\n                return customBadgeText;\n            }\n            if (Array.isArray(selections) && selections.length > 0) {\n                return selections.length;\n            }\n            return null;\n        };\n        this.setVieMoreNextIndex = () => {\n            this.setState({ viewMoreNextIndex: this.refCollection.length - 1 });\n        };\n        this.isLastOptionBeforeFooter = (index) => this.props.footer && index === this.refCollection.length - 1 ? true : false;\n    }\n    extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup) {\n        const { isGrouped, onFavorite, createText } = this.props;\n        const typeaheadChildren = favoritesGroup\n            ? favoritesGroup.concat(this.state.typeaheadFilteredChildren)\n            : this.state.typeaheadFilteredChildren;\n        const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n        let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n        if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n            typeaheadActiveChild = typeaheadActiveChild.firstElementChild;\n        }\n        this.refCollection = [[]];\n        this.optionContainerRefCollection = [];\n        if (isGrouped) {\n            return React.Children.map(typeaheadChildren, (group) => {\n                if (group.type === Divider) {\n                    return group;\n                }\n                else if (group.type === SelectGroup && onFavorite) {\n                    return React.cloneElement(group, {\n                        titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                        children: React.Children.map(group.props.children, (child) => child.type === Divider\n                            ? child\n                            : React.cloneElement(child, {\n                                isFocused: activeElement &&\n                                    (activeElement.id === child.props.id ||\n                                        (this.props.isCreatable &&\n                                            typeaheadActiveChild.textContent ===\n                                                `${createText} \"${group.props.value}\"`))\n                            }))\n                    });\n                }\n                else if (group.type === SelectGroup) {\n                    return React.cloneElement(group, {\n                        titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                        children: React.Children.map(group.props.children, (child) => child.type === Divider\n                            ? child\n                            : React.cloneElement(child, {\n                                isFocused: typeaheadActiveChild &&\n                                    (typeaheadActiveChild.textContent === child.props.value.toString() ||\n                                        (this.props.isCreatable &&\n                                            typeaheadActiveChild.textContent ===\n                                                `${createText} \"${child.props.value}\"`))\n                            }))\n                    });\n                }\n                else {\n                    // group has been filtered down to SelectOption\n                    return React.cloneElement(group, {\n                        isFocused: typeaheadActiveChild &&\n                            (typeaheadActiveChild.textContent === group.props.value.toString() ||\n                                (this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${group.props.value}\"`))\n                    });\n                }\n            });\n        }\n        return typeaheadChildren.map((child, index) => {\n            const childElement = child;\n            return childElement.type.displayName === 'Divider'\n                ? child\n                : React.cloneElement(child, {\n                    isFocused: typeaheadActiveChild\n                        ? typeaheadActiveChild.textContent === child.props.value.toString() ||\n                            (this.props.isCreatable &&\n                                typeaheadActiveChild.textContent === `${createText} \"${child.props.value}\"`)\n                        : index === typeaheadCurrIndex // fallback for view more + typeahead use cases, when the new expanded list is loaded and refCollection hasn't be updated yet\n                });\n        });\n    }\n    render() {\n        const _a = this.props, { children, chipGroupProps, chipGroupComponent, className, customContent, variant, direction, onSelect, onClear, onBlur, toggleId, toggleRef, isOpen, isGrouped, isPlain, isDisabled, hasPlaceholderStyle, validated, selections: selectionsProp, typeAheadAriaLabel, typeAheadAriaDescribedby, clearSelectionsAriaLabel, toggleAriaLabel, removeSelectionAriaLabel, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, 'aria-describedby': ariaDescribedby, 'aria-invalid': ariaInvalid, placeholderText, width, maxHeight, toggleIcon, toggleIndicator, ouiaId, ouiaSafe, hasInlineFilter, isCheckboxSelectionBadgeHidden, inlineFilterPlaceholderText, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onFilter, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onTypeaheadInputChanged, onCreateOption, isCreatable, onToggle, createText, noResultsFoundText, customBadgeText, inputIdPrefix, inputAutoComplete, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isInputValuePersisted, isInputFilterPersisted, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        menuAppendTo, favorites, onFavorite, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        favoritesLabel, footer, loadingVariant, isCreateSelectOptionObject, isCreateOptionOnTop, shouldResetOnSelect, isFlipEnabled, removeFindDomNode, zIndex } = _a, props = __rest(_a, [\"children\", \"chipGroupProps\", \"chipGroupComponent\", \"className\", \"customContent\", \"variant\", \"direction\", \"onSelect\", \"onClear\", \"onBlur\", \"toggleId\", \"toggleRef\", \"isOpen\", \"isGrouped\", \"isPlain\", \"isDisabled\", \"hasPlaceholderStyle\", \"validated\", \"selections\", \"typeAheadAriaLabel\", \"typeAheadAriaDescribedby\", \"clearSelectionsAriaLabel\", \"toggleAriaLabel\", \"removeSelectionAriaLabel\", 'aria-label', 'aria-labelledby', 'aria-describedby', 'aria-invalid', \"placeholderText\", \"width\", \"maxHeight\", \"toggleIcon\", \"toggleIndicator\", \"ouiaId\", \"ouiaSafe\", \"hasInlineFilter\", \"isCheckboxSelectionBadgeHidden\", \"inlineFilterPlaceholderText\", \"onFilter\", \"onTypeaheadInputChanged\", \"onCreateOption\", \"isCreatable\", \"onToggle\", \"createText\", \"noResultsFoundText\", \"customBadgeText\", \"inputIdPrefix\", \"inputAutoComplete\", \"isInputValuePersisted\", \"isInputFilterPersisted\", \"menuAppendTo\", \"favorites\", \"onFavorite\", \"favoritesLabel\", \"footer\", \"loadingVariant\", \"isCreateSelectOptionObject\", \"isCreateOptionOnTop\", \"shouldResetOnSelect\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n        const { focusFirstOption: openedOnEnter, typeaheadCurrIndex, typeaheadInputValue, typeaheadFilteredChildren, favoritesGroup } = this.state;\n        const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n        const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp];\n        // Find out if the selected option is a placeholder\n        const selectedOption = React.Children.toArray(children).find((option) => option.props.value === selections[0]);\n        const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;\n        const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n        const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n        let childPlaceholderText = null;\n        // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n        let renderableItems = [];\n        if (onFavorite) {\n            // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n            let tempExtendedChildren = children;\n            if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n                tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n            }\n            else if (onFavorite) {\n                tempExtendedChildren = favoritesGroup.concat(children);\n            }\n            // mark items that are favorited with isFavorite\n            renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n        }\n        else {\n            renderableItems = children;\n        }\n        if (!customContent) {\n            if (!hasAnySelections && !placeholderText) {\n                const childPlaceholder = React.Children.toArray(children).filter((child) => child.props.isPlaceholder === true);\n                childPlaceholderText =\n                    (childPlaceholder[0] && this.getDisplay(childPlaceholder[0].props.value, 'node')) ||\n                        (children[0] && this.getDisplay(children[0].props.value, 'node'));\n            }\n        }\n        if (isOpen) {\n            if (renderableItems.find(item => (item === null || item === void 0 ? void 0 : item.key) === 'loading') === undefined) {\n                if (loadingVariant === 'spinner') {\n                    renderableItems.push(React.createElement(SelectOption, { isLoading: true, key: \"loading\", value: \"loading\" },\n                        React.createElement(Spinner, { size: \"lg\" })));\n                }\n                else if (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) {\n                    renderableItems.push(React.createElement(SelectOption, { isLoad: true, key: \"loading\", value: loadingVariant.text, setViewMoreNextIndex: this.setVieMoreNextIndex, onClick: loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.onClick }));\n                }\n            }\n        }\n        const hasOnClear = onClear !== Select.defaultProps.onClear;\n        const clearBtn = (React.createElement(\"button\", { className: css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear), onClick: e => {\n                this.clearSelection(e);\n                onClear(e);\n                e.stopPropagation();\n            }, \"aria-label\": clearSelectionsAriaLabel, type: \"button\", disabled: isDisabled, ref: this.clearRef, onKeyDown: event => {\n                if (event.key === KeyTypes.Enter) {\n                    this.clearRef.current.click();\n                }\n            } },\n            React.createElement(TimesCircleIcon, { \"aria-hidden\": true })));\n        let selectedChips = null;\n        if (variant === SelectVariant.typeaheadMulti) {\n            selectedChips = chipGroupComponent ? (chipGroupComponent) : (React.createElement(ChipGroup, Object.assign({}, chipGroupProps), selections &&\n                selections.map(item => (React.createElement(Chip, { key: item, onClick: (e) => onSelect(e, item), closeBtnAriaLabel: removeSelectionAriaLabel }, this.getDisplay(item, 'node'))))));\n        }\n        if (hasInlineFilter) {\n            const filterBox = (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { key: \"inline-filter\", className: css(styles.selectMenuSearch) },\n                    React.createElement(\"input\", { key: \"inline-filter-input\", type: \"search\", className: css(formStyles.formControl, formStyles.modifiers.search), onChange: this.onChange, placeholder: inlineFilterPlaceholderText, onKeyDown: event => {\n                            if (event.key === KeyTypes.ArrowUp) {\n                                this.handleMenuKeys(0, 0, 'up');\n                                event.preventDefault();\n                            }\n                            else if (event.key === KeyTypes.ArrowDown) {\n                                this.handleMenuKeys(0, 0, 'down');\n                                event.preventDefault();\n                            }\n                            else if (event.key === KeyTypes.ArrowLeft) {\n                                this.handleMenuKeys(0, 0, 'left');\n                                event.preventDefault();\n                            }\n                            else if (event.key === KeyTypes.ArrowRight) {\n                                this.handleMenuKeys(0, 0, 'right');\n                                event.preventDefault();\n                            }\n                            else if (event.key === KeyTypes.Tab && variant !== SelectVariant.checkbox && this.props.footer) {\n                                // tab to footer or close menu if shift key\n                                if (event.shiftKey) {\n                                    this.onToggle(false, event);\n                                }\n                                else {\n                                    const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                                    if (tabbableItems.length > 0) {\n                                        tabbableItems[0].focus();\n                                        event.stopPropagation();\n                                        event.preventDefault();\n                                    }\n                                    else {\n                                        this.onToggle(false, event);\n                                    }\n                                }\n                            }\n                            else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n                                // More modal-like experience for checkboxes\n                                // Let SelectOption handle this\n                                if (event.shiftKey) {\n                                    this.handleMenuKeys(0, 0, 'up');\n                                }\n                                else {\n                                    this.handleMenuKeys(0, 0, 'down');\n                                }\n                                event.stopPropagation();\n                                event.preventDefault();\n                            }\n                        }, ref: this.filterRef, autoComplete: inputAutoComplete })),\n                React.createElement(Divider, { key: \"inline-filter-divider\" })));\n            renderableItems = [filterBox, ...typeaheadFilteredChildren].map((option, index) => React.cloneElement(option, { key: index }));\n        }\n        let variantProps;\n        let variantChildren;\n        if (customContent) {\n            variantProps = {\n                selected: selections,\n                openedOnEnter,\n                isCustomContent: true\n            };\n            variantChildren = customContent;\n        }\n        else {\n            switch (variant) {\n                case 'single':\n                    variantProps = {\n                        selected: selections[0],\n                        hasInlineFilter,\n                        openedOnEnter\n                    };\n                    variantChildren = renderableItems;\n                    break;\n                case 'checkbox':\n                    variantProps = {\n                        checked: selections,\n                        isGrouped,\n                        hasInlineFilter,\n                        openedOnEnter\n                    };\n                    variantChildren = renderableItems;\n                    break;\n                case 'typeahead':\n                    variantProps = {\n                        selected: selections[0],\n                        openedOnEnter\n                    };\n                    variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n                    if (variantChildren.length === 0) {\n                        variantChildren.push(React.createElement(SelectOption, { isDisabled: true, key: 0, value: noResultsFoundText, isNoResultsOption: true }));\n                    }\n                    break;\n                case 'typeaheadmulti':\n                    variantProps = {\n                        selected: selections,\n                        openedOnEnter\n                    };\n                    variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n                    if (variantChildren.length === 0) {\n                        variantChildren.push(React.createElement(SelectOption, { isDisabled: true, key: 0, value: noResultsFoundText, isNoResultsOption: true }));\n                    }\n                    break;\n            }\n        }\n        const isStatic = isFlipEnabled && menuAppendTo !== 'inline';\n        const innerMenu = (React.createElement(SelectMenu, Object.assign({ className: css(isStatic && styles.modifiers.static) }, props, { isGrouped: isGrouped, selected: selections }, variantProps, { openedOnEnter: openedOnEnter, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy, sendRef: this.sendRef, keyHandler: this.handleMenuKeys, maxHeight: maxHeight, ref: this.menuComponentRef, footer: footer, footerRef: this.footerRef, isLastOptionBeforeFooter: this.isLastOptionBeforeFooter }), variantChildren));\n        const menuContainer = footer ? React.createElement(\"div\", { className: css(styles.selectMenu) },\n            \" \",\n            innerMenu,\n            \" \") : innerMenu;\n        const popperContainer = (React.createElement(\"div\", Object.assign({ className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className) }, (width && { style: { width } }), (validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })), isOpen && menuContainer));\n        const mainContainer = (React.createElement(\"div\", Object.assign({ className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className), ref: this.parentRef }, getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), (width && { style: { width } }), (validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })),\n            React.createElement(SelectToggle, Object.assign({ id: selectToggleId, parentRef: this.parentRef, menuRef: this.menuComponentRef, ref: toggleRef }, (footer && { footerRef: this.footerRef }), { isOpen: isOpen, isPlain: isPlain, hasPlaceholderStyle: hasPlaceholderStyle && (!selections.length || selections[0] === null || isSelectedPlaceholder), onToggle: this.onToggle, onEnter: this.onEnter, onClose: this.onClose, onBlur: onBlur, variant: variant, toggleIndicator: toggleIndicator, \"aria-labelledby\": `${ariaLabelledBy || ''} ${selectToggleId}`, \"aria-label\": toggleAriaLabel }, (ariaDescribedby && { 'aria-describedby': ariaDescribedby }), { handleTypeaheadKeys: this.handleTypeaheadKeys, moveFocusToLastMenuItem: this.moveFocusToLastMenuItem, isDisabled: isDisabled, hasClearButton: hasOnClear, hasFooter: footer !== undefined, onClickTypeaheadToggleButton: this.onClickTypeaheadToggleButton }),\n                customContent && (React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                    toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                    React.createElement(\"span\", { className: css(styles.selectToggleText) }, placeholderText))),\n                variant === SelectVariant.single && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        React.createElement(\"span\", { className: css(styles.selectToggleText) }, this.getDisplay(selections[0], 'node') || placeholderText || childPlaceholderText)),\n                    hasOnClear && hasAnySelections && clearBtn)),\n                variant === SelectVariant.checkbox && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        React.createElement(\"span\", { className: css(styles.selectToggleText) }, placeholderText),\n                        !isCheckboxSelectionBadgeHidden && hasAnySelections && (React.createElement(\"div\", { className: css(styles.selectToggleBadge) },\n                            React.createElement(\"span\", { className: css(badgeStyles.badge, badgeStyles.modifiers.read) }, this.generateSelectedBadge())))),\n                    hasOnClear && hasAnySelections && clearBtn)),\n                variant === SelectVariant.typeahead && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        React.createElement(\"input\", Object.assign({ className: css(formStyles.formControl, styles.selectToggleTypeahead), \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id, id: `${selectToggleId}-select-typeahead`, \"aria-label\": typeAheadAriaLabel }, (typeAheadAriaDescribedby && { 'aria-describedby': typeAheadAriaDescribedby }), { placeholder: placeholderText, value: typeaheadInputValue !== null\n                                ? typeaheadInputValue\n                                : this.getDisplay(selections[0], 'text') || '', type: \"text\", onClick: this.onClick, onChange: this.onChange, autoComplete: inputAutoComplete, disabled: isDisabled, ref: this.inputRef }))),\n                    hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn)),\n                variant === SelectVariant.typeaheadMulti && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        selections && Array.isArray(selections) && selections.length > 0 && selectedChips,\n                        React.createElement(\"input\", Object.assign({ className: css(formStyles.formControl, styles.selectToggleTypeahead), \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id, id: `${selectToggleId}-select-multi-typeahead-typeahead`, \"aria-label\": typeAheadAriaLabel, \"aria-invalid\": validated === ValidatedOptions.error }, (typeAheadAriaDescribedby && { 'aria-describedby': typeAheadAriaDescribedby }), { placeholder: placeholderText, value: typeaheadInputValue !== null ? typeaheadInputValue : '', type: \"text\", onChange: this.onChange, onClick: this.onClick, autoComplete: inputAutoComplete, disabled: isDisabled, ref: this.inputRef }))),\n                    hasOnClear && ((selections && selections.length > 0) || typeaheadInputValue) && clearBtn)),\n                validated === ValidatedOptions.success && (React.createElement(\"span\", { className: css(styles.selectToggleStatusIcon) },\n                    React.createElement(CheckCircleIcon, { \"aria-hidden\": \"true\" }))),\n                validated === ValidatedOptions.error && (React.createElement(\"span\", { className: css(styles.selectToggleStatusIcon) },\n                    React.createElement(ExclamationCircleIcon, { \"aria-hidden\": \"true\" }))),\n                validated === ValidatedOptions.warning && (React.createElement(\"span\", { className: css(styles.selectToggleStatusIcon) },\n                    React.createElement(ExclamationTriangleIcon, { \"aria-hidden\": \"true\" })))),\n            isOpen && menuAppendTo === 'inline' && menuContainer));\n        const getParentElement = () => {\n            if (this.parentRef && this.parentRef.current) {\n                return this.parentRef.current.parentElement;\n            }\n            return null;\n        };\n        return (React.createElement(GenerateId, null, randomId => (React.createElement(SelectContext.Provider, { value: {\n                onSelect,\n                onFavorite,\n                onClose: this.onClose,\n                variant,\n                inputIdPrefix: inputIdPrefix || randomId,\n                shouldResetOnSelect\n            } }, menuAppendTo === 'inline' ? (mainContainer) : (React.createElement(Popper, { trigger: mainContainer, popper: popperContainer, direction: direction, appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo, isVisible: isOpen, removeFindDomNode: removeFindDomNode, zIndex: zIndex }))))));\n    }\n}\nSelect.displayName = 'Select';\nSelect.defaultProps = {\n    children: [],\n    className: '',\n    position: SelectPosition.left,\n    direction: SelectDirection.down,\n    toggleId: null,\n    isOpen: false,\n    isGrouped: false,\n    isPlain: false,\n    isDisabled: false,\n    hasPlaceholderStyle: false,\n    isCreatable: false,\n    isCreateOptionOnTop: false,\n    validated: 'default',\n    'aria-label': '',\n    'aria-labelledby': '',\n    'aria-describedby': '',\n    'aria-invalid': false,\n    typeAheadAriaLabel: '',\n    typeAheadAriaDescribedby: '',\n    clearSelectionsAriaLabel: 'Clear all',\n    toggleAriaLabel: 'Options menu',\n    removeSelectionAriaLabel: 'Remove',\n    selections: [],\n    createText: 'Create',\n    placeholderText: '',\n    noResultsFoundText: 'No results found',\n    variant: SelectVariant.single,\n    width: '',\n    onClear: () => undefined,\n    onCreateOption: () => undefined,\n    toggleIcon: null,\n    toggleIndicator: null,\n    onFilter: null,\n    onTypeaheadInputChanged: null,\n    customContent: null,\n    hasInlineFilter: false,\n    inlineFilterPlaceholderText: null,\n    customBadgeText: null,\n    inputIdPrefix: '',\n    inputAutoComplete: 'off',\n    menuAppendTo: 'inline',\n    favorites: [],\n    favoritesLabel: 'Favorites',\n    ouiaSafe: true,\n    chipGroupComponent: null,\n    isInputValuePersisted: false,\n    isInputFilterPersisted: false,\n    isCreateSelectOptionObject: false,\n    shouldResetOnSelect: true,\n    isFlipEnabled: true,\n    removeFindDomNode: false,\n    zIndex: 9999\n};\n//# sourceMappingURL=Select.js.map"]},"metadata":{},"sourceType":"module"}