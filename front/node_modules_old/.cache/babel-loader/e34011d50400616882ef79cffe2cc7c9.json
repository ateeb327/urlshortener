{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nexport class MenuToggleBase extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayName = 'MenuToggleBase';\n  }\n  render() {\n    const _a = this.props,\n      {\n        children,\n        className,\n        icon,\n        badge,\n        isExpanded,\n        isDisabled,\n        isFullHeight,\n        isFullWidth,\n        splitButtonOptions,\n        variant,\n        innerRef,\n        onClick,\n        'aria-label': ariaLabel\n      } = _a,\n      otherProps = __rest(_a, [\"children\", \"className\", \"icon\", \"badge\", \"isExpanded\", \"isDisabled\", \"isFullHeight\", \"isFullWidth\", \"splitButtonOptions\", \"variant\", \"innerRef\", \"onClick\", 'aria-label']);\n    const isPlain = variant === 'plain';\n    const isPlainText = variant === 'plainText';\n    const isTypeahead = variant === 'typeahead';\n    const toggleControls = React.createElement(\"span\", {\n      className: css(styles.menuToggleControls)\n    }, React.createElement(\"span\", {\n      className: css(styles.menuToggleToggleIcon)\n    }, React.createElement(CaretDownIcon, {\n      \"aria-hidden\": true\n    })));\n    const content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n      className: css(styles.menuToggleIcon)\n    }, icon), isTypeahead ? children : React.createElement(\"span\", {\n      className: css(styles.menuToggleText)\n    }, children), React.isValidElement(badge) && React.createElement(\"span\", {\n      className: css(styles.menuToggleCount)\n    }, badge), isTypeahead ? React.createElement(\"button\", {\n      type: \"button\",\n      className: css(styles.menuToggleButton),\n      \"aria-expanded\": isExpanded,\n      onClick: onClick,\n      \"aria-label\": \"Menu toggle\"\n    }, toggleControls) : toggleControls);\n    const commonStyles = css(styles.menuToggle, isExpanded && styles.modifiers.expanded, variant === 'primary' && styles.modifiers.primary, variant === 'secondary' && styles.modifiers.secondary, (isPlain || isPlainText) && styles.modifiers.plain, isPlainText && styles.modifiers.text, isFullHeight && styles.modifiers.fullHeight, isFullWidth && styles.modifiers.fullWidth, isDisabled && styles.modifiers.disabled, className);\n    const componentProps = Object.assign(Object.assign({\n      children: isPlain ? children : content\n    }, isDisabled && {\n      disabled: true\n    }), otherProps);\n    if (isTypeahead) {\n      return React.createElement(\"div\", Object.assign({\n        ref: innerRef,\n        className: css(commonStyles, styles.modifiers.typeahead)\n      }, componentProps));\n    }\n    if (splitButtonOptions) {\n      return React.createElement(\"div\", {\n        ref: innerRef,\n        className: css(commonStyles, styles.modifiers.splitButton, (splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.variant) === 'action' && styles.modifiers.action)\n      }, splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.items, React.createElement(\"button\", Object.assign({\n        className: css(styles.menuToggleButton),\n        type: \"button\",\n        \"aria-expanded\": isExpanded,\n        \"aria-label\": ariaLabel,\n        disabled: isDisabled,\n        onClick: onClick\n      }, otherProps), toggleControls));\n    }\n    return React.createElement(\"button\", Object.assign({\n      className: css(commonStyles),\n      type: \"button\",\n      \"aria-label\": ariaLabel,\n      \"aria-expanded\": isExpanded,\n      ref: innerRef,\n      disabled: isDisabled,\n      onClick: onClick\n    }, componentProps));\n  }\n}\nMenuToggleBase.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isDisabled: false,\n  isFullWidth: false,\n  isFullHeight: false\n};\nexport const MenuToggle = React.forwardRef((props, ref) => React.createElement(MenuToggleBase, Object.assign({\n  innerRef: ref\n}, props)));\nMenuToggle.displayName = 'MenuToggle';","map":{"version":3,"sources":["../../../../src/components/MenuToggle/MenuToggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nexport class MenuToggleBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'MenuToggleBase';\n    }\n    render() {\n        const _a = this.props, { children, className, icon, badge, isExpanded, isDisabled, isFullHeight, isFullWidth, splitButtonOptions, variant, innerRef, onClick, 'aria-label': ariaLabel } = _a, otherProps = __rest(_a, [\"children\", \"className\", \"icon\", \"badge\", \"isExpanded\", \"isDisabled\", \"isFullHeight\", \"isFullWidth\", \"splitButtonOptions\", \"variant\", \"innerRef\", \"onClick\", 'aria-label']);\n        const isPlain = variant === 'plain';\n        const isPlainText = variant === 'plainText';\n        const isTypeahead = variant === 'typeahead';\n        const toggleControls = (React.createElement(\"span\", { className: css(styles.menuToggleControls) },\n            React.createElement(\"span\", { className: css(styles.menuToggleToggleIcon) },\n                React.createElement(CaretDownIcon, { \"aria-hidden\": true }))));\n        const content = (React.createElement(React.Fragment, null,\n            icon && React.createElement(\"span\", { className: css(styles.menuToggleIcon) }, icon),\n            isTypeahead ? children : React.createElement(\"span\", { className: css(styles.menuToggleText) }, children),\n            React.isValidElement(badge) && React.createElement(\"span\", { className: css(styles.menuToggleCount) }, badge),\n            isTypeahead ? (React.createElement(\"button\", { type: \"button\", className: css(styles.menuToggleButton), \"aria-expanded\": isExpanded, onClick: onClick, \"aria-label\": \"Menu toggle\" }, toggleControls)) : (toggleControls)));\n        const commonStyles = css(styles.menuToggle, isExpanded && styles.modifiers.expanded, variant === 'primary' && styles.modifiers.primary, variant === 'secondary' && styles.modifiers.secondary, (isPlain || isPlainText) && styles.modifiers.plain, isPlainText && styles.modifiers.text, isFullHeight && styles.modifiers.fullHeight, isFullWidth && styles.modifiers.fullWidth, isDisabled && styles.modifiers.disabled, className);\n        const componentProps = Object.assign(Object.assign({ children: isPlain ? children : content }, (isDisabled && { disabled: true })), otherProps);\n        if (isTypeahead) {\n            return (React.createElement(\"div\", Object.assign({ ref: innerRef, className: css(commonStyles, styles.modifiers.typeahead) }, componentProps)));\n        }\n        if (splitButtonOptions) {\n            return (React.createElement(\"div\", { ref: innerRef, className: css(commonStyles, styles.modifiers.splitButton, (splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.variant) === 'action' && styles.modifiers.action) }, splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 :\n                splitButtonOptions.items,\n                React.createElement(\"button\", Object.assign({ className: css(styles.menuToggleButton), type: \"button\", \"aria-expanded\": isExpanded, \"aria-label\": ariaLabel, disabled: isDisabled, onClick: onClick }, otherProps), toggleControls)));\n        }\n        return (React.createElement(\"button\", Object.assign({ className: css(commonStyles), type: \"button\", \"aria-label\": ariaLabel, \"aria-expanded\": isExpanded, ref: innerRef, disabled: isDisabled, onClick: onClick }, componentProps)));\n    }\n}\nMenuToggleBase.defaultProps = {\n    className: '',\n    isExpanded: false,\n    isDisabled: false,\n    isFullWidth: false,\n    isFullHeight: false\n};\nexport const MenuToggle = React.forwardRef((props, ref) => (React.createElement(MenuToggleBase, Object.assign({ innerRef: ref }, props))));\nMenuToggle.displayName = 'MenuToggle';\n//# sourceMappingURL=MenuToggle.js.map"]},"metadata":{},"sourceType":"module"}