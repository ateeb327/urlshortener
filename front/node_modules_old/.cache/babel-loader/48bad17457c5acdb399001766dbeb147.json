{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PopoverPosition } from '../Popover';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nimport { getOUIAProps } from '../../helpers';\nexport const clipboardCopyFunc = (event, text) => {\n  navigator.clipboard.writeText(text.toString());\n};\nexport var ClipboardCopyVariant;\n(function (ClipboardCopyVariant) {\n  ClipboardCopyVariant[\"inline\"] = \"inline\";\n  ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n  ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\nexport class ClipboardCopy extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.children !== this.props.children) {\n        this.updateText(this.props.children);\n      }\n    };\n    this.componentWillUnmount = () => {\n      if (this.timer) {\n        window.clearTimeout(this.timer);\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.expandContent = _event => {\n      this.setState(prevState => ({\n        expanded: !prevState.expanded\n      }));\n    };\n    this.updateText = text => {\n      this.setState({\n        text\n      });\n      this.props.onChange(text);\n    };\n    this.render = () => {\n      const _a = this.props,\n        {\n          /* eslint-disable @typescript-eslint/no-unused-vars */\n          isExpanded,\n          onChange,\n          // Don't pass to <div>\n          switchDelay,\n          /* eslint-enable @typescript-eslint/no-unused-vars */\n          isReadOnly,\n          isCode,\n          isBlock,\n          exitDelay,\n          maxWidth,\n          entryDelay,\n          onCopy,\n          hoverTip,\n          clickTip,\n          textAriaLabel,\n          toggleAriaLabel,\n          variant,\n          position,\n          className,\n          additionalActions,\n          ouiaId,\n          ouiaSafe,\n          removeFindDomNode\n        } = _a,\n        divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"switchDelay\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\", \"ouiaId\", \"ouiaSafe\", \"removeFindDomNode\"]);\n      const textIdPrefix = 'text-input-';\n      const toggleIdPrefix = 'toggle-';\n      const contentIdPrefix = 'content-';\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, this.state.expanded && styles.modifiers.expanded, className)\n      }, divProps, getOUIAProps(ClipboardCopy.displayName, ouiaId, ouiaSafe)), variant === 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, id => React.createElement(React.Fragment, null, !isCode && React.createElement(\"span\", {\n        className: css(styles.clipboardCopyText),\n        id: `${textIdPrefix}${id}`\n      }, this.state.text), isCode && React.createElement(\"code\", {\n        className: css(styles.clipboardCopyText, styles.modifiers.code),\n        id: `${textIdPrefix}${id}`\n      }, this.state.text), React.createElement(\"span\", {\n        className: css(styles.clipboardCopyActions)\n      }, React.createElement(\"span\", {\n        className: css(styles.clipboardCopyActionsItem)\n      }, React.createElement(ClipboardCopyButton, {\n        variant: \"plain\",\n        exitDelay: exitDelay,\n        entryDelay: entryDelay,\n        maxWidth: maxWidth,\n        position: position,\n        id: `copy-button-${id}`,\n        textId: `text-input-${id}`,\n        \"aria-label\": hoverTip,\n        onClick: event => {\n          onCopy(event, this.state.text);\n          this.setState({\n            copied: true\n          });\n        },\n        onTooltipHidden: () => this.setState({\n          copied: false\n        })\n      }, this.state.copied ? clickTip : hoverTip)), additionalActions && additionalActions))), variant !== 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, id => React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: css(styles.clipboardCopyGroup)\n      }, variant === 'expansion' && React.createElement(ClipboardCopyToggle, {\n        isExpanded: this.state.expanded,\n        onClick: this.expandContent,\n        id: `${toggleIdPrefix}${id}`,\n        textId: `${textIdPrefix}${id}`,\n        contentId: `${contentIdPrefix}${id}`,\n        \"aria-label\": toggleAriaLabel\n      }), React.createElement(TextInput, {\n        isReadOnly: isReadOnly || this.state.expanded,\n        onChange: this.updateText,\n        value: this.state.text,\n        id: `text-input-${id}`,\n        \"aria-label\": textAriaLabel\n      }), React.createElement(ClipboardCopyButton, {\n        exitDelay: exitDelay,\n        entryDelay: entryDelay,\n        maxWidth: maxWidth,\n        position: position,\n        id: `copy-button-${id}`,\n        textId: `text-input-${id}`,\n        \"aria-label\": hoverTip,\n        onClick: event => {\n          onCopy(event, this.state.text);\n          this.setState({\n            copied: true\n          });\n        },\n        onTooltipHidden: () => this.setState({\n          copied: false\n        }),\n        removeFindDomNode: removeFindDomNode\n      }, this.state.copied ? clickTip : hoverTip)), this.state.expanded && React.createElement(ClipboardCopyExpanded, {\n        isReadOnly: isReadOnly,\n        isCode: isCode,\n        id: `content-${id}`,\n        onChange: this.updateText\n      }, this.state.text))));\n    };\n    this.state = {\n      text: Array.isArray(this.props.children) ? this.props.children.join('') : this.props.children,\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n    if (this.props.switchDelay !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('ClipboardCopy: switchDelay prop has been deprecated. ' + 'The tooltip message will switch back to the hover tip as soon as the tooltip is hidden.');\n    }\n  }\n}\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n  hoverTip: 'Copy to clipboard',\n  clickTip: 'Successfully copied to clipboard!',\n  isReadOnly: false,\n  isExpanded: false,\n  isCode: false,\n  variant: 'inline',\n  position: PopoverPosition.top,\n  maxWidth: '150px',\n  exitDelay: 1500,\n  entryDelay: 300,\n  onCopy: clipboardCopyFunc,\n  onChange: () => undefined,\n  textAriaLabel: 'Copyable input',\n  toggleAriaLabel: 'Show content',\n  additionalActions: null,\n  ouiaSafe: true,\n  removeFindDomNode: false\n};","map":{"version":3,"sources":["../../../../src/components/ClipboardCopy/ClipboardCopy.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PopoverPosition } from '../Popover';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nimport { getOUIAProps } from '../../helpers';\nexport const clipboardCopyFunc = (event, text) => {\n    navigator.clipboard.writeText(text.toString());\n};\nexport var ClipboardCopyVariant;\n(function (ClipboardCopyVariant) {\n    ClipboardCopyVariant[\"inline\"] = \"inline\";\n    ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n    ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\nexport class ClipboardCopy extends React.Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.componentDidUpdate = (prevProps, prevState) => {\n            if (prevProps.children !== this.props.children) {\n                this.updateText(this.props.children);\n            }\n        };\n        this.componentWillUnmount = () => {\n            if (this.timer) {\n                window.clearTimeout(this.timer);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.expandContent = (_event) => {\n            this.setState(prevState => ({\n                expanded: !prevState.expanded\n            }));\n        };\n        this.updateText = (text) => {\n            this.setState({ text });\n            this.props.onChange(text);\n        };\n        this.render = () => {\n            const _a = this.props, { \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            isExpanded, onChange, // Don't pass to <div>\n            switchDelay, \n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            isReadOnly, isCode, isBlock, exitDelay, maxWidth, entryDelay, onCopy, hoverTip, clickTip, textAriaLabel, toggleAriaLabel, variant, position, className, additionalActions, ouiaId, ouiaSafe, removeFindDomNode } = _a, divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"switchDelay\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\", \"ouiaId\", \"ouiaSafe\", \"removeFindDomNode\"]);\n            const textIdPrefix = 'text-input-';\n            const toggleIdPrefix = 'toggle-';\n            const contentIdPrefix = 'content-';\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, this.state.expanded && styles.modifiers.expanded, className) }, divProps, getOUIAProps(ClipboardCopy.displayName, ouiaId, ouiaSafe)),\n                variant === 'inline-compact' && (React.createElement(GenerateId, { prefix: \"\" }, id => (React.createElement(React.Fragment, null,\n                    !isCode && (React.createElement(\"span\", { className: css(styles.clipboardCopyText), id: `${textIdPrefix}${id}` }, this.state.text)),\n                    isCode && (React.createElement(\"code\", { className: css(styles.clipboardCopyText, styles.modifiers.code), id: `${textIdPrefix}${id}` }, this.state.text)),\n                    React.createElement(\"span\", { className: css(styles.clipboardCopyActions) },\n                        React.createElement(\"span\", { className: css(styles.clipboardCopyActionsItem) },\n                            React.createElement(ClipboardCopyButton, { variant: \"plain\", exitDelay: exitDelay, entryDelay: entryDelay, maxWidth: maxWidth, position: position, id: `copy-button-${id}`, textId: `text-input-${id}`, \"aria-label\": hoverTip, onClick: (event) => {\n                                    onCopy(event, this.state.text);\n                                    this.setState({ copied: true });\n                                }, onTooltipHidden: () => this.setState({ copied: false }) }, this.state.copied ? clickTip : hoverTip)),\n                        additionalActions && additionalActions))))),\n                variant !== 'inline-compact' && (React.createElement(GenerateId, { prefix: \"\" }, id => (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.clipboardCopyGroup) },\n                        variant === 'expansion' && (React.createElement(ClipboardCopyToggle, { isExpanded: this.state.expanded, onClick: this.expandContent, id: `${toggleIdPrefix}${id}`, textId: `${textIdPrefix}${id}`, contentId: `${contentIdPrefix}${id}`, \"aria-label\": toggleAriaLabel })),\n                        React.createElement(TextInput, { isReadOnly: isReadOnly || this.state.expanded, onChange: this.updateText, value: this.state.text, id: `text-input-${id}`, \"aria-label\": textAriaLabel }),\n                        React.createElement(ClipboardCopyButton, { exitDelay: exitDelay, entryDelay: entryDelay, maxWidth: maxWidth, position: position, id: `copy-button-${id}`, textId: `text-input-${id}`, \"aria-label\": hoverTip, onClick: (event) => {\n                                onCopy(event, this.state.text);\n                                this.setState({ copied: true });\n                            }, onTooltipHidden: () => this.setState({ copied: false }), removeFindDomNode: removeFindDomNode }, this.state.copied ? clickTip : hoverTip)),\n                    this.state.expanded && (React.createElement(ClipboardCopyExpanded, { isReadOnly: isReadOnly, isCode: isCode, id: `content-${id}`, onChange: this.updateText }, this.state.text))))))));\n        };\n        this.state = {\n            text: Array.isArray(this.props.children)\n                ? this.props.children.join('')\n                : this.props.children,\n            expanded: this.props.isExpanded,\n            copied: false\n        };\n        if (this.props.switchDelay !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('ClipboardCopy: switchDelay prop has been deprecated. ' +\n                'The tooltip message will switch back to the hover tip as soon as the tooltip is hidden.');\n        }\n    }\n}\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline',\n    position: PopoverPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1500,\n    entryDelay: 300,\n    onCopy: clipboardCopyFunc,\n    onChange: () => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content',\n    additionalActions: null,\n    ouiaSafe: true,\n    removeFindDomNode: false\n};\n//# sourceMappingURL=ClipboardCopy.js.map"]},"metadata":{},"sourceType":"module"}