{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggle = _a => {\n  var {\n      isPlain = false,\n      isDisabled = false,\n      isOpen = false,\n      parentId = '',\n      toggleTemplate = React.createElement(React.Fragment, null),\n      hideCaret = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isSplitButton = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      type,\n      'aria-label': ariaLabel = 'Options menu'\n    } = _a,\n    props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n  return React.createElement(DropdownContext.Consumer, null, ({\n    id: contextId\n  }) => React.createElement(DropdownToggle, Object.assign({}, (isPlain || hideCaret) && {\n    toggleIndicator: null\n  }, props, {\n    isPlain: isPlain,\n    isOpen: isOpen,\n    isDisabled: isDisabled,\n    isActive: isActive,\n    id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isOpen\n  }, toggleTemplate ? {\n    children: toggleTemplate\n  } : {})));\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';","map":{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenuToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,cAAc,EAAE,eAAe,QAAQ,aAAa;AA4B7D,OAAO,MAAM,iBAAiB,GAAqD,EAe1D,IAAI;MAfsD;MACjF,OAAO,GAAG,KAAK;MACf,UAAU,GAAG,KAAK;MAClB,MAAM,GAAG,KAAK;MACd,QAAQ,GAAG,EAAE;MACb,cAAc,GAAG,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAQ,EAAA,IAAA,CAAG;MACnC,SAAS,GAAG,KAAK;MACjB;MACA,QAAQ,GAAG,KAAK;MAChB;MACA,aAAa,GAAG,KAAK;MACrB;MACA,IAAI;MACJ,YAAY,EAAE,SAAS,GAAG;IAAc,CAAA,GAAA,EAEjB;IADpB,KAAK,GAAA,MAAA,CAAA,EAAA,EAdyE,CAAA,SAAA,EAAA,YAAA,EAAA,QAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,eAAA,EAAA,MAAA,EAAA,YAAA,CAelF,CADS;EACoB,OAC5B,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAQ,EAAA,IAAA,EACtB,CAAC;IAAE,EAAE,EAAE;EAAS,CAAE,KACjB,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACR,CAAC,OAAO,IAAI,SAAS,KAAK;IAAE,eAAe,EAAE;EAAI,CAAE,EACpD,KAAK,EAAA;IACT,OAAO,EAAE,OAAO;IAChB,MAAM,EAAE,MAAM;IACd,UAAU,EAAE,UAAU;IACtB,QAAQ,EAAE,QAAQ;IAClB,EAAE,EAAE,QAAQ,GAAG,GAAG,QAAQ,SAAS,GAAG,GAAG,SAAS,SAAS;IAAA,eAAA,EAC7C,SAAS;IAAA,YAAA,EACX,SAAS;IAAA,eAAA,EACN;EAAM,CAAA,EAChB,cAAc,GAAG;IAAE,QAAQ,EAAE;EAAc,CAAE,GAAG,CAAA,CAAG,CAAA,CAE3D,CACwB;CAC5B;AACD,iBAAiB,CAAC,WAAW,GAAG,mBAAmB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggle = (_a) => {\n    var { isPlain = false, isDisabled = false, isOpen = false, parentId = '', toggleTemplate = React.createElement(React.Fragment, null), hideCaret = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isActive = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSplitButton = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type, 'aria-label': ariaLabel = 'Options menu' } = _a, props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n    return (React.createElement(DropdownContext.Consumer, null, ({ id: contextId }) => (React.createElement(DropdownToggle, Object.assign({}, ((isPlain || hideCaret) && { toggleIndicator: null }), props, { isPlain: isPlain, isOpen: isOpen, isDisabled: isDisabled, isActive: isActive, id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`, \"aria-haspopup\": \"listbox\", \"aria-label\": ariaLabel, \"aria-expanded\": isOpen }, (toggleTemplate ? { children: toggleTemplate } : {}))))));\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';\n//# sourceMappingURL=OptionsMenuToggle.js.map"]},"metadata":{},"sourceType":"module"}