{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardBody } from './WizardBody';\nexport const WizardToggle = ({\n  isNavOpen,\n  onNavToggle,\n  nav,\n  steps,\n  activeStep,\n  children,\n  hasNoBodyPadding = false,\n  'aria-label': ariaLabel = 'Wizard Toggle',\n  mainAriaLabelledBy = null,\n  mainAriaLabel = null,\n  isInPage = true,\n  hasDrawer,\n  isDrawerExpanded,\n  onExpandDrawer\n}) => {\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n  for (let i = 0; i < steps.length; i++) {\n    if (activeStep.id && steps[i].id === activeStep.id || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if (activeStep.id && step.id === activeStep.id || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => onNavToggle(!isNavOpen),\n    className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isNavOpen\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleList)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleNum)\n  }, activeStepIndex), \" \", activeStepName, activeStepSubName && React.createElement(AngleRightIcon, {\n    className: css(styles.wizardToggleSeparator),\n    \"aria-hidden\": \"true\"\n  })), activeStepSubName && React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, activeStepSubName)), React.createElement(\"span\", {\n    className: css(styles.wizardToggleIcon)\n  }, React.createElement(CaretDownIcon, {\n    \"aria-hidden\": \"true\"\n  }))), React.createElement(\"div\", {\n    className: css(styles.wizardOuterWrap)\n  }, React.createElement(\"div\", {\n    className: css(styles.wizardInnerWrap)\n  }, nav(isNavOpen), React.createElement(WizardBody, {\n    mainComponent: isInPage ? 'div' : 'main',\n    \"aria-label\": mainAriaLabel,\n    \"aria-labelledby\": mainAriaLabelledBy,\n    hasNoBodyPadding: hasNoBodyPadding,\n    activeStep: activeStep,\n    isDrawerExpanded: isDrawerExpanded,\n    onExpandDrawer: onExpandDrawer,\n    hasDrawer: hasDrawer\n  }, hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton, activeStep.component)), children));\n};\nWizardToggle.displayName = 'WizardToggle';","map":{"version":3,"sources":["../../../../src/components/Wizard/WizardToggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardBody } from './WizardBody';\nexport const WizardToggle = ({ isNavOpen, onNavToggle, nav, steps, activeStep, children, hasNoBodyPadding = false, 'aria-label': ariaLabel = 'Wizard Toggle', mainAriaLabelledBy = null, mainAriaLabel = null, isInPage = true, hasDrawer, isDrawerExpanded, onExpandDrawer }) => {\n    let activeStepIndex;\n    let activeStepName;\n    let activeStepSubName;\n    for (let i = 0; i < steps.length; i++) {\n        if ((activeStep.id && steps[i].id === activeStep.id) || steps[i].name === activeStep.name) {\n            activeStepIndex = i + 1;\n            activeStepName = steps[i].name;\n            break;\n        }\n        else if (steps[i].steps) {\n            for (const step of steps[i].steps) {\n                if ((activeStep.id && step.id === activeStep.id) || step.name === activeStep.name) {\n                    activeStepIndex = i + 1;\n                    activeStepName = steps[i].name;\n                    activeStepSubName = step.name;\n                    break;\n                }\n            }\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"button\", { onClick: () => onNavToggle(!isNavOpen), className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'), \"aria-label\": ariaLabel, \"aria-expanded\": isNavOpen },\n            React.createElement(\"span\", { className: css(styles.wizardToggleList) },\n                React.createElement(\"span\", { className: css(styles.wizardToggleListItem) },\n                    React.createElement(\"span\", { className: css(styles.wizardToggleNum) }, activeStepIndex),\n                    \" \",\n                    activeStepName,\n                    activeStepSubName && React.createElement(AngleRightIcon, { className: css(styles.wizardToggleSeparator), \"aria-hidden\": \"true\" })),\n                activeStepSubName && React.createElement(\"span\", { className: css(styles.wizardToggleListItem) }, activeStepSubName)),\n            React.createElement(\"span\", { className: css(styles.wizardToggleIcon) },\n                React.createElement(CaretDownIcon, { \"aria-hidden\": \"true\" }))),\n        React.createElement(\"div\", { className: css(styles.wizardOuterWrap) },\n            React.createElement(\"div\", { className: css(styles.wizardInnerWrap) },\n                nav(isNavOpen),\n                React.createElement(WizardBody, { mainComponent: isInPage ? 'div' : 'main', \"aria-label\": mainAriaLabel, \"aria-labelledby\": mainAriaLabelledBy, hasNoBodyPadding: hasNoBodyPadding, activeStep: activeStep, isDrawerExpanded: isDrawerExpanded, onExpandDrawer: onExpandDrawer, hasDrawer: hasDrawer },\n                    hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton,\n                    activeStep.component)),\n            children)));\n};\nWizardToggle.displayName = 'WizardToggle';\n//# sourceMappingURL=WizardToggle.js.map"]},"metadata":{},"sourceType":"module"}