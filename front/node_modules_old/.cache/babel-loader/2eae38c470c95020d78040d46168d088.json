{"ast":null,"code":"// @ts-nocheck\nimport getWindow from './getWindow';\nimport getDocumentElement from './getDocumentElement';\nimport getWindowScrollBarX from './getWindowScrollBarX';\n/**\n * @param element\n */\nexport default function getViewportRect(element) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn't open, so if this isn't available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: \"Not Safari\" userAgent\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x: x + getWindowScrollBarX(element),\n    y\n  };\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.ts"],"names":[],"mappings":"AAAA;AACA,OAAO,SAAS,MAAM,aAAa;AACnC,OAAO,kBAAkB,MAAM,sBAAsB;AACrD,OAAO,mBAAmB,MAAM,uBAAuB;AAEvD;;AAEG;AACH,eAAc,SAAU,eAAe,CAAC,OAAgB,EAAA;EACtD,MAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC;EAC9B,MAAM,IAAI,GAAG,kBAAkB,CAAC,OAAO,CAAC;EACxC,MAAM,cAAc,GAAG,GAAG,CAAC,cAAc;EAEzC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW;EAC5B,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY;EAC9B,IAAI,CAAC,GAAG,CAAC;EACT,IAAI,CAAC,GAAG,CAAC;EAET;EACA;EACA;EACA;EACA;EACA,IAAI,cAAc,EAAE;IAClB,KAAK,GAAG,cAAc,CAAC,KAAK;IAC5B,MAAM,GAAG,cAAc,CAAC,MAAM;IAE9B;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;MAC/D,CAAC,GAAG,cAAc,CAAC,UAAU;MAC7B,CAAC,GAAG,cAAc,CAAC,SAAS;IAC7B;EACF;EAED,OAAO;IACL,KAAK;IACL,MAAM;IACN,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,OAAO,CAAC;IACnC;GACD;AACH","sourceRoot":"","sourcesContent":["// @ts-nocheck\nimport getWindow from './getWindow';\nimport getDocumentElement from './getDocumentElement';\nimport getWindowScrollBarX from './getWindowScrollBarX';\n/**\n * @param element\n */\nexport default function getViewportRect(element) {\n    const win = getWindow(element);\n    const html = getDocumentElement(element);\n    const visualViewport = win.visualViewport;\n    let width = html.clientWidth;\n    let height = html.clientHeight;\n    let x = 0;\n    let y = 0;\n    // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n    // can be obscured underneath it.\n    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n    // if it isn't open, so if this isn't available, the popper will be detected\n    // to overflow the bottom of the screen too early.\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        // Uses Layout Viewport (like Chrome; Safari does not currently)\n        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n        // errors due to floating point numbers, so we need to check precision.\n        // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n        // Feature detection fails in mobile emulation mode in Chrome.\n        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n        // 0.001\n        // Fallback here: \"Not Safari\" userAgent\n        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width,\n        height,\n        x: x + getWindowScrollBarX(element),\n        y\n    };\n}\n//# sourceMappingURL=getViewportRect.js.map"]},"metadata":{},"sourceType":"module"}