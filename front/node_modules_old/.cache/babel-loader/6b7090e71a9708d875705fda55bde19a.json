{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nexport class ToolbarChipGroupContent extends React.Component {\n  render() {\n    const _a = this.props,\n      {\n        className,\n        isExpanded,\n        chipGroupContentRef,\n        clearAllFilters,\n        showClearFiltersButton,\n        clearFiltersButtonText,\n        collapseListedFiltersBreakpoint,\n        numberOfFilters,\n        numberOfFiltersText,\n        customChipGroupContent\n      } = _a,\n      props = __rest(_a, [\"className\", \"isExpanded\", \"chipGroupContentRef\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"numberOfFilters\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n    let collapseListedFilters = false;\n    if (collapseListedFiltersBreakpoint === 'all') {\n      collapseListedFilters = true;\n    } else if (canUseDOM) {\n      collapseListedFilters = (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n    }\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarContent, (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden, className)\n    }, (numberOfFilters === 0 || isExpanded) && {\n      hidden: true\n    }, {\n      ref: chipGroupContentRef\n    }, props), React.createElement(ToolbarGroup, Object.assign({\n      className: css(collapseListedFilters && styles.modifiers.hidden)\n    }, collapseListedFilters && {\n      hidden: true\n    }, collapseListedFilters && {\n      'aria-hidden': true\n    })), collapseListedFilters && numberOfFilters > 0 && !isExpanded && React.createElement(ToolbarGroup, null, React.createElement(ToolbarItem, null, numberOfFiltersText(numberOfFilters))), showClearFiltersButton && !isExpanded && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n      variant: \"link\",\n      onClick: clearChipGroups,\n      isInline: true\n    }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent);\n  }\n}\nToolbarChipGroupContent.displayName = 'ToolbarChipGroupContent';\nToolbarChipGroupContent.defaultProps = {\n  clearFiltersButtonText: 'Clear all filters',\n  collapseListedFiltersBreakpoint: 'lg',\n  numberOfFiltersText: numberOfFilters => `${numberOfFilters} filters applied`\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarChipGroupContent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAM,MAAM,yDAAyD;AAC5E,SAAS,GAAG,QAAQ,0BAA0B;AAC9C,SAAS,SAAS,QAAQ,oBAAoB;AAG9C,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,MAAM,QAAQ,WAAW;AAClC,SAAS,YAAY,QAAQ,gBAAgB;AAC7C,SAAS,iBAAiB,QAAQ,gBAAgB;AA0BlD,OAAM,MAAO,uBAAwB,SAAQ,KAAK,CAAC,SAAuC,CAAA;EAQxF,MAAM,CAAA,EAAA;IACJ,MAAM,EAAA,GAYF,IAAI,CAAC,KAAK;MAZR;QACJ,SAAS;QACT,UAAU;QACV,mBAAmB;QACnB,eAAe;QACf,sBAAsB;QACtB,sBAAsB;QACtB,+BAA+B;QAC/B,eAAe;QACf,mBAAmB;QACnB;MAAsB,CAAA,GAAA,EAEV;MADT,KAAK,GAAA,MAAA,CAAA,EAAA,EAXJ,CAAA,WAAA,EAAA,YAAA,EAAA,qBAAA,EAAA,iBAAA,EAAA,wBAAA,EAAA,wBAAA,EAAA,iCAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,wBAAA,CAYL,CAAa;IAEd,MAAM,eAAe,GAAG,CAAA,KAAK;MAC3B,eAAe,CAAA,CAAE;IACnB,CAAC;IAED,IAAI,qBAAqB,GAAG,KAAK;IACjC,IAAI,+BAA+B,KAAK,KAAK,EAAE;MAC7C,qBAAqB,GAAG,IAAI;KAC7B,MAAM,IAAI,SAAS,EAAE;MACpB,qBAAqB,GACnB,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,GAAG,IAAI,IAAI,iBAAiB,CAAC,+BAA+B,CAAC;IAC9F;IAED,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MACE,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,cAAc,EACrB,CAAC,eAAe,KAAK,CAAC,IAAI,UAAU,KAAK,MAAM,CAAC,SAAS,CAAC,MAAM,EAChE,SAAS;IACV,CAAA,EACI,CAAC,eAAe,KAAK,CAAC,IAAI,UAAU,KAAK;MAAE,MAAM,EAAE;IAAI,CAAE,EAAC;MAC/D,GAAG,EAAE;IAAmB,CAAA,EACpB,KAAK,CAAA,EAET,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA,MAAA,CAAA,MAAA,CAAA;MACX,SAAS,EAAE,GAAG,CAAC,qBAAqB,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM;IAAC,CAAA,EAC3D,qBAAqB,IAAI;MAAE,MAAM,EAAE;IAAI,CAAE,EACzC,qBAAqB,IAAI;MAAE,aAAa,EAAE;IAAI,CAAG,CAAA,CACtD,EACD,qBAAqB,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,UAAU,IAC1D,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA,IAAA,EACX,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA,IAAA,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAe,CAEpE,EACA,sBAAsB,IAAI,CAAC,UAAU,IAAI,CAAC,sBAAsB,IAC/D,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA,IAAA,EACV,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA;MAAC,OAAO,EAAC,MAAM;MAAC,OAAO,EAAE,eAAe;MAAE,QAAQ,EAAA;IAAA,CAAA,EACtD,sBAAsB,CAChB,CAEZ,EACA,sBAAsB,IAAI,sBAAsB,CAC7C;EAEV;;AAjEO,uBAAA,CAAA,WAAW,GAAG,yBAAyB;AACvC,uBAAA,CAAA,YAAY,GAA+C;EAChE,sBAAsB,EAAE,mBAAmB;EAC3C,+BAA+B,EAAE,IAAI;EACrC,mBAAmB,EAAG,eAAuB,IAAK,GAAG,eAAe;CACrE","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nexport class ToolbarChipGroupContent extends React.Component {\n    render() {\n        const _a = this.props, { className, isExpanded, chipGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, collapseListedFiltersBreakpoint, numberOfFilters, numberOfFiltersText, customChipGroupContent } = _a, props = __rest(_a, [\"className\", \"isExpanded\", \"chipGroupContentRef\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"numberOfFilters\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n        const clearChipGroups = () => {\n            clearAllFilters();\n        };\n        let collapseListedFilters = false;\n        if (collapseListedFiltersBreakpoint === 'all') {\n            collapseListedFilters = true;\n        }\n        else if (canUseDOM) {\n            collapseListedFilters =\n                (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n        }\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarContent, (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden, className) }, ((numberOfFilters === 0 || isExpanded) && { hidden: true }), { ref: chipGroupContentRef }, props),\n            React.createElement(ToolbarGroup, Object.assign({ className: css(collapseListedFilters && styles.modifiers.hidden) }, (collapseListedFilters && { hidden: true }), (collapseListedFilters && { 'aria-hidden': true }))),\n            collapseListedFilters && numberOfFilters > 0 && !isExpanded && (React.createElement(ToolbarGroup, null,\n                React.createElement(ToolbarItem, null, numberOfFiltersText(numberOfFilters)))),\n            showClearFiltersButton && !isExpanded && !customChipGroupContent && (React.createElement(ToolbarItem, null,\n                React.createElement(Button, { variant: \"link\", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText))),\n            customChipGroupContent && customChipGroupContent));\n    }\n}\nToolbarChipGroupContent.displayName = 'ToolbarChipGroupContent';\nToolbarChipGroupContent.defaultProps = {\n    clearFiltersButtonText: 'Clear all filters',\n    collapseListedFiltersBreakpoint: 'lg',\n    numberOfFiltersText: (numberOfFilters) => `${numberOfFilters} filters applied`\n};\n//# sourceMappingURL=ToolbarChipGroupContent.js.map"]},"metadata":{},"sourceType":"module"}