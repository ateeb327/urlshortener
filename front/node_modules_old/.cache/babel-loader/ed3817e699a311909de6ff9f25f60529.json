{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\nexport class ToolbarToggleGroup extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.isContentPopup = () => {\n      const viewportSize = canUseDOM ? window.innerWidth : 1200;\n      const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n      return viewportSize < lgBreakpointValue;\n    };\n  }\n  render() {\n    const _a = this.props,\n      {\n        toggleIcon,\n        variant,\n        visibility,\n        visiblity,\n        breakpoint,\n        alignment,\n        spacer,\n        spaceItems,\n        className,\n        children\n      } = _a,\n      props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n    return React.createElement(PageContext.Consumer, null, ({\n      width,\n      getBreakpoint\n    }) => React.createElement(ToolbarContext.Consumer, null, ({\n      isExpanded,\n      toggleIsExpanded\n    }) => React.createElement(ToolbarContentContext.Consumer, null, ({\n      expandableContentRef,\n      expandableContentId\n    }) => {\n      if (expandableContentRef.current && expandableContentRef.current.classList) {\n        if (isExpanded) {\n          expandableContentRef.current.classList.add(styles.modifiers.expanded);\n        } else {\n          expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n        }\n      }\n      const breakpointMod = {};\n      breakpointMod[breakpoint] = 'show';\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)), formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n      }, props), React.createElement(\"div\", {\n        className: css(styles.toolbarToggle)\n      }, React.createElement(Button, Object.assign({\n        variant: \"plain\",\n        onClick: toggleIsExpanded,\n        \"aria-label\": \"Show Filters\"\n      }, isExpanded && {\n        'aria-expanded': true\n      }, {\n        \"aria-haspopup\": isExpanded && this.isContentPopup(),\n        \"aria-controls\": expandableContentId\n      }), toggleIcon)), isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild) : children);\n    })));\n  }\n}\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarToggleGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\nexport class ToolbarToggleGroup extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.isContentPopup = () => {\n            const viewportSize = canUseDOM ? window.innerWidth : 1200;\n            const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n            return viewportSize < lgBreakpointValue;\n        };\n    }\n    render() {\n        const _a = this.props, { toggleIcon, variant, visibility, visiblity, breakpoint, alignment, spacer, spaceItems, className, children } = _a, props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n        if (!breakpoint && !toggleIcon) {\n            // eslint-disable-next-line no-console\n            console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n        }\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(PageContext.Consumer, null, ({ width, getBreakpoint }) => (React.createElement(ToolbarContext.Consumer, null, ({ isExpanded, toggleIsExpanded }) => (React.createElement(ToolbarContentContext.Consumer, null, ({ expandableContentRef, expandableContentId }) => {\n            if (expandableContentRef.current && expandableContentRef.current.classList) {\n                if (isExpanded) {\n                    expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                }\n                else {\n                    expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                }\n            }\n            const breakpointMod = {};\n            breakpointMod[breakpoint] = 'show';\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant &&\n                    styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)), formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className) }, props),\n                React.createElement(\"div\", { className: css(styles.toolbarToggle) },\n                    React.createElement(Button, Object.assign({ variant: \"plain\", onClick: toggleIsExpanded, \"aria-label\": \"Show Filters\" }, (isExpanded && { 'aria-expanded': true }), { \"aria-haspopup\": isExpanded && this.isContentPopup(), \"aria-controls\": expandableContentId }), toggleIcon)),\n                isExpanded\n                    ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild)\n                    : children));\n        }))))));\n    }\n}\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';\n//# sourceMappingURL=ToolbarToggleGroup.js.map"]},"metadata":{},"sourceType":"module"}