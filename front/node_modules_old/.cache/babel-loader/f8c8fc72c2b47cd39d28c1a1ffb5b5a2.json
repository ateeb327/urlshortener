{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { DualListSelectorTree } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { SearchInput } from '../SearchInput';\nexport const DualListSelectorPane = _a => {\n  var {\n      isChosen = false,\n      className = '',\n      status = '',\n      actions,\n      searchInput,\n      children,\n      onOptionSelect,\n      onOptionCheck,\n      title = '',\n      options = [],\n      selectedOptions = [],\n      isSearchable = false,\n      searchInputAriaLabel = '',\n      onFilterUpdate,\n      onSearchInputChanged,\n      onSearchInputClear,\n      filterOption,\n      id = getUniqueId('dual-list-selector-pane'),\n      isDisabled = false,\n      listMinHeight\n    } = _a,\n    props = __rest(_a, [\"isChosen\", \"className\", \"status\", \"actions\", \"searchInput\", \"children\", \"onOptionSelect\", \"onOptionCheck\", \"title\", \"options\", \"selectedOptions\", \"isSearchable\", \"searchInputAriaLabel\", \"onFilterUpdate\", \"onSearchInputChanged\", \"onSearchInputClear\", \"filterOption\", \"id\", \"isDisabled\", \"listMinHeight\"]);\n  const [input, setInput] = React.useState('');\n  const {\n    isTree\n  } = React.useContext(DualListSelectorContext);\n  // only called when search input is dynamically built\n  const onChange = (e, newValue) => {\n    let filtered;\n    if (isTree) {\n      filtered = options.map(opt => Object.assign({}, opt)).filter(item => filterInput(item, newValue));\n    } else {\n      filtered = options.filter(option => {\n        if (displayOption(option)) {\n          return option;\n        }\n      });\n    }\n    onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n    if (onSearchInputChanged) {\n      onSearchInputChanged(newValue, e);\n    }\n    setInput(newValue);\n  };\n  // only called when options are passed via options prop and isTree === true\n  const filterInput = (item, input) => {\n    if (filterOption) {\n      return filterOption(item, input);\n    } else {\n      if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n        return true;\n      }\n    }\n    if (item.children) {\n      return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterInput(child, input))).length > 0;\n    }\n  };\n  // only called when options are passed via options prop and isTree === false\n  const displayOption = option => {\n    if (filterOption) {\n      return filterOption(option, input);\n    } else {\n      return option.toString().toLowerCase().includes(input.toLowerCase());\n    }\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)\n  }, props), title && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorHeader)\n  }, React.createElement(\"div\", {\n    className: \"pf-c-dual-list-selector__title\"\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTitleText)\n  }, title))), (actions || searchInput || isSearchable) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTools)\n  }, (isSearchable || searchInput) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsFilter)\n  }, searchInput ? searchInput : React.createElement(SearchInput, {\n    onChange: isDisabled ? undefined : onChange,\n    onClear: onSearchInputClear ? onSearchInputClear : e => onChange(e, ''),\n    isDisabled: isDisabled,\n    \"aria-label\": searchInputAriaLabel,\n    type: \"search\"\n  })), actions && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsActions)\n  }, actions)), status && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatus)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatusText),\n    id: `${id}-status`\n  }, status)), React.createElement(DualListSelectorPaneContext.Provider, {\n    value: {\n      isChosen\n    }\n  }, !isTree && React.createElement(DualListSelectorListWrapper, Object.assign({\n    \"aria-labelledby\": `${id}-status`,\n    options: options,\n    selectedOptions: selectedOptions,\n    onOptionSelect: (e, index, id) => onOptionSelect(e, index, isChosen, id),\n    displayOption: displayOption,\n    id: `${id}-list`,\n    isDisabled: isDisabled\n  }, listMinHeight && {\n    style: {\n      '--pf-c-dual-list-selector__menu--MinHeight': listMinHeight\n    }\n  }), children), isTree && React.createElement(DualListSelectorListWrapper, Object.assign({\n    \"aria-labelledby\": `${id}-status`,\n    id: `${id}-list`\n  }, listMinHeight && {\n    style: {\n      '--pf-c-dual-list-selector__menu--MinHeight': listMinHeight\n    }\n  }), options.length > 0 ? React.createElement(DualListSelectorList, null, React.createElement(DualListSelectorTree, {\n    data: isSearchable ? options.map(opt => Object.assign({}, opt)).filter(item => filterInput(item, input)) : options,\n    onOptionCheck: onOptionCheck,\n    id: `${id}-tree`,\n    isDisabled: isDisabled\n  })) : children)));\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorPane.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { DualListSelectorTree } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { SearchInput } from '../SearchInput';\nexport const DualListSelectorPane = (_a) => {\n    var { isChosen = false, className = '', status = '', actions, searchInput, children, onOptionSelect, onOptionCheck, title = '', options = [], selectedOptions = [], isSearchable = false, searchInputAriaLabel = '', onFilterUpdate, onSearchInputChanged, onSearchInputClear, filterOption, id = getUniqueId('dual-list-selector-pane'), isDisabled = false, listMinHeight } = _a, props = __rest(_a, [\"isChosen\", \"className\", \"status\", \"actions\", \"searchInput\", \"children\", \"onOptionSelect\", \"onOptionCheck\", \"title\", \"options\", \"selectedOptions\", \"isSearchable\", \"searchInputAriaLabel\", \"onFilterUpdate\", \"onSearchInputChanged\", \"onSearchInputClear\", \"filterOption\", \"id\", \"isDisabled\", \"listMinHeight\"]);\n    const [input, setInput] = React.useState('');\n    const { isTree } = React.useContext(DualListSelectorContext);\n    // only called when search input is dynamically built\n    const onChange = (e, newValue) => {\n        let filtered;\n        if (isTree) {\n            filtered = options\n                .map(opt => Object.assign({}, opt))\n                .filter(item => filterInput(item, newValue));\n        }\n        else {\n            filtered = options.filter(option => {\n                if (displayOption(option)) {\n                    return option;\n                }\n            });\n        }\n        onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n        if (onSearchInputChanged) {\n            onSearchInputChanged(newValue, e);\n        }\n        setInput(newValue);\n    };\n    // only called when options are passed via options prop and isTree === true\n    const filterInput = (item, input) => {\n        if (filterOption) {\n            return filterOption(item, input);\n        }\n        else {\n            if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n                return true;\n            }\n        }\n        if (item.children) {\n            return ((item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterInput(child, input)))\n                .length > 0);\n        }\n    };\n    // only called when options are passed via options prop and isTree === false\n    const displayOption = (option) => {\n        if (filterOption) {\n            return filterOption(option, input);\n        }\n        else {\n            return option\n                .toString()\n                .toLowerCase()\n                .includes(input.toLowerCase());\n        }\n    };\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className) }, props),\n        title && (React.createElement(\"div\", { className: css(styles.dualListSelectorHeader) },\n            React.createElement(\"div\", { className: \"pf-c-dual-list-selector__title\" },\n                React.createElement(\"div\", { className: css(styles.dualListSelectorTitleText) }, title)))),\n        (actions || searchInput || isSearchable) && (React.createElement(\"div\", { className: css(styles.dualListSelectorTools) },\n            (isSearchable || searchInput) && (React.createElement(\"div\", { className: css(styles.dualListSelectorToolsFilter) }, searchInput ? (searchInput) : (React.createElement(SearchInput, { onChange: isDisabled ? undefined : onChange, onClear: onSearchInputClear ? onSearchInputClear : e => onChange(e, ''), isDisabled: isDisabled, \"aria-label\": searchInputAriaLabel, type: \"search\" })))),\n            actions && React.createElement(\"div\", { className: css(styles.dualListSelectorToolsActions) }, actions))),\n        status && (React.createElement(\"div\", { className: css(styles.dualListSelectorStatus) },\n            React.createElement(\"div\", { className: css(styles.dualListSelectorStatusText), id: `${id}-status` }, status))),\n        React.createElement(DualListSelectorPaneContext.Provider, { value: { isChosen } },\n            !isTree && (React.createElement(DualListSelectorListWrapper, Object.assign({ \"aria-labelledby\": `${id}-status`, options: options, selectedOptions: selectedOptions, onOptionSelect: (e, index, id) => onOptionSelect(e, index, isChosen, id), displayOption: displayOption, id: `${id}-list`, isDisabled: isDisabled }, (listMinHeight && {\n                style: { '--pf-c-dual-list-selector__menu--MinHeight': listMinHeight }\n            })), children)),\n            isTree && (React.createElement(DualListSelectorListWrapper, Object.assign({ \"aria-labelledby\": `${id}-status`, id: `${id}-list` }, (listMinHeight && {\n                style: { '--pf-c-dual-list-selector__menu--MinHeight': listMinHeight }\n            })), options.length > 0 ? (React.createElement(DualListSelectorList, null,\n                React.createElement(DualListSelectorTree, { data: isSearchable\n                        ? options\n                            .map(opt => Object.assign({}, opt))\n                            .filter(item => filterInput(item, input))\n                        : options, onOptionCheck: onOptionCheck, id: `${id}-tree`, isDisabled: isDisabled }))) : (children))))));\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';\n//# sourceMappingURL=DualListSelectorPane.js.map"]},"metadata":{},"sourceType":"module"}