{"ast":null,"code":"// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\nconst INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nconst MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nconst VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n/**\n * @param modifiers\n */\nexport default function validateModifiers(modifiers) {\n  modifiers.forEach(modifier => {\n    Object.keys(modifier).forEach(key => {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', `\"${String(modifier.name)}\"`));\n          }\n          break;\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', `\"${String(modifier.enabled)}\"`));\n          }\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', `either ${modifierPhases.join(', ')}`, `\"${String(modifier.phase)}\"`));\n          }\n          break;\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n          }\n          break;\n        case 'effect':\n          if (typeof modifier.effect !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n          }\n          break;\n        case 'requires':\n          if (!Array.isArray(modifier.requires)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', `\"${String(modifier.requires)}\"`));\n          }\n          break;\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', `\"${String(modifier.requiresIfExists)}\"`));\n          }\n          break;\n        case 'options':\n        case 'data':\n          break;\n        default:\n          console.error(`PopperJS: an invalid property has been provided to the \"${modifier.name}\" modifier, valid properties are ${VALID_PROPERTIES.map(s => `\"${s}\"`).join(', ')}; but \"${key}\" was provided.`);\n      }\n      modifier.requires && modifier.requires.forEach(requirement => {\n        if (modifiers.find(mod => mod.name === requirement) == null) {\n          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/validateModifiers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\nconst INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nconst MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nconst VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n/**\n * @param modifiers\n */\nexport default function validateModifiers(modifiers) {\n    modifiers.forEach(modifier => {\n        Object.keys(modifier).forEach(key => {\n            switch (key) {\n                case 'name':\n                    if (typeof modifier.name !== 'string') {\n                        console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', `\"${String(modifier.name)}\"`));\n                    }\n                    break;\n                case 'enabled':\n                    if (typeof modifier.enabled !== 'boolean') {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', `\"${String(modifier.enabled)}\"`));\n                    }\n                case 'phase':\n                    if (modifierPhases.indexOf(modifier.phase) < 0) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', `either ${modifierPhases.join(', ')}`, `\"${String(modifier.phase)}\"`));\n                    }\n                    break;\n                case 'fn':\n                    if (typeof modifier.fn !== 'function') {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n                    }\n                    break;\n                case 'effect':\n                    if (typeof modifier.effect !== 'function') {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n                    }\n                    break;\n                case 'requires':\n                    if (!Array.isArray(modifier.requires)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', `\"${String(modifier.requires)}\"`));\n                    }\n                    break;\n                case 'requiresIfExists':\n                    if (!Array.isArray(modifier.requiresIfExists)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', `\"${String(modifier.requiresIfExists)}\"`));\n                    }\n                    break;\n                case 'options':\n                case 'data':\n                    break;\n                default:\n                    console.error(`PopperJS: an invalid property has been provided to the \"${modifier.name}\" modifier, valid properties are ${VALID_PROPERTIES.map(s => `\"${s}\"`).join(', ')}; but \"${key}\" was provided.`);\n            }\n            modifier.requires &&\n                modifier.requires.forEach(requirement => {\n                    if (modifiers.find(mod => mod.name === requirement) == null) {\n                        console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n                    }\n                });\n        });\n    });\n}\n//# sourceMappingURL=validateModifiers.js.map"]},"metadata":{},"sourceType":"module"}