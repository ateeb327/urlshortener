{"ast":null,"code":"import { __rest } from \"tslib\";\n/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\nclass BaseBody extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.omitOnRow = props => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n          onRow\n        } = props,\n        ret = __rest(props, [\"onRow\"]);\n      return ret;\n    };\n  }\n  shouldComponentUpdate(nextProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const {\n      renderers\n    } = nextProps;\n    if (renderers && renderers.body && renderers.body.wrapper && renderers.body.wrapper.shouldComponentUpdate) {\n      if (typeof renderers.body.wrapper.shouldComponentUpdate === 'function') {\n        return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n      return true;\n    }\n    return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n  }\n  render() {\n    const _a = this.props,\n      {\n        onRow,\n        rows,\n        rowKey,\n        columns,\n        renderers\n      } = _a,\n      props = __rest(_a, [\"onRow\", \"rows\", \"rowKey\", \"columns\", \"renderers\"]);\n    const children = rows.map((rowData, index) => {\n      const key = resolveRowKey({\n        rowData,\n        rowIndex: index,\n        rowKey\n      });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n    return React.createElement(renderers.body.wrapper, props, children);\n  }\n}\nBaseBody.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: (...args) => ({})\n};\nexport const Body = props => React.createElement(ProviderContext.Consumer, null, ({\n  columns,\n  renderers\n}) => React.createElement(BaseBody, Object.assign({\n  columns: columns,\n  renderers: renderers\n}, props)));","map":{"version":3,"sources":["../../../../../src/components/Table/base/body.tsx"],"names":[],"mappings":";AAAA;;;;;AAKG;AACH,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,OAAO,MAAM,gBAAgB;AAEpC,SAAS,aAAa,QAAQ,mBAAmB;AACjD,SAAS,OAAO,QAAQ,YAAY;AACpC,SAAS,eAAe,QAAQ,YAAY;AAY5C,MAAM,QAAS,SAAQ,KAAK,CAAC,SAAwB,CAAA;EAArD,WAAA,CAAA,EAAA;;IA4BE,IAAA,CAAA,SAAS,GAAI,KAAgB,IAAI;MAC/B;MACA,MAAM;UAAE;QAAK,CAAA,GAAa,KAAK;QAAb,GAAG,GAAA,MAAA,CAAK,KAAK,EAAzB,CAAA,OAAA,CAAiB,CAAQ;MAC/B,OAAO,GAAG;IACZ,CAAC;EAmBH;EA7CE,qBAAqB,CAAC,SAAoB,EAAA;IACxC;IACA;IACA;IACA;IACA,MAAM;MAAE;IAAS,CAAE,GAAG,SAAS;IAE/B,IACE,SAAS,IACT,SAAS,CAAC,IAAI,IACd,SAAS,CAAC,IAAI,CAAC,OAAO,IACrB,SAAS,CAAC,IAAI,CAAC,OAA2B,CAAC,qBAAqB,EACjE;MACA,IAAI,OAAQ,SAAS,CAAC,IAAI,CAAC,OAA2B,CAAC,qBAAqB,KAAK,UAAU,EAAE;QAC3F,OAAQ,SAAS,CAAC,IAAI,CAAC,OAA2B,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,CAAA,CAAE,EAAE,CAAA,CAAE,CAAC;MACvG;MACD,OAAO,IAAI;IACZ;IAED,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;EACxE;EAQA,MAAM,CAAA,EAAA;IACJ,MAAM,EAAA,GAAwD,IAAI,CAAC,KAAK;MAAlE;QAAE,KAAK;QAAE,IAAI;QAAE,MAAM;QAAE,OAAO;QAAE;MAAS,CAAA,GAAA,EAAyB;MAApB,KAAK,GAAA,MAAA,CAAA,EAAA,EAAnD,CAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,CAAqD,CAAa;IACxE,MAAM,QAAQ,GAAI,IAAW,CAAC,GAAG,CAAC,CAAC,OAAgB,EAAE,KAAa,KAAI;MACpE,MAAM,GAAG,GAAG,aAAa,CAAC;QAAE,OAAO;QAAE,QAAQ,EAAE,KAAK;QAAE;MAAM,CAAE,CAAC;MAC/D,OAAO,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE;QAClC,GAAG;QACH,SAAS,EAAE,SAAS,CAAC,IAAI;QACzB,KAAK;QACL,MAAM,EAAE,GAAG;QACX,QAAQ,EAAE,KAAK;QACf,OAAO;QACP;OACD,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,OAA4B,EAAE,KAAK,EAAE,QAAQ,CAAC;EAC1F;;AAjDO,QAAA,CAAA,YAAY,GAAG;EACpB;EACA,KAAK,EAAE,CAAC,GAAG,IAAS,MAAM,CAAA,CAAE;CAC7B;AAiDH,OAAO,MAAM,IAAI,GAAI,KAAgB,IACnC,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAQ,EAAA,IAAA,EACtB,CAAC;EAAE,OAAO;EAAE;AAAS,CAAE,KAAK,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA;EAAC,OAAO,EAAE,OAAO;EAAE,SAAS,EAAE;AAAS,CAAA,EAAM,KAAK,CAAA,CAAI,CAE/F","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\n/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\nclass BaseBody extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.omitOnRow = (props) => {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { onRow } = props, ret = __rest(props, [\"onRow\"]);\n            return ret;\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        // Skip checking props against `onRow` since that can be bound at render().\n        // That's not particularly good practice but you never know how the users\n        // prefer to define the handler.\n        // Check for wrapper based override.\n        const { renderers } = nextProps;\n        if (renderers &&\n            renderers.body &&\n            renderers.body.wrapper &&\n            renderers.body.wrapper.shouldComponentUpdate) {\n            if (typeof renderers.body.wrapper.shouldComponentUpdate === 'function') {\n                return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, {}, {});\n            }\n            return true;\n        }\n        return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n    }\n    render() {\n        const _a = this.props, { onRow, rows, rowKey, columns, renderers } = _a, props = __rest(_a, [\"onRow\", \"rows\", \"rowKey\", \"columns\", \"renderers\"]);\n        const children = rows.map((rowData, index) => {\n            const key = resolveRowKey({ rowData, rowIndex: index, rowKey });\n            return React.createElement(BodyRow, {\n                key,\n                renderers: renderers.body,\n                onRow,\n                rowKey: key,\n                rowIndex: index,\n                rowData,\n                columns\n            });\n        });\n        return React.createElement(renderers.body.wrapper, props, children);\n    }\n}\nBaseBody.defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args) => ({})\n};\nexport const Body = (props) => (React.createElement(ProviderContext.Consumer, null, ({ columns, renderers }) => React.createElement(BaseBody, Object.assign({ columns: columns, renderers: renderers }, props))));\n//# sourceMappingURL=body.js.map"]},"metadata":{},"sourceType":"module"}