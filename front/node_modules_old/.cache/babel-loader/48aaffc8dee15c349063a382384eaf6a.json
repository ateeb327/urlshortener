{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { SelectOption } from './SelectOption';\nimport { SelectConsumer, SelectPosition, SelectVariant } from './selectConstants';\nimport { SelectGroup } from './SelectGroup';\nimport { Divider } from '../Divider/Divider';\nclass SelectMenuWithRef extends React.Component {\n  extendChildren(randomId) {\n    const {\n      children,\n      hasInlineFilter,\n      isGrouped\n    } = this.props;\n    const childrenArray = children;\n    let index = hasInlineFilter ? 1 : 0;\n    if (isGrouped) {\n      return React.Children.map(childrenArray, group => {\n        if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, option => this.cloneOption(option, index++, randomId))\n          });\n        } else {\n          return this.cloneOption(group, index++, randomId);\n        }\n      });\n    }\n    return React.Children.map(childrenArray, child => this.cloneOption(child, index++, randomId));\n  }\n  cloneOption(child, index, randomId) {\n    const {\n      selected,\n      sendRef,\n      keyHandler\n    } = this.props;\n    const isSelected = this.checkForValue(child.props.value, selected);\n    if (child.type === Divider) {\n      return child;\n    }\n    return React.cloneElement(child, {\n      inputId: `${randomId}-${index}`,\n      isSelected,\n      sendRef,\n      keyHandler,\n      index\n    });\n  }\n  checkForValue(valueToCheck, options) {\n    if (!options || !valueToCheck) {\n      return false;\n    }\n    const isSelectOptionObject = typeof valueToCheck !== 'string' && valueToCheck.toString && valueToCheck.compareTo;\n    if (Array.isArray(options)) {\n      if (isSelectOptionObject) {\n        return options.some(option => option.compareTo(valueToCheck));\n      } else {\n        return options.includes(valueToCheck);\n      }\n    } else {\n      if (isSelectOptionObject) {\n        return options.compareTo(valueToCheck);\n      } else {\n        return options === valueToCheck;\n      }\n    }\n  }\n  extendCheckboxChildren(children) {\n    const {\n      isGrouped,\n      checked,\n      sendRef,\n      keyHandler,\n      hasInlineFilter,\n      isLastOptionBeforeFooter\n    } = this.props;\n    let index = hasInlineFilter ? 1 : 0;\n    if (isGrouped) {\n      return React.Children.map(children, group => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectOption) {\n          return React.cloneElement(group, {\n            isChecked: this.checkForValue(group.props.value, checked),\n            sendRef,\n            keyHandler,\n            index: index++,\n            isLastOptionBeforeFooter\n          });\n        }\n        return React.cloneElement(group, {\n          titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n          children: group.props.children ? React.createElement(\"fieldset\", {\n            \"aria-labelledby\": group.props.label && group.props.label.replace(/\\W/g, '-'),\n            className: css(styles.selectMenuFieldset)\n          }, React.Children.map(group.props.children, option => option.type === Divider ? option : React.cloneElement(option, {\n            isChecked: this.checkForValue(option.props.value, checked),\n            sendRef,\n            keyHandler,\n            index: index++,\n            isLastOptionBeforeFooter\n          }))) : null\n        });\n      });\n    }\n    return React.Children.map(children, child => child.type === Divider ? child : React.cloneElement(child, {\n      isChecked: this.checkForValue(child.props.value, checked),\n      sendRef,\n      keyHandler,\n      index: index++,\n      isLastOptionBeforeFooter\n    }));\n  }\n  renderSelectMenu({\n    variant,\n    inputIdPrefix\n  }) {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const _a = this.props,\n      {\n        children,\n        isCustomContent,\n        className,\n        isExpanded,\n        openedOnEnter,\n        selected,\n        checked,\n        isGrouped,\n        position,\n        sendRef,\n        keyHandler,\n        maxHeight,\n        noResultsFoundText,\n        createText,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        hasInlineFilter,\n        innerRef,\n        footer,\n        footerRef,\n        isLastOptionBeforeFooter\n      } = _a,\n      props = __rest(_a, [\"children\", \"isCustomContent\", \"className\", \"isExpanded\", \"openedOnEnter\", \"selected\", \"checked\", \"isGrouped\", \"position\", \"sendRef\", \"keyHandler\", \"maxHeight\", \"noResultsFoundText\", \"createText\", 'aria-label', 'aria-labelledby', \"hasInlineFilter\", \"innerRef\", \"footer\", \"footerRef\", \"isLastOptionBeforeFooter\"]);\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    let Component = 'div';\n    const variantProps = Object.assign({\n      ref: innerRef,\n      className: css(!footer ? styles.selectMenu : 'pf-c-select__menu-list', position === SelectPosition.right && styles.modifiers.alignRight, className)\n    }, maxHeight && {\n      style: {\n        maxHeight,\n        overflow: 'auto'\n      }\n    });\n    const extendedChildren = () => variant === SelectVariant.checkbox ? this.extendCheckboxChildren(children) : this.extendChildren(inputIdPrefix);\n    if (isCustomContent) {\n      variantProps.children = children;\n    } else if (hasInlineFilter) {\n      if (React.Children.count(children) === 0) {\n        variantProps.children = React.createElement(\"fieldset\", {\n          className: css(styles.selectMenuFieldset)\n        });\n      } else {\n        variantProps.children = React.createElement(\"fieldset\", {\n          \"aria-label\": ariaLabel,\n          \"aria-labelledby\": !ariaLabel && ariaLabelledBy || null,\n          className: css(formStyles.formFieldset)\n        }, children.shift(), extendedChildren());\n      }\n    } else {\n      variantProps.children = extendedChildren();\n      if (!isGrouped) {\n        Component = 'ul';\n        variantProps.role = 'listbox';\n        variantProps['aria-label'] = ariaLabel;\n        variantProps['aria-labelledby'] = !ariaLabel && ariaLabelledBy || null;\n      }\n    }\n    return React.createElement(React.Fragment, null, React.createElement(Component, Object.assign({}, variantProps, props)), footer && React.createElement(\"div\", {\n      className: css(styles.selectMenuFooter),\n      ref: footerRef\n    }, footer));\n  }\n  render() {\n    return React.createElement(SelectConsumer, null, context => this.renderSelectMenu(context));\n  }\n}\nSelectMenuWithRef.displayName = 'SelectMenu';\nSelectMenuWithRef.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isGrouped: false,\n  openedOnEnter: false,\n  selected: '',\n  maxHeight: '',\n  position: SelectPosition.left,\n  sendRef: () => {},\n  keyHandler: () => {},\n  isCustomContent: false,\n  hasInlineFilter: false,\n  isLastOptionBeforeFooter: () => {}\n};\nexport const SelectMenu = React.forwardRef((props, ref) => React.createElement(SelectMenuWithRef, Object.assign({\n  innerRef: ref\n}, props), props.children));","map":{"version":3,"sources":["../../../../src/components/Select/SelectMenu.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { SelectOption } from './SelectOption';\nimport { SelectConsumer, SelectPosition, SelectVariant } from './selectConstants';\nimport { SelectGroup } from './SelectGroup';\nimport { Divider } from '../Divider/Divider';\nclass SelectMenuWithRef extends React.Component {\n    extendChildren(randomId) {\n        const { children, hasInlineFilter, isGrouped } = this.props;\n        const childrenArray = children;\n        let index = hasInlineFilter ? 1 : 0;\n        if (isGrouped) {\n            return React.Children.map(childrenArray, (group) => {\n                if (group.type === SelectGroup) {\n                    return React.cloneElement(group, {\n                        titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                        children: React.Children.map(group.props.children, (option) => this.cloneOption(option, index++, randomId))\n                    });\n                }\n                else {\n                    return this.cloneOption(group, index++, randomId);\n                }\n            });\n        }\n        return React.Children.map(childrenArray, (child) => this.cloneOption(child, index++, randomId));\n    }\n    cloneOption(child, index, randomId) {\n        const { selected, sendRef, keyHandler } = this.props;\n        const isSelected = this.checkForValue(child.props.value, selected);\n        if (child.type === Divider) {\n            return child;\n        }\n        return React.cloneElement(child, {\n            inputId: `${randomId}-${index}`,\n            isSelected,\n            sendRef,\n            keyHandler,\n            index\n        });\n    }\n    checkForValue(valueToCheck, options) {\n        if (!options || !valueToCheck) {\n            return false;\n        }\n        const isSelectOptionObject = typeof valueToCheck !== 'string' &&\n            valueToCheck.toString &&\n            valueToCheck.compareTo;\n        if (Array.isArray(options)) {\n            if (isSelectOptionObject) {\n                return options.some(option => option.compareTo(valueToCheck));\n            }\n            else {\n                return options.includes(valueToCheck);\n            }\n        }\n        else {\n            if (isSelectOptionObject) {\n                return options.compareTo(valueToCheck);\n            }\n            else {\n                return options === valueToCheck;\n            }\n        }\n    }\n    extendCheckboxChildren(children) {\n        const { isGrouped, checked, sendRef, keyHandler, hasInlineFilter, isLastOptionBeforeFooter } = this.props;\n        let index = hasInlineFilter ? 1 : 0;\n        if (isGrouped) {\n            return React.Children.map(children, (group) => {\n                if (group.type === Divider) {\n                    return group;\n                }\n                else if (group.type === SelectOption) {\n                    return React.cloneElement(group, {\n                        isChecked: this.checkForValue(group.props.value, checked),\n                        sendRef,\n                        keyHandler,\n                        index: index++,\n                        isLastOptionBeforeFooter\n                    });\n                }\n                return React.cloneElement(group, {\n                    titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                    children: group.props.children ? (React.createElement(\"fieldset\", { \"aria-labelledby\": group.props.label && group.props.label.replace(/\\W/g, '-'), className: css(styles.selectMenuFieldset) }, React.Children.map(group.props.children, (option) => option.type === Divider\n                        ? option\n                        : React.cloneElement(option, {\n                            isChecked: this.checkForValue(option.props.value, checked),\n                            sendRef,\n                            keyHandler,\n                            index: index++,\n                            isLastOptionBeforeFooter\n                        })))) : null\n                });\n            });\n        }\n        return React.Children.map(children, (child) => child.type === Divider\n            ? child\n            : React.cloneElement(child, {\n                isChecked: this.checkForValue(child.props.value, checked),\n                sendRef,\n                keyHandler,\n                index: index++,\n                isLastOptionBeforeFooter\n            }));\n    }\n    renderSelectMenu({ variant, inputIdPrefix }) {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const _a = this.props, { children, isCustomContent, className, isExpanded, openedOnEnter, selected, checked, isGrouped, position, sendRef, keyHandler, maxHeight, noResultsFoundText, createText, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, hasInlineFilter, innerRef, footer, footerRef, isLastOptionBeforeFooter } = _a, props = __rest(_a, [\"children\", \"isCustomContent\", \"className\", \"isExpanded\", \"openedOnEnter\", \"selected\", \"checked\", \"isGrouped\", \"position\", \"sendRef\", \"keyHandler\", \"maxHeight\", \"noResultsFoundText\", \"createText\", 'aria-label', 'aria-labelledby', \"hasInlineFilter\", \"innerRef\", \"footer\", \"footerRef\", \"isLastOptionBeforeFooter\"]);\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        let Component = 'div';\n        const variantProps = Object.assign({ ref: innerRef, className: css(!footer ? styles.selectMenu : 'pf-c-select__menu-list', position === SelectPosition.right && styles.modifiers.alignRight, className) }, (maxHeight && { style: { maxHeight, overflow: 'auto' } }));\n        const extendedChildren = () => variant === SelectVariant.checkbox\n            ? this.extendCheckboxChildren(children)\n            : this.extendChildren(inputIdPrefix);\n        if (isCustomContent) {\n            variantProps.children = children;\n        }\n        else if (hasInlineFilter) {\n            if (React.Children.count(children) === 0) {\n                variantProps.children = React.createElement(\"fieldset\", { className: css(styles.selectMenuFieldset) });\n            }\n            else {\n                variantProps.children = (React.createElement(\"fieldset\", { \"aria-label\": ariaLabel, \"aria-labelledby\": (!ariaLabel && ariaLabelledBy) || null, className: css(formStyles.formFieldset) },\n                    children.shift(),\n                    extendedChildren()));\n            }\n        }\n        else {\n            variantProps.children = extendedChildren();\n            if (!isGrouped) {\n                Component = 'ul';\n                variantProps.role = 'listbox';\n                variantProps['aria-label'] = ariaLabel;\n                variantProps['aria-labelledby'] = (!ariaLabel && ariaLabelledBy) || null;\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Component, Object.assign({}, variantProps, props)),\n            footer && (React.createElement(\"div\", { className: css(styles.selectMenuFooter), ref: footerRef }, footer))));\n    }\n    render() {\n        return React.createElement(SelectConsumer, null, context => this.renderSelectMenu(context));\n    }\n}\nSelectMenuWithRef.displayName = 'SelectMenu';\nSelectMenuWithRef.defaultProps = {\n    className: '',\n    isExpanded: false,\n    isGrouped: false,\n    openedOnEnter: false,\n    selected: '',\n    maxHeight: '',\n    position: SelectPosition.left,\n    sendRef: () => { },\n    keyHandler: () => { },\n    isCustomContent: false,\n    hasInlineFilter: false,\n    isLastOptionBeforeFooter: () => { }\n};\nexport const SelectMenu = React.forwardRef((props, ref) => (React.createElement(SelectMenuWithRef, Object.assign({ innerRef: ref }, props), props.children)));\n//# sourceMappingURL=SelectMenu.js.map"]},"metadata":{},"sourceType":"module"}