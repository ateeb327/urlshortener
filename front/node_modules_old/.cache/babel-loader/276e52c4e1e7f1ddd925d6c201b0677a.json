{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Popover } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport { CalendarMonth } from '../CalendarMonth';\nimport { useImperativeHandle } from 'react';\nimport { KeyTypes } from '../../helpers';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport const yyyyMMddFormat = date => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\nconst DatePickerBase = (_a, ref) => {\n  var {\n      className,\n      locale = undefined,\n      dateFormat = yyyyMMddFormat,\n      dateParse = val => val.split('-').length === 3 && new Date(`${val}T00:00:00`),\n      isDisabled = false,\n      placeholder = 'YYYY-MM-DD',\n      value: valueProp = '',\n      'aria-label': ariaLabel = 'Date picker',\n      buttonAriaLabel = 'Toggle date picker',\n      onChange = () => undefined,\n      onBlur = () => undefined,\n      invalidFormatText = 'Invalid date',\n      requiredDateOptions,\n      helperText,\n      appendTo = 'parent',\n      popoverProps,\n      monthFormat,\n      weekdayFormat,\n      longWeekdayFormat,\n      dayFormat,\n      weekStart,\n      validators = [],\n      rangeStart,\n      style: styleProps = {},\n      inputProps = {}\n    } = _a,\n    props = __rest(_a, [\"className\", \"locale\", \"dateFormat\", \"dateParse\", \"isDisabled\", \"placeholder\", \"value\", 'aria-label', \"buttonAriaLabel\", \"onChange\", \"onBlur\", \"invalidFormatText\", \"requiredDateOptions\", \"helperText\", \"appendTo\", \"popoverProps\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"validators\", \"rangeStart\", \"style\", \"inputProps\"]);\n  const [value, setValue] = React.useState(valueProp);\n  const [valueDate, setValueDate] = React.useState(dateParse(value));\n  const [errorText, setErrorText] = React.useState('');\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n  const [selectOpen, setSelectOpen] = React.useState(false);\n  const [pristine, setPristine] = React.useState(true);\n  const widthChars = React.useMemo(() => Math.max(dateFormat(new Date()).length, placeholder.length), [dateFormat]);\n  const style = Object.assign({\n    '--pf-c-date-picker__input--c-form-control--width-chars': widthChars\n  }, styleProps);\n  const buttonRef = React.useRef();\n  const datePickerWrapperRef = React.useRef();\n  const emptyDateText = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.emptyDateText) || 'Date cannot be blank';\n  React.useEffect(() => {\n    setValue(valueProp);\n    setValueDate(dateParse(valueProp));\n  }, [valueProp]);\n  React.useEffect(() => {\n    setPristine(!value);\n    const newValueDate = dateParse(value);\n    if (errorText && isValidDate(newValueDate)) {\n      setError(newValueDate);\n    }\n  }, [value]);\n  const setError = date => {\n    setErrorText(validators.map(validator => validator(date)).join('\\n') || '');\n  };\n  const onTextInput = (value, event) => {\n    setValue(value);\n    setErrorText('');\n    const newValueDate = dateParse(value);\n    setValueDate(newValueDate);\n    if (isValidDate(newValueDate)) {\n      onChange(event, value, new Date(newValueDate));\n    } else {\n      onChange(event, value);\n    }\n  };\n  const onInputBlur = event => {\n    const newValueDate = dateParse(value);\n    const dateIsValid = isValidDate(newValueDate);\n    const onBlurDateArg = dateIsValid ? new Date(newValueDate) : undefined;\n    onBlur(event, value, onBlurDateArg);\n    if (dateIsValid) {\n      setError(newValueDate);\n    }\n    if (!dateIsValid && !pristine) {\n      setErrorText(invalidFormatText);\n    }\n    if (!dateIsValid && pristine && (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired)) {\n      setErrorText(emptyDateText);\n    }\n  };\n  const onDateClick = newValueDate => {\n    const newValue = dateFormat(newValueDate);\n    setValue(newValue);\n    setValueDate(newValueDate);\n    setError(newValueDate);\n    setPopoverOpen(false);\n    onChange(null, newValue, new Date(newValueDate));\n  };\n  const onKeyPress = ev => {\n    if (ev.key === 'Enter' && value) {\n      if (isValidDate(valueDate)) {\n        setError(valueDate);\n      } else {\n        setErrorText(invalidFormatText);\n      }\n    }\n  };\n  useImperativeHandle(ref, () => ({\n    setCalendarOpen: isOpen => setPopoverOpen(isOpen),\n    toggleCalendar: (setOpen, eventKey) => {\n      if (eventKey === KeyTypes.Escape && popoverOpen && !selectOpen) {\n        setPopoverOpen(prev => setOpen !== undefined ? setOpen : !prev);\n      }\n    },\n    isCalendarOpen: popoverOpen\n  }), [setPopoverOpen, popoverOpen, selectOpen]);\n  const getParentElement = () => datePickerWrapperRef && datePickerWrapperRef.current ? datePickerWrapperRef.current : null;\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.datePicker, className),\n    ref: datePickerWrapperRef,\n    style: style\n  }, props), React.createElement(Popover, Object.assign({\n    position: \"bottom\",\n    bodyContent: React.createElement(CalendarMonth, {\n      date: valueDate,\n      onChange: onDateClick,\n      locale: locale,\n      // Use truthy values of strings\n      validators: validators.map(validator => date => !validator(date)),\n      onSelectToggle: open => setSelectOpen(open),\n      monthFormat: monthFormat,\n      weekdayFormat: weekdayFormat,\n      longWeekdayFormat: longWeekdayFormat,\n      dayFormat: dayFormat,\n      weekStart: weekStart,\n      rangeStart: rangeStart,\n      isDateFocused: true\n    }),\n    showClose: false,\n    isVisible: popoverOpen,\n    shouldClose: (_1, _2, event) => {\n      event = event;\n      if (event.key === KeyTypes.Escape && selectOpen) {\n        event.stopPropagation();\n        setSelectOpen(false);\n        return false;\n      }\n      // Let our button handle toggling\n      if (buttonRef.current && buttonRef.current.contains(event.target)) {\n        return false;\n      }\n      setPopoverOpen(false);\n      // If datepicker is required and the popover is opened without the text input\n      // first receiving focus, we want to validate that the text input is not blank upon\n      // closing the popover\n      (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) && !value && setErrorText(emptyDateText);\n      if (event.key === KeyTypes.Escape && popoverOpen) {\n        event.stopPropagation();\n      }\n      return true;\n    },\n    withFocusTrap: true,\n    hasNoPadding: true,\n    hasAutoWidth: true,\n    appendTo: appendTo === 'parent' ? getParentElement() : appendTo\n  }, popoverProps), React.createElement(\"div\", {\n    className: styles.datePickerInput\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, Object.assign({\n    isDisabled: isDisabled,\n    isRequired: requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired,\n    \"aria-label\": ariaLabel,\n    placeholder: placeholder,\n    validated: errorText.trim() ? 'error' : 'default',\n    value: value,\n    onChange: onTextInput,\n    onBlur: onInputBlur,\n    onKeyPress: onKeyPress\n  }, inputProps)), React.createElement(\"button\", {\n    ref: buttonRef,\n    className: css(buttonStyles.button, buttonStyles.modifiers.control),\n    \"aria-label\": buttonAriaLabel,\n    type: \"button\",\n    onClick: () => setPopoverOpen(!popoverOpen),\n    disabled: isDisabled\n  }, React.createElement(OutlinedCalendarAltIcon, null))))), helperText && React.createElement(\"div\", {\n    className: styles.datePickerHelperText\n  }, helperText), errorText.trim() && React.createElement(\"div\", {\n    className: css(styles.datePickerHelperText, styles.modifiers.error)\n  }, errorText));\n};\nexport const DatePicker = React.forwardRef(DatePickerBase);\nDatePicker.displayName = 'DatePicker';","map":{"version":3,"sources":["../../../../src/components/DatePicker/DatePicker.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Popover } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport { CalendarMonth } from '../CalendarMonth';\nimport { useImperativeHandle } from 'react';\nimport { KeyTypes } from '../../helpers';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport const yyyyMMddFormat = (date) => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\n    .getDate()\n    .toString()\n    .padStart(2, '0')}`;\nconst DatePickerBase = (_a, ref) => {\n    var { className, locale = undefined, dateFormat = yyyyMMddFormat, dateParse = (val) => val.split('-').length === 3 && new Date(`${val}T00:00:00`), isDisabled = false, placeholder = 'YYYY-MM-DD', value: valueProp = '', 'aria-label': ariaLabel = 'Date picker', buttonAriaLabel = 'Toggle date picker', onChange = () => undefined, onBlur = () => undefined, invalidFormatText = 'Invalid date', requiredDateOptions, helperText, appendTo = 'parent', popoverProps, monthFormat, weekdayFormat, longWeekdayFormat, dayFormat, weekStart, validators = [], rangeStart, style: styleProps = {}, inputProps = {} } = _a, props = __rest(_a, [\"className\", \"locale\", \"dateFormat\", \"dateParse\", \"isDisabled\", \"placeholder\", \"value\", 'aria-label', \"buttonAriaLabel\", \"onChange\", \"onBlur\", \"invalidFormatText\", \"requiredDateOptions\", \"helperText\", \"appendTo\", \"popoverProps\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"validators\", \"rangeStart\", \"style\", \"inputProps\"]);\n    const [value, setValue] = React.useState(valueProp);\n    const [valueDate, setValueDate] = React.useState(dateParse(value));\n    const [errorText, setErrorText] = React.useState('');\n    const [popoverOpen, setPopoverOpen] = React.useState(false);\n    const [selectOpen, setSelectOpen] = React.useState(false);\n    const [pristine, setPristine] = React.useState(true);\n    const widthChars = React.useMemo(() => Math.max(dateFormat(new Date()).length, placeholder.length), [dateFormat]);\n    const style = Object.assign({ '--pf-c-date-picker__input--c-form-control--width-chars': widthChars }, styleProps);\n    const buttonRef = React.useRef();\n    const datePickerWrapperRef = React.useRef();\n    const emptyDateText = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.emptyDateText) || 'Date cannot be blank';\n    React.useEffect(() => {\n        setValue(valueProp);\n        setValueDate(dateParse(valueProp));\n    }, [valueProp]);\n    React.useEffect(() => {\n        setPristine(!value);\n        const newValueDate = dateParse(value);\n        if (errorText && isValidDate(newValueDate)) {\n            setError(newValueDate);\n        }\n    }, [value]);\n    const setError = (date) => {\n        setErrorText(validators.map(validator => validator(date)).join('\\n') || '');\n    };\n    const onTextInput = (value, event) => {\n        setValue(value);\n        setErrorText('');\n        const newValueDate = dateParse(value);\n        setValueDate(newValueDate);\n        if (isValidDate(newValueDate)) {\n            onChange(event, value, new Date(newValueDate));\n        }\n        else {\n            onChange(event, value);\n        }\n    };\n    const onInputBlur = (event) => {\n        const newValueDate = dateParse(value);\n        const dateIsValid = isValidDate(newValueDate);\n        const onBlurDateArg = dateIsValid ? new Date(newValueDate) : undefined;\n        onBlur(event, value, onBlurDateArg);\n        if (dateIsValid) {\n            setError(newValueDate);\n        }\n        if (!dateIsValid && !pristine) {\n            setErrorText(invalidFormatText);\n        }\n        if (!dateIsValid && pristine && (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired)) {\n            setErrorText(emptyDateText);\n        }\n    };\n    const onDateClick = (newValueDate) => {\n        const newValue = dateFormat(newValueDate);\n        setValue(newValue);\n        setValueDate(newValueDate);\n        setError(newValueDate);\n        setPopoverOpen(false);\n        onChange(null, newValue, new Date(newValueDate));\n    };\n    const onKeyPress = (ev) => {\n        if (ev.key === 'Enter' && value) {\n            if (isValidDate(valueDate)) {\n                setError(valueDate);\n            }\n            else {\n                setErrorText(invalidFormatText);\n            }\n        }\n    };\n    useImperativeHandle(ref, () => ({\n        setCalendarOpen: (isOpen) => setPopoverOpen(isOpen),\n        toggleCalendar: (setOpen, eventKey) => {\n            if (eventKey === KeyTypes.Escape && popoverOpen && !selectOpen) {\n                setPopoverOpen(prev => (setOpen !== undefined ? setOpen : !prev));\n            }\n        },\n        isCalendarOpen: popoverOpen\n    }), [setPopoverOpen, popoverOpen, selectOpen]);\n    const getParentElement = () => datePickerWrapperRef && datePickerWrapperRef.current ? datePickerWrapperRef.current : null;\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.datePicker, className), ref: datePickerWrapperRef, style: style }, props),\n        React.createElement(Popover, Object.assign({ position: \"bottom\", bodyContent: React.createElement(CalendarMonth, { date: valueDate, onChange: onDateClick, locale: locale, \n                // Use truthy values of strings\n                validators: validators.map(validator => (date) => !validator(date)), onSelectToggle: open => setSelectOpen(open), monthFormat: monthFormat, weekdayFormat: weekdayFormat, longWeekdayFormat: longWeekdayFormat, dayFormat: dayFormat, weekStart: weekStart, rangeStart: rangeStart, isDateFocused: true }), showClose: false, isVisible: popoverOpen, shouldClose: (_1, _2, event) => {\n                event = event;\n                if (event.key === KeyTypes.Escape && selectOpen) {\n                    event.stopPropagation();\n                    setSelectOpen(false);\n                    return false;\n                }\n                // Let our button handle toggling\n                if (buttonRef.current && buttonRef.current.contains(event.target)) {\n                    return false;\n                }\n                setPopoverOpen(false);\n                // If datepicker is required and the popover is opened without the text input\n                // first receiving focus, we want to validate that the text input is not blank upon\n                // closing the popover\n                (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) && !value && setErrorText(emptyDateText);\n                if (event.key === KeyTypes.Escape && popoverOpen) {\n                    event.stopPropagation();\n                }\n                return true;\n            }, withFocusTrap: true, hasNoPadding: true, hasAutoWidth: true, appendTo: appendTo === 'parent' ? getParentElement() : appendTo }, popoverProps),\n            React.createElement(\"div\", { className: styles.datePickerInput },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, Object.assign({ isDisabled: isDisabled, isRequired: requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired, \"aria-label\": ariaLabel, placeholder: placeholder, validated: errorText.trim() ? 'error' : 'default', value: value, onChange: onTextInput, onBlur: onInputBlur, onKeyPress: onKeyPress }, inputProps)),\n                    React.createElement(\"button\", { ref: buttonRef, className: css(buttonStyles.button, buttonStyles.modifiers.control), \"aria-label\": buttonAriaLabel, type: \"button\", onClick: () => setPopoverOpen(!popoverOpen), disabled: isDisabled },\n                        React.createElement(OutlinedCalendarAltIcon, null))))),\n        helperText && React.createElement(\"div\", { className: styles.datePickerHelperText }, helperText),\n        errorText.trim() && React.createElement(\"div\", { className: css(styles.datePickerHelperText, styles.modifiers.error) }, errorText)));\n};\nexport const DatePicker = React.forwardRef(DatePickerBase);\nDatePicker.displayName = 'DatePicker';\n//# sourceMappingURL=DatePicker.js.map"]},"metadata":{},"sourceType":"module"}